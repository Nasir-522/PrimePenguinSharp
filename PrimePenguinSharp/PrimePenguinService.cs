using Newtonsoft.Json;
using System.Threading.Tasks;
using System.Collections.Generic;
using System;
using PrimePenguinSharp;
using System.ComponentModel.DataAnnotations;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace PrimePenguinSharp
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<JsonSerializerSettings> _settings;

        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<JsonSerializerSettings>(CreateSerializerSettings);
        }

        private JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<IsTenantAvailableOutput>> ApiServicesAppAccountIstenantavailablePostAsync(IsTenantAvailableInput body)
        {
            return ApiServicesAppAccountIstenantavailablePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<IsTenantAvailableOutput>> ApiServicesAppAccountIstenantavailablePostAsync(IsTenantAvailableInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/IsTenantAvailable");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<IsTenantAvailableOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppAccountResolvetenantidPostAsync(ResolveTenantIdInput body)
        {
            return ApiServicesAppAccountResolvetenantidPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppAccountResolvetenantidPostAsync(ResolveTenantIdInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/ResolveTenantId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<RegisterOutput>> ApiServicesAppAccountRegisterPostAsync(RegisterInput body)
        {
            return ApiServicesAppAccountRegisterPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<RegisterOutput>> ApiServicesAppAccountRegisterPostAsync(RegisterInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/Register");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<RegisterOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppAccountSendpasswordresetcodePostAsync(SendPasswordResetCodeInput body)
        {
            return ApiServicesAppAccountSendpasswordresetcodePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppAccountSendpasswordresetcodePostAsync(SendPasswordResetCodeInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/SendPasswordResetCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ResetPasswordOutput>> ApiServicesAppAccountResetpasswordPostAsync(ResetPasswordInput body)
        {
            return ApiServicesAppAccountResetpasswordPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ResetPasswordOutput>> ApiServicesAppAccountResetpasswordPostAsync(ResetPasswordInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/ResetPassword");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ResetPasswordOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppAccountSendemailactivationlinkPostAsync(SendEmailActivationLinkInput body)
        {
            return ApiServicesAppAccountSendemailactivationlinkPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppAccountSendemailactivationlinkPostAsync(SendEmailActivationLinkInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/SendEmailActivationLink");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppAccountActivateemailPostAsync(ActivateEmailInput body)
        {
            return ApiServicesAppAccountActivateemailPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppAccountActivateemailPostAsync(ActivateEmailInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/ActivateEmail");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ImpersonateOutput>> ApiServicesAppAccountImpersonatePostAsync(ImpersonateInput body)
        {
            return ApiServicesAppAccountImpersonatePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ImpersonateOutput>> ApiServicesAppAccountImpersonatePostAsync(ImpersonateInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/Impersonate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ImpersonateOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ImpersonateOutput>> ApiServicesAppAccountDelegatedimpersonatePostAsync(DelegatedImpersonateInput body)
        {
            return ApiServicesAppAccountDelegatedimpersonatePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ImpersonateOutput>> ApiServicesAppAccountDelegatedimpersonatePostAsync(DelegatedImpersonateInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/DelegatedImpersonate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ImpersonateOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ImpersonateOutput>> ApiServicesAppAccountBacktoimpersonatorPostAsync()
        {
            return ApiServicesAppAccountBacktoimpersonatorPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ImpersonateOutput>> ApiServicesAppAccountBacktoimpersonatorPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/BackToImpersonator");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ImpersonateOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SwitchToLinkedAccountOutput>> ApiServicesAppAccountSwitchtolinkedaccountPostAsync(SwitchToLinkedAccountInput body)
        {
            return ApiServicesAppAccountSwitchtolinkedaccountPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SwitchToLinkedAccountOutput>> ApiServicesAppAccountSwitchtolinkedaccountPostAsync(SwitchToLinkedAccountInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Account/SwitchToLinkedAccount");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SwitchToLinkedAccountOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfAuditLogListDto>> ApiServicesAppAuditlogGetauditlogsGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string serviceName, string methodName, string browserInfo, bool? hasException, int? minExecutionDuration, int? maxExecutionDuration, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppAuditlogGetauditlogsGetAsync(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfAuditLogListDto>> ApiServicesAppAuditlogGetauditlogsGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string serviceName, string methodName, string browserInfo, bool? hasException, int? minExecutionDuration, int? maxExecutionDuration, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/AuditLog/GetAuditLogs?");
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (serviceName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ServiceName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(serviceName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (methodName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MethodName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(methodName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (browserInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BrowserInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(browserInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasException != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("HasException") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasException, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minExecutionDuration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MinExecutionDuration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minExecutionDuration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxExecutionDuration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxExecutionDuration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxExecutionDuration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfAuditLogListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppAuditlogGetauditlogstoexcelGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string serviceName, string methodName, string browserInfo, bool? hasException, int? minExecutionDuration, int? maxExecutionDuration, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppAuditlogGetauditlogstoexcelGetAsync(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppAuditlogGetauditlogstoexcelGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string serviceName, string methodName, string browserInfo, bool? hasException, int? minExecutionDuration, int? maxExecutionDuration, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/AuditLog/GetAuditLogsToExcel?");
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (serviceName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ServiceName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(serviceName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (methodName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MethodName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(methodName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (browserInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BrowserInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(browserInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasException != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("HasException") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasException, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minExecutionDuration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MinExecutionDuration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minExecutionDuration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxExecutionDuration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxExecutionDuration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxExecutionDuration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<NameValueDto>>> ApiServicesAppAuditlogGetentityhistoryobjecttypesGetAsync()
        {
            return ApiServicesAppAuditlogGetentityhistoryobjecttypesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<NameValueDto>>> ApiServicesAppAuditlogGetentityhistoryobjecttypesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/AuditLog/GetEntityHistoryObjectTypes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<NameValueDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfEntityChangeListDto>> ApiServicesAppAuditlogGetentitychangesGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string entityTypeFullName, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppAuditlogGetentitychangesGetAsync(startDate, endDate, userName, entityTypeFullName, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfEntityChangeListDto>> ApiServicesAppAuditlogGetentitychangesGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string entityTypeFullName, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/AuditLog/GetEntityChanges?");
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entityTypeFullName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EntityTypeFullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityTypeFullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfEntityChangeListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfEntityChangeListDto>> ApiServicesAppAuditlogGetentitytypechangesGetAsync(string entityTypeFullName, string entityId, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppAuditlogGetentitytypechangesGetAsync(entityTypeFullName, entityId, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfEntityChangeListDto>> ApiServicesAppAuditlogGetentitytypechangesGetAsync(string entityTypeFullName, string entityId, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/AuditLog/GetEntityTypeChanges?");
            if (entityTypeFullName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EntityTypeFullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityTypeFullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entityId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EntityId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfEntityChangeListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppAuditlogGetentitychangestoexcelGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string entityTypeFullName, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppAuditlogGetentitychangestoexcelGetAsync(startDate, endDate, userName, entityTypeFullName, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppAuditlogGetentitychangestoexcelGetAsync(DateTimeOffset? startDate, DateTimeOffset? endDate, string userName, string entityTypeFullName, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/AuditLog/GetEntityChangesToExcel?");
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entityTypeFullName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EntityTypeFullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityTypeFullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<EntityPropertyChangeDto>>> ApiServicesAppAuditlogGetentitypropertychangesGetAsync(long? entityChangeId)
        {
            return ApiServicesAppAuditlogGetentitypropertychangesGetAsync(entityChangeId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<EntityPropertyChangeDto>>> ApiServicesAppAuditlogGetentitypropertychangesGetAsync(long? entityChangeId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/AuditLog/GetEntityPropertyChanges?");
            if (entityChangeId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("entityChangeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityChangeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<EntityPropertyChangeDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Install BigCommerce Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBigcommerceInstallbigcommercePostAsync(InstallBigCommerceInput body)
        {
            return ApiServicesAppBigcommerceInstallbigcommercePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Install BigCommerce Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBigcommerceInstallbigcommercePostAsync(InstallBigCommerceInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BigCommerce/InstallBigCommerce");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBigcommercehookPostAsync(BigCommerceHookInput body)
        {
            return ApiServicesAppBigcommercehookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBigcommercehookPostAsync(BigCommerceHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BigCommerceHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBigcommercehookProcessPostAsync(int? salesChannelId, string securityKey, BigCommerceWebhookPayload body)
        {
            return ApiServicesAppBigcommercehookProcessPostAsync(salesChannelId, securityKey, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBigcommercehookProcessPostAsync(int? salesChannelId, string securityKey, BigCommerceWebhookPayload body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BigCommerceHook/process?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBigcommercehookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppBigcommercehookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBigcommercehookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BigCommerceHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBigcommercehookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppBigcommercehookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBigcommercehookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BigCommerceHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Installs Brink sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppBrinkInstallbrinkPostAsync(InstallBrinkInput body)
        {
            return ApiServicesAppBrinkInstallbrinkPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Installs Brink sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppBrinkInstallbrinkPostAsync(InstallBrinkInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Brink/InstallBrink");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBrinkhookProcessproductPostAsync(int? salesChannelId, BringWebhookData body)
        {
            return ApiServicesAppBrinkhookProcessproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBrinkhookProcessproductPostAsync(int? salesChannelId, BringWebhookData body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BrinkHook/ProcessProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBrinkhookProcessorderPostAsync(int? salesChannelId, BringWebhookData body)
        {
            return ApiServicesAppBrinkhookProcessorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBrinkhookProcessorderPostAsync(int? salesChannelId, BringWebhookData body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BrinkHook/ProcessOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBrinkhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppBrinkhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBrinkhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BrinkHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppBrinkhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppBrinkhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppBrinkhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/BrinkHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfCacheDto>> ApiServicesAppCachingGetallcachesGetAsync()
        {
            return ApiServicesAppCachingGetallcachesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfCacheDto>> ApiServicesAppCachingGetallcachesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Caching/GetAllCaches");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfCacheDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppCachingClearcachePostAsync(EntityDtoOfString body)
        {
            return ApiServicesAppCachingClearcachePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppCachingClearcachePostAsync(EntityDtoOfString body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Caching/ClearCache");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppCachingClearallcachesPostAsync()
        {
            return ApiServicesAppCachingClearallcachesPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppCachingClearallcachesPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Caching/ClearAllCaches");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Installs Centra sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppCentraInstallcentraPostAsync(InstallCentraInput body)
        {
            return ApiServicesAppCentraInstallcentraPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Installs Centra sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppCentraInstallcentraPostAsync(InstallCentraInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Centra/InstallCentra");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppCentrahookPostAsync(CentraHookInput body)
        {
            return ApiServicesAppCentrahookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppCentrahookPostAsync(CentraHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CentraHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppCentrahookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppCentrahookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppCentrahookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CentraHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppCentrahookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppCentrahookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppCentrahookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CentraHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Installs Chargebee sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppChargebeeInstallchargebeePostAsync(InstallChargebeeInput body)
        {
            return ApiServicesAppChargebeeInstallchargebeePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Installs Chargebee sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppChargebeeInstallchargebeePostAsync(InstallChargebeeInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Chargebee/InstallChargebee");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppChargebeehookPostAsync(int? salesChannelId, string securityKey, object body)
        {
            return ApiServicesAppChargebeehookPostAsync(salesChannelId, securityKey, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppChargebeehookPostAsync(int? salesChannelId, string securityKey, object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ChargebeeHook?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetUserChatFriendsWithSettingsOutput>> ApiServicesAppChatGetuserchatfriendswithsettingsGetAsync()
        {
            return ApiServicesAppChatGetuserchatfriendswithsettingsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetUserChatFriendsWithSettingsOutput>> ApiServicesAppChatGetuserchatfriendswithsettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Chat/GetUserChatFriendsWithSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetUserChatFriendsWithSettingsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfChatMessageDto>> ApiServicesAppChatGetuserchatmessagesGetAsync(int? tenantId, long? userId, long? minMessageId)
        {
            return ApiServicesAppChatGetuserchatmessagesGetAsync(tenantId, userId, minMessageId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfChatMessageDto>> ApiServicesAppChatGetuserchatmessagesGetAsync(int? tenantId, long? userId, long? minMessageId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Chat/GetUserChatMessages?");
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minMessageId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MinMessageId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minMessageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfChatMessageDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppChatMarkallunreadmessagesofuserasreadPostAsync(MarkAllUnreadMessagesOfUserAsReadInput body)
        {
            return ApiServicesAppChatMarkallunreadmessagesofuserasreadPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppChatMarkallunreadmessagesofuserasreadPostAsync(MarkAllUnreadMessagesOfUserAsReadInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfSubscribableEditionComboboxItemDto>> ApiServicesAppCommonlookupGeteditionsforcomboboxGetAsync(bool? onlyFreeItems)
        {
            return ApiServicesAppCommonlookupGeteditionsforcomboboxGetAsync(onlyFreeItems, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfSubscribableEditionComboboxItemDto>> ApiServicesAppCommonlookupGeteditionsforcomboboxGetAsync(bool? onlyFreeItems, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CommonLookup/GetEditionsForCombobox?");
            if (onlyFreeItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlyFreeItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyFreeItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfSubscribableEditionComboboxItemDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfNameValueDto>> ApiServicesAppCommonlookupFindusersPostAsync(FindUsersInput body)
        {
            return ApiServicesAppCommonlookupFindusersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfNameValueDto>> ApiServicesAppCommonlookupFindusersPostAsync(FindUsersInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CommonLookup/FindUsers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfNameValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetDefaultEditionNameOutput>> ApiServicesAppCommonlookupGetdefaulteditionnameGetAsync()
        {
            return ApiServicesAppCommonlookupGetdefaulteditionnameGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetDefaultEditionNameOutput>> ApiServicesAppCommonlookupGetdefaulteditionnameGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CommonLookup/GetDefaultEditionName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetDefaultEditionNameOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all communication charts | Only for PP Admin
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfCommunicationChartDto>> ApiServicesAppCommunicationchartGetallGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter)
        {
            return ApiServicesAppCommunicationchartGetallGetAsync(sorting, maxResultCount, skipCount, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all communication charts | Only for PP Admin
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfCommunicationChartDto>> ApiServicesAppCommunicationchartGetallGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CommunicationChart/GetAll?");
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfCommunicationChartDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get communication chart
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<CommunicationChartDto>> ApiServicesAppCommunicationchartGetcommunicationchartGetAsync()
        {
            return ApiServicesAppCommunicationchartGetcommunicationchartGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get communication chart
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<CommunicationChartDto>> ApiServicesAppCommunicationchartGetcommunicationchartGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CommunicationChart/GetCommunicationChart");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<CommunicationChartDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update communication chart
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppCommunicationchartCreateupdatecommunicationchartPostAsync(CommunicationChartDto body)
        {
            return ApiServicesAppCommunicationchartCreateupdatecommunicationchartPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update communication chart
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppCommunicationchartCreateupdatecommunicationchartPostAsync(CommunicationChartDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CommunicationChart/CreateUpdateCommunicationChart");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Communication Chart by Id | Only for PP Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppCommunicationchartDeletewarehouseconnectionDeleteAsync(int? id)
        {
            return ApiServicesAppCommunicationchartDeletewarehouseconnectionDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Communication Chart by Id | Only for PP Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppCommunicationchartDeletewarehouseconnectionDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/CommunicationChart/DeleteWarehouseConnection?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Contract list
        /// </summary>
        /// <param name="shopName">Filter by ShopName</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfContractFileDto>> ApiServicesAppContractsGetGetAsync(string shopName, string contractStatus, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppContractsGetGetAsync(shopName, contractStatus, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Contract list
        /// </summary>
        /// <param name="shopName">Filter by ShopName</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfContractFileDto>> ApiServicesAppContractsGetGetAsync(string shopName, string contractStatus, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/Get?");
            if (shopName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ShopName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shopName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contractStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ContractStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contractStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfContractFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Contract by Contract Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsGetbyidGetAsync(int? id)
        {
            return ApiServicesAppContractsGetbyidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Contract by Contract Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsGetbyidGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/GetById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ContractFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download contract. Contract file will be in Byte Array
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsDownloadGetAsync(int? id)
        {
            return ApiServicesAppContractsDownloadGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download contract. Contract file will be in Byte Array
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsDownloadGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/Download?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ContractFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Contract for Eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsUpdatePutAsync(UpdateContractInput body)
        {
            return ApiServicesAppContractsUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Contract for Eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsUpdatePutAsync(UpdateContractInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ContractFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Contract for Eshop. API only available to Prime Penguin Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsUpdatewithpricePutAsync(UpdateContractWithPriceInput body)
        {
            return ApiServicesAppContractsUpdatewithpricePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Contract for Eshop. API only available to Prime Penguin Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ContractFileDto>> ApiServicesAppContractsUpdatewithpricePutAsync(UpdateContractWithPriceInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/UpdateWithPrice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ContractFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload a new contract for Eshop
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="contractEndDate">Last date of payment</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppContractsUploadPostAsync(int? customerTenantId, int? logisticProviderId, DateTimeOffset? contractEndDate)
        {
            return ApiServicesAppContractsUploadPostAsync(customerTenantId, logisticProviderId, contractEndDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a new contract for Eshop
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="contractEndDate">Last date of payment</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppContractsUploadPostAsync(int? customerTenantId, int? logisticProviderId, DateTimeOffset? contractEndDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/Upload");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (customerTenantId == null)
                        throw new System.ArgumentNullException("customerTenantId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture)), "CustomerTenantId");
                    }

                    if (logisticProviderId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture)), "LogisticProviderId");
                    }

                    if (contractEndDate == null)
                        throw new System.ArgumentNullException("contractEndDate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(contractEndDate, System.Globalization.CultureInfo.InvariantCulture)), "ContractEndDate");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start a new contract for Eshop. Only available to Admin.
        /// </summary>
        /// <param name="costPerOrder">Cost per order charged to LP</param>
        /// <param name="otherCost">Other cost charged to LP for handling the customer orders</param>
        /// <param name="currency">Amount Currency</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="contractEndDate">Last date of payment</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppContractsNewcontractPostAsync(double? costPerOrder, double? otherCost, string currency, int? customerTenantId, int? logisticProviderId, DateTimeOffset? contractEndDate)
        {
            return ApiServicesAppContractsNewcontractPostAsync(costPerOrder, otherCost, currency, customerTenantId, logisticProviderId, contractEndDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a new contract for Eshop. Only available to Admin.
        /// </summary>
        /// <param name="costPerOrder">Cost per order charged to LP</param>
        /// <param name="otherCost">Other cost charged to LP for handling the customer orders</param>
        /// <param name="currency">Amount Currency</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="contractEndDate">Last date of payment</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppContractsNewcontractPostAsync(double? costPerOrder, double? otherCost, string currency, int? customerTenantId, int? logisticProviderId, DateTimeOffset? contractEndDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/NewContract");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (costPerOrder == null)
                        throw new System.ArgumentNullException("costPerOrder");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(costPerOrder, System.Globalization.CultureInfo.InvariantCulture)), "CostPerOrder");
                    }

                    if (otherCost == null)
                        throw new System.ArgumentNullException("otherCost");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(otherCost, System.Globalization.CultureInfo.InvariantCulture)), "OtherCost");
                    }

                    if (currency == null)
                        throw new System.ArgumentNullException("currency");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)), "Currency");
                    }

                    if (customerTenantId == null)
                        throw new System.ArgumentNullException("customerTenantId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture)), "CustomerTenantId");
                    }

                    if (logisticProviderId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture)), "LogisticProviderId");
                    }

                    if (contractEndDate == null)
                        throw new System.ArgumentNullException("contractEndDate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(contractEndDate, System.Globalization.CultureInfo.InvariantCulture)), "ContractEndDate");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace the contract file with a new one. Only available to Admin.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppContractsUpdatecontractfilePostAsync(int? contractId)
        {
            return ApiServicesAppContractsUpdatecontractfilePostAsync(contractId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace the contract file with a new one. Only available to Admin.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppContractsUpdatecontractfilePostAsync(int? contractId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/UpdateContractFile?");
            if (contractId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("contractId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contractId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check if any existing contract available for Eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<bool>> ApiServicesAppContractsCheckifcontractexistGetAsync(int? customerTenantId, int? logisticProviderId)
        {
            return ApiServicesAppContractsCheckifcontractexistGetAsync(customerTenantId, logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if any existing contract available for Eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<bool>> ApiServicesAppContractsCheckifcontractexistGetAsync(int? customerTenantId, int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/CheckIfContractExist?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a contract. Only available to Admin.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppContractsDeletecontractDeleteAsync(int? contractId)
        {
            return ApiServicesAppContractsDeletecontractDeleteAsync(contractId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a contract. Only available to Admin.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppContractsDeletecontractDeleteAsync(int? contractId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Contracts/DeleteContract?");
            if (contractId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("contractId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contractId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppDandomainInstalldandomainPostAsync(InstallDanDomainInput body)
        {
            return ApiServicesAppDandomainInstalldandomainPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppDandomainInstalldandomainPostAsync(InstallDanDomainInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DanDomain/InstallDanDomain");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDandomainhookProcessorderPostAsync(int? salesChannelId, string securityKey, Payload body)
        {
            return ApiServicesAppDandomainhookProcessorderPostAsync(salesChannelId, securityKey, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDandomainhookProcessorderPostAsync(int? salesChannelId, string securityKey, Payload body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DanDomainHook/ProcessOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDandomainhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppDandomainhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDandomainhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DanDomainHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDandomainhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppDandomainhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDandomainhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DanDomainHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<Dashboard>> ApiServicesAppDashboardcustomizationGetuserdashboardGetAsync(string dashboardName, string application)
        {
            return ApiServicesAppDashboardcustomizationGetuserdashboardGetAsync(dashboardName, application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<Dashboard>> ApiServicesAppDashboardcustomizationGetuserdashboardGetAsync(string dashboardName, string application, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/GetUserDashboard?");
            if (dashboardName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DashboardName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dashboardName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (application != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Application") + "=").Append(System.Uri.EscapeDataString(ConvertToString(application, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<Dashboard>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDashboardcustomizationSavepagePostAsync(SavePageInput body)
        {
            return ApiServicesAppDashboardcustomizationSavepagePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDashboardcustomizationSavepagePostAsync(SavePageInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/SavePage");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDashboardcustomizationRenamepagePostAsync(RenamePageInput body)
        {
            return ApiServicesAppDashboardcustomizationRenamepagePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDashboardcustomizationRenamepagePostAsync(RenamePageInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/RenamePage");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<AddNewPageOutput>> ApiServicesAppDashboardcustomizationAddnewpagePostAsync(AddNewPageInput body)
        {
            return ApiServicesAppDashboardcustomizationAddnewpagePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<AddNewPageOutput>> ApiServicesAppDashboardcustomizationAddnewpagePostAsync(AddNewPageInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/AddNewPage");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<AddNewPageOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDashboardcustomizationDeletepageDeleteAsync(string id, string dashboardName, string application)
        {
            return ApiServicesAppDashboardcustomizationDeletepageDeleteAsync(id, dashboardName, application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDashboardcustomizationDeletepageDeleteAsync(string id, string dashboardName, string application, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/DeletePage?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dashboardName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DashboardName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dashboardName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (application != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Application") + "=").Append(System.Uri.EscapeDataString(ConvertToString(application, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<Widget>> ApiServicesAppDashboardcustomizationAddwidgetPostAsync(AddWidgetInput body)
        {
            return ApiServicesAppDashboardcustomizationAddwidgetPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<Widget>> ApiServicesAppDashboardcustomizationAddwidgetPostAsync(AddWidgetInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/AddWidget");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<Widget>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<DashboardOutput>> ApiServicesAppDashboardcustomizationGetdashboarddefinitionGetAsync(string dashboardName, string application)
        {
            return ApiServicesAppDashboardcustomizationGetdashboarddefinitionGetAsync(dashboardName, application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<DashboardOutput>> ApiServicesAppDashboardcustomizationGetdashboarddefinitionGetAsync(string dashboardName, string application, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/GetDashboardDefinition?");
            if (dashboardName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DashboardName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dashboardName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (application != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Application") + "=").Append(System.Uri.EscapeDataString(ConvertToString(application, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<DashboardOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<WidgetOutput>>> ApiServicesAppDashboardcustomizationGetallwidgetdefinitionsGetAsync(string dashboardName, string application)
        {
            return ApiServicesAppDashboardcustomizationGetallwidgetdefinitionsGetAsync(dashboardName, application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<WidgetOutput>>> ApiServicesAppDashboardcustomizationGetallwidgetdefinitionsGetAsync(string dashboardName, string application, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/GetAllWidgetDefinitions?");
            if (dashboardName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DashboardName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dashboardName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (application != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Application") + "=").Append(System.Uri.EscapeDataString(ConvertToString(application, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<WidgetOutput>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<string>> ApiServicesAppDashboardcustomizationGetsettingnameGetAsync(string application)
        {
            return ApiServicesAppDashboardcustomizationGetsettingnameGetAsync(application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<string>> ApiServicesAppDashboardcustomizationGetsettingnameGetAsync(string application, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DashboardCustomization/GetSettingName?");
            if (application != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(System.Uri.EscapeDataString(ConvertToString(application, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<DynamicEntityPropertyDto>> ApiServicesAppDynamicentitypropertyGetGetAsync(int? id)
        {
            return ApiServicesAppDynamicentitypropertyGetGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<DynamicEntityPropertyDto>> ApiServicesAppDynamicentitypropertyGetGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityProperty/Get?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<DynamicEntityPropertyDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyDto>> ApiServicesAppDynamicentitypropertyGetallpropertiesofanentityGetAsync(string entityFullName)
        {
            return ApiServicesAppDynamicentitypropertyGetallpropertiesofanentityGetAsync(entityFullName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyDto>> ApiServicesAppDynamicentitypropertyGetallpropertiesofanentityGetAsync(string entityFullName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityProperty/GetAllPropertiesOfAnEntity?");
            if (entityFullName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EntityFullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityFullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyDto>> ApiServicesAppDynamicentitypropertyGetallGetAsync()
        {
            return ApiServicesAppDynamicentitypropertyGetallGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyDto>> ApiServicesAppDynamicentitypropertyGetallGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityProperty/GetAll");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyAddPostAsync(DynamicEntityPropertyDto body)
        {
            return ApiServicesAppDynamicentitypropertyAddPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyAddPostAsync(DynamicEntityPropertyDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityProperty/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyUpdatePutAsync(DynamicEntityPropertyDto body)
        {
            return ApiServicesAppDynamicentitypropertyUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyUpdatePutAsync(DynamicEntityPropertyDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityProperty/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyDeleteDeleteAsync(int? id)
        {
            return ApiServicesAppDynamicentitypropertyDeleteDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyDeleteDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityProperty/Delete?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfGetAllEntitiesHasDynamicPropertyOutput>> ApiServicesAppDynamicentitypropertyGetallentitieshasdynamicpropertyGetAsync()
        {
            return ApiServicesAppDynamicentitypropertyGetallentitieshasdynamicpropertyGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfGetAllEntitiesHasDynamicPropertyOutput>> ApiServicesAppDynamicentitypropertyGetallentitieshasdynamicpropertyGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityProperty/GetAllEntitiesHasDynamicProperty");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfGetAllEntitiesHasDynamicPropertyOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppDynamicentitypropertydefinitionGetallallowedinputtypenamesGetAsync()
        {
            return ApiServicesAppDynamicentitypropertydefinitionGetallallowedinputtypenamesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppDynamicentitypropertydefinitionGetallallowedinputtypenamesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyDefinition/GetAllAllowedInputTypeNames");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppDynamicentitypropertydefinitionGetallentitiesGetAsync()
        {
            return ApiServicesAppDynamicentitypropertydefinitionGetallentitiesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppDynamicentitypropertydefinitionGetallentitiesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyDefinition/GetAllEntities");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<DynamicEntityPropertyValueDto>> ApiServicesAppDynamicentitypropertyvalueGetGetAsync(int? id)
        {
            return ApiServicesAppDynamicentitypropertyvalueGetGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<DynamicEntityPropertyValueDto>> ApiServicesAppDynamicentitypropertyvalueGetGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/Get?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<DynamicEntityPropertyValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyValueDto>> ApiServicesAppDynamicentitypropertyvalueGetallGetAsync(string entityId, int? propertyId)
        {
            return ApiServicesAppDynamicentitypropertyvalueGetallGetAsync(entityId, propertyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyValueDto>> ApiServicesAppDynamicentitypropertyvalueGetallGetAsync(string entityId, int? propertyId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/GetAll?");
            if (entityId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EntityId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PropertyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfDynamicEntityPropertyValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyvalueAddPostAsync(DynamicEntityPropertyValueDto body)
        {
            return ApiServicesAppDynamicentitypropertyvalueAddPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyvalueAddPostAsync(DynamicEntityPropertyValueDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyvalueUpdatePutAsync(DynamicEntityPropertyValueDto body)
        {
            return ApiServicesAppDynamicentitypropertyvalueUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyvalueUpdatePutAsync(DynamicEntityPropertyValueDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyvalueDeleteDeleteAsync(int? id)
        {
            return ApiServicesAppDynamicentitypropertyvalueDeleteDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyvalueDeleteDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/Delete?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetAllDynamicEntityPropertyValuesOutput>> ApiServicesAppDynamicentitypropertyvalueGetalldynamicentitypropertyvaluesGetAsync(string entityFullName, string entityId)
        {
            return ApiServicesAppDynamicentitypropertyvalueGetalldynamicentitypropertyvaluesGetAsync(entityFullName, entityId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetAllDynamicEntityPropertyValuesOutput>> ApiServicesAppDynamicentitypropertyvalueGetalldynamicentitypropertyvaluesGetAsync(string entityFullName, string entityId, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFullName == null)
                throw new System.ArgumentNullException("entityFullName");

            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/GetAllDynamicEntityPropertyValues?");
            urlBuilder_.Append(System.Uri.EscapeDataString("EntityFullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityFullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("EntityId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetAllDynamicEntityPropertyValuesOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyvalueInsertorupdateallvaluesPostAsync(InsertOrUpdateAllValuesInput body)
        {
            return ApiServicesAppDynamicentitypropertyvalueInsertorupdateallvaluesPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyvalueInsertorupdateallvaluesPostAsync(InsertOrUpdateAllValuesInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/InsertOrUpdateAllValues");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicentitypropertyvalueCleanvaluesPostAsync(CleanValuesInput body)
        {
            return ApiServicesAppDynamicentitypropertyvalueCleanvaluesPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicentitypropertyvalueCleanvaluesPostAsync(CleanValuesInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicEntityPropertyValue/CleanValues");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<DynamicPropertyDto>> ApiServicesAppDynamicpropertyGetGetAsync(int? id)
        {
            return ApiServicesAppDynamicpropertyGetGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<DynamicPropertyDto>> ApiServicesAppDynamicpropertyGetGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicProperty/Get?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<DynamicPropertyDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfDynamicPropertyDto>> ApiServicesAppDynamicpropertyGetallGetAsync()
        {
            return ApiServicesAppDynamicpropertyGetallGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfDynamicPropertyDto>> ApiServicesAppDynamicpropertyGetallGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicProperty/GetAll");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfDynamicPropertyDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicpropertyAddPostAsync(DynamicPropertyDto body)
        {
            return ApiServicesAppDynamicpropertyAddPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicpropertyAddPostAsync(DynamicPropertyDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicProperty/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicpropertyUpdatePutAsync(DynamicPropertyDto body)
        {
            return ApiServicesAppDynamicpropertyUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicpropertyUpdatePutAsync(DynamicPropertyDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicProperty/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicpropertyDeleteDeleteAsync(int? id)
        {
            return ApiServicesAppDynamicpropertyDeleteDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicpropertyDeleteDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicProperty/Delete?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<IInputType>> ApiServicesAppDynamicpropertyFindallowedinputtypePostAsync(string name)
        {
            return ApiServicesAppDynamicpropertyFindallowedinputtypePostAsync(name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<IInputType>> ApiServicesAppDynamicpropertyFindallowedinputtypePostAsync(string name, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicProperty/FindAllowedInputType?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<IInputType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<DynamicPropertyValueDto>> ApiServicesAppDynamicpropertyvalueGetGetAsync(int? id)
        {
            return ApiServicesAppDynamicpropertyvalueGetGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<DynamicPropertyValueDto>> ApiServicesAppDynamicpropertyvalueGetGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicPropertyValue/Get?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<DynamicPropertyValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfDynamicPropertyValueDto>> ApiServicesAppDynamicpropertyvalueGetallvaluesofdynamicpropertyGetAsync(int? id)
        {
            return ApiServicesAppDynamicpropertyvalueGetallvaluesofdynamicpropertyGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfDynamicPropertyValueDto>> ApiServicesAppDynamicpropertyvalueGetallvaluesofdynamicpropertyGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicPropertyValue/GetAllValuesOfDynamicProperty?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfDynamicPropertyValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicpropertyvalueAddPostAsync(DynamicPropertyValueDto body)
        {
            return ApiServicesAppDynamicpropertyvalueAddPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicpropertyvalueAddPostAsync(DynamicPropertyValueDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicPropertyValue/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicpropertyvalueUpdatePutAsync(DynamicPropertyValueDto body)
        {
            return ApiServicesAppDynamicpropertyvalueUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicpropertyvalueUpdatePutAsync(DynamicPropertyValueDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicPropertyValue/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppDynamicpropertyvalueDeleteDeleteAsync(int? id)
        {
            return ApiServicesAppDynamicpropertyvalueDeleteDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppDynamicpropertyvalueDeleteDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/DynamicPropertyValue/Delete?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfEditionListDto>> ApiServicesAppEditionGeteditionsGetAsync()
        {
            return ApiServicesAppEditionGeteditionsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfEditionListDto>> ApiServicesAppEditionGeteditionsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/GetEditions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfEditionListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetEditionEditOutput>> ApiServicesAppEditionGeteditionforeditGetAsync(int? id)
        {
            return ApiServicesAppEditionGeteditionforeditGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetEditionEditOutput>> ApiServicesAppEditionGeteditionforeditGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/GetEditionForEdit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetEditionEditOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppEditionCreateeditionPostAsync(CreateEditionDto body)
        {
            return ApiServicesAppEditionCreateeditionPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppEditionCreateeditionPostAsync(CreateEditionDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/CreateEdition");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppEditionUpdateeditionPutAsync(UpdateEditionDto body)
        {
            return ApiServicesAppEditionUpdateeditionPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppEditionUpdateeditionPutAsync(UpdateEditionDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/UpdateEdition");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppEditionDeleteeditionDeleteAsync(int? id)
        {
            return ApiServicesAppEditionDeleteeditionDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppEditionDeleteeditionDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/DeleteEdition?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppEditionMovetenantstoanothereditionPostAsync(MoveTenantsToAnotherEditionDto body)
        {
            return ApiServicesAppEditionMovetenantstoanothereditionPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppEditionMovetenantstoanothereditionPostAsync(MoveTenantsToAnotherEditionDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/MoveTenantsToAnotherEdition");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<SubscribableEditionComboboxItemDto>>> ApiServicesAppEditionGeteditioncomboboxitemsGetAsync(int? selectedEditionId, bool? addAllItem, bool? onlyFreeItems)
        {
            return ApiServicesAppEditionGeteditioncomboboxitemsGetAsync(selectedEditionId, addAllItem, onlyFreeItems, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<SubscribableEditionComboboxItemDto>>> ApiServicesAppEditionGeteditioncomboboxitemsGetAsync(int? selectedEditionId, bool? addAllItem, bool? onlyFreeItems, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/GetEditionComboboxItems?");
            if (selectedEditionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("selectedEditionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(selectedEditionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (addAllItem != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("addAllItem") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addAllItem, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyFreeItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlyFreeItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyFreeItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<SubscribableEditionComboboxItemDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppEditionGettenantcountGetAsync(int? editionId)
        {
            return ApiServicesAppEditionGettenantcountGetAsync(editionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppEditionGettenantcountGetAsync(int? editionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Edition/GetTenantCount?");
            if (editionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("editionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(editionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets list of E-shops
        /// </summary>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfEshopInformationDto>> ApiServicesAppEshopmanagementGeteshopsGetAsync(bool? hasRealSalesChannel, bool? showDeletedRealSalesChannel, string salesChannelName, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppEshopmanagementGeteshopsGetAsync(hasRealSalesChannel, showDeletedRealSalesChannel, salesChannelName, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets list of E-shops
        /// </summary>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfEshopInformationDto>> ApiServicesAppEshopmanagementGeteshopsGetAsync(bool? hasRealSalesChannel, bool? showDeletedRealSalesChannel, string salesChannelName, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/EshopManagement/GetEshops?");
            if (hasRealSalesChannel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("HasRealSalesChannel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasRealSalesChannel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showDeletedRealSalesChannel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ShowDeletedRealSalesChannel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showDeletedRealSalesChannel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfEshopInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppEshopmanagementSyncintegrationPostAsync(int? salesChannelId, int? tenantId, int? daysToSync)
        {
            return ApiServicesAppEshopmanagementSyncintegrationPostAsync(salesChannelId, tenantId, daysToSync, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppEshopmanagementSyncintegrationPostAsync(int? salesChannelId, int? tenantId, int? daysToSync, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/EshopManagement/SyncIntegration?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (daysToSync != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("daysToSync") + "=").Append(System.Uri.EscapeDataString(ConvertToString(daysToSync, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppEshopmanagementSyncordersPostAsync(IEnumerable<long> body)
        {
            return ApiServicesAppEshopmanagementSyncordersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppEshopmanagementSyncordersPostAsync(IEnumerable<long> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/EshopManagement/SyncOrders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All orders from all eshops
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="externalOrderIdFilter">Filter order by external order id</param>
        /// <param name="customerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="excludeCustomerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop) to exclude in result</param>
        /// <param name="warehouseStatus">Filter by Warehouse Order Status | Sorting Parameter</param>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="onlyPaidOrders">Filter only paid orders</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfWarehousePlusSalesChannelOrderDto>> ApiServicesAppEshopmanagementGeteshopordersGetAsync(int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string status, string filter, string externalOrderIdFilter, string customerTenantIds, string excludeCustomerTenantIds, string warehouseStatus, string salesChannelName, bool? onlyPaidOrders, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppEshopmanagementGeteshopordersGetAsync(salesChannelId, fromDate, toDate, status, filter, externalOrderIdFilter, customerTenantIds, excludeCustomerTenantIds, warehouseStatus, salesChannelName, onlyPaidOrders, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All orders from all eshops
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="externalOrderIdFilter">Filter order by external order id</param>
        /// <param name="customerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="excludeCustomerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop) to exclude in result</param>
        /// <param name="warehouseStatus">Filter by Warehouse Order Status | Sorting Parameter</param>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="onlyPaidOrders">Filter only paid orders</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfWarehousePlusSalesChannelOrderDto>> ApiServicesAppEshopmanagementGeteshopordersGetAsync(int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string status, string filter, string externalOrderIdFilter, string customerTenantIds, string excludeCustomerTenantIds, string warehouseStatus, string salesChannelName, bool? onlyPaidOrders, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/EshopManagement/GetEshopOrders?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (externalOrderIdFilter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExternalOrderIdFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(externalOrderIdFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantIds != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeCustomerTenantIds != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExcludeCustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeCustomerTenantIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (warehouseStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("WarehouseStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouseStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyPaidOrders != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyPaidOrders") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyPaidOrders, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfWarehousePlusSalesChannelOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order List as pdf
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="externalOrderIdFilter">Filter order by external order id</param>
        /// <param name="customerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="excludeCustomerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop) to exclude in result</param>
        /// <param name="warehouseStatus">Filter by Warehouse Order Status | Sorting Parameter</param>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="onlyPaidOrders">Filter only paid orders</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppEshopmanagementGeteshoporderstoexcelGetAsync(int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string status, string filter, string externalOrderIdFilter, string customerTenantIds, string excludeCustomerTenantIds, string warehouseStatus, string salesChannelName, bool? onlyPaidOrders, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppEshopmanagementGeteshoporderstoexcelGetAsync(salesChannelId, fromDate, toDate, status, filter, externalOrderIdFilter, customerTenantIds, excludeCustomerTenantIds, warehouseStatus, salesChannelName, onlyPaidOrders, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order List as pdf
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="externalOrderIdFilter">Filter order by external order id</param>
        /// <param name="customerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="excludeCustomerTenantIds">Tenant Ids of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop) to exclude in result</param>
        /// <param name="warehouseStatus">Filter by Warehouse Order Status | Sorting Parameter</param>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="onlyPaidOrders">Filter only paid orders</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppEshopmanagementGeteshoporderstoexcelGetAsync(int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string status, string filter, string externalOrderIdFilter, string customerTenantIds, string excludeCustomerTenantIds, string warehouseStatus, string salesChannelName, bool? onlyPaidOrders, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/EshopManagement/GetEshopOrdersToExcel?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (externalOrderIdFilter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExternalOrderIdFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(externalOrderIdFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantIds != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeCustomerTenantIds != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExcludeCustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeCustomerTenantIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (warehouseStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("WarehouseStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(warehouseStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyPaidOrders != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyPaidOrders") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyPaidOrders, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Products from all eshops
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="sku">Filter by Variant Sku</param>
        /// <param name="externalVariantId">Filter by Variant External Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="storeName">Filter by Sales channel Name</param>
        /// <param name="salesChannelProductId">Filter by Sales channel Product Id</param>
        /// <param name="salesChannelProductVariantId">Filter by Sales channel Product Variant</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfPlusSalesChannelProductDto>> ApiServicesAppEshopmanagementGeteshopproductsGetAsync(int? salesChannelId, string sku, string externalVariantId, int? customerTenantId, string salesChannelName, string storeName, int? salesChannelProductId, int? salesChannelProductVariantId, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppEshopmanagementGeteshopproductsGetAsync(salesChannelId, sku, externalVariantId, customerTenantId, salesChannelName, storeName, salesChannelProductId, salesChannelProductVariantId, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Products from all eshops
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="sku">Filter by Variant Sku</param>
        /// <param name="externalVariantId">Filter by Variant External Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelName">Filter by Sales channel Name</param>
        /// <param name="storeName">Filter by Sales channel Name</param>
        /// <param name="salesChannelProductId">Filter by Sales channel Product Id</param>
        /// <param name="salesChannelProductVariantId">Filter by Sales channel Product Variant</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfPlusSalesChannelProductDto>> ApiServicesAppEshopmanagementGeteshopproductsGetAsync(int? salesChannelId, string sku, string externalVariantId, int? customerTenantId, string salesChannelName, string storeName, int? salesChannelProductId, int? salesChannelProductVariantId, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/EshopManagement/GetEshopProducts?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (externalVariantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExternalVariantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(externalVariantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (storeName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StoreName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(storeName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelProductId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelProductId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelProductVariantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelProductVariantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelProductVariantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfPlusSalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sync Shop Product
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppEshopmanagementSyncproductPostAsync(string productId, int? salesChannelId)
        {
            return ApiServicesAppEshopmanagementSyncproductPostAsync(productId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sync Shop Product
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppEshopmanagementSyncproductPostAsync(string productId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/EshopManagement/SyncProduct?");
            if (productId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FriendDto>> ApiServicesAppFriendshipCreatefriendshiprequestPostAsync(CreateFriendshipRequestInput body)
        {
            return ApiServicesAppFriendshipCreatefriendshiprequestPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FriendDto>> ApiServicesAppFriendshipCreatefriendshiprequestPostAsync(CreateFriendshipRequestInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Friendship/CreateFriendshipRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FriendDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FriendDto>> ApiServicesAppFriendshipCreatefriendshiprequestbyusernamePostAsync(CreateFriendshipRequestByUserNameInput body)
        {
            return ApiServicesAppFriendshipCreatefriendshiprequestbyusernamePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FriendDto>> ApiServicesAppFriendshipCreatefriendshiprequestbyusernamePostAsync(CreateFriendshipRequestByUserNameInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Friendship/CreateFriendshipRequestByUserName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FriendDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppFriendshipBlockuserPostAsync(BlockUserInput body)
        {
            return ApiServicesAppFriendshipBlockuserPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppFriendshipBlockuserPostAsync(BlockUserInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Friendship/BlockUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppFriendshipUnblockuserPostAsync(UnblockUserInput body)
        {
            return ApiServicesAppFriendshipUnblockuserPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppFriendshipUnblockuserPostAsync(UnblockUserInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Friendship/UnblockUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppFriendshipAcceptfriendshiprequestPostAsync(AcceptFriendshipRequestInput body)
        {
            return ApiServicesAppFriendshipAcceptfriendshiprequestPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppFriendshipAcceptfriendshiprequestPostAsync(AcceptFriendshipRequestInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Friendship/AcceptFriendshipRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<HostDashboardData>> ApiServicesAppHostdashboardGetdashboarddataGetAsync(bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate)
        {
            return ApiServicesAppHostdashboardGetdashboarddataGetAsync(processedOrdersOnly, chargeableOrdersOnly, startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<HostDashboardData>> ApiServicesAppHostdashboardGetdashboarddataGetAsync(bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostDashboard/GetDashboardData?");
            if (processedOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProcessedOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processedOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chargeableOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChargeableOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chargeableOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<HostDashboardData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<TenantLocationDto>>> ApiServicesAppHostdashboardGetalltenantlocationsGetAsync(bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate)
        {
            return ApiServicesAppHostdashboardGetalltenantlocationsGetAsync(processedOrdersOnly, chargeableOrdersOnly, startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<TenantLocationDto>>> ApiServicesAppHostdashboardGetalltenantlocationsGetAsync(bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostDashboard/GetAllTenantLocations?");
            if (processedOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProcessedOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processedOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chargeableOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChargeableOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chargeableOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<TenantLocationDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<SalesChannelOrderOverviewDto>>> ApiServicesAppHostdashboardGetsaleschannelorderoverviewGetAsync(int? logisticProviderId, bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate)
        {
            return ApiServicesAppHostdashboardGetsaleschannelorderoverviewGetAsync(logisticProviderId, processedOrdersOnly, chargeableOrdersOnly, startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<SalesChannelOrderOverviewDto>>> ApiServicesAppHostdashboardGetsaleschannelorderoverviewGetAsync(int? logisticProviderId, bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostDashboard/GetSalesChannelOrderOverview?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processedOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProcessedOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processedOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chargeableOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChargeableOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chargeableOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<SalesChannelOrderOverviewDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get number of orders created each day filtered by month
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>> ApiServicesAppHostdashboardGetordercountperdaybydaterangeGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate)
        {
            return ApiServicesAppHostdashboardGetordercountperdaybydaterangeGetAsync(logisticProviderId, customerTenantId, salesChannelId, fromDate, toDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get number of orders created each day filtered by month
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>> ApiServicesAppHostdashboardGetordercountperdaybydaterangeGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostDashboard/GetOrderCountPerDayByDateRange?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<HostSettingsEditDto>> ApiServicesAppHostsettingsGetallsettingsGetAsync()
        {
            return ApiServicesAppHostsettingsGetallsettingsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<HostSettingsEditDto>> ApiServicesAppHostsettingsGetallsettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostSettings/GetAllSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<HostSettingsEditDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppHostsettingsUpdateallsettingsPutAsync(HostSettingsEditDto body)
        {
            return ApiServicesAppHostsettingsUpdateallsettingsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppHostsettingsUpdateallsettingsPutAsync(HostSettingsEditDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostSettings/UpdateAllSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppHostsettingsSendtestemailPostAsync(SendTestEmailInput body)
        {
            return ApiServicesAppHostsettingsSendtestemailPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppHostsettingsSendtestemailPostAsync(SendTestEmailInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostSettings/SendTestEmail");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ExternalLoginSettingsDto>> ApiServicesAppHostsettingsGetenabledsocialloginsettingsGetAsync()
        {
            return ApiServicesAppHostsettingsGetenabledsocialloginsettingsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ExternalLoginSettingsDto>> ApiServicesAppHostsettingsGetenabledsocialloginsettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/HostSettings/GetEnabledSocialLoginSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ExternalLoginSettingsDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppInstallSetupPostAsync(InstallDto body)
        {
            return ApiServicesAppInstallSetupPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppInstallSetupPostAsync(InstallDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Install/Setup");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<AppSettingsJsonDto>> ApiServicesAppInstallGetappsettingsjsonGetAsync()
        {
            return ApiServicesAppInstallGetappsettingsjsonGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<AppSettingsJsonDto>> ApiServicesAppInstallGetappsettingsjsonGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Install/GetAppSettingsJson");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<AppSettingsJsonDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<CheckDatabaseOutput>> ApiServicesAppInstallCheckdatabasePostAsync()
        {
            return ApiServicesAppInstallCheckdatabasePostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<CheckDatabaseOutput>> ApiServicesAppInstallCheckdatabasePostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Install/CheckDatabase");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<CheckDatabaseOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get date time of last sync
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfIntegratorSyncDto>> ApiServicesAppIntegratorsLasttimeofsyncGetAsync()
        {
            return ApiServicesAppIntegratorsLasttimeofsyncGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get date time of last sync
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfIntegratorSyncDto>> ApiServicesAppIntegratorsLasttimeofsyncGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Integrators/LastTimeOfSync");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfIntegratorSyncDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set date time of last sync
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorsLasttimeofsyncPostAsync(IntegratorSyncDto body)
        {
            return ApiServicesAppIntegratorsLasttimeofsyncPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set date time of last sync
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorsLasttimeofsyncPostAsync(IntegratorSyncDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Integrators/LastTimeOfSync");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of connected Logistics Providers for integrator
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfLogisticProvidersDto>> ApiServicesAppIntegratorsConnectedlogisticprovidersGetAsync()
        {
            return ApiServicesAppIntegratorsConnectedlogisticprovidersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of connected Logistics Providers for integrator
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfLogisticProvidersDto>> ApiServicesAppIntegratorsConnectedlogisticprovidersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Integrators/ConnectedLogisticProviders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfLogisticProvidersDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of connected Logistics Providers and connected customers for integrator
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfIntegratorLogisticProviderDto>> ApiServicesAppIntegratorsGetallconnectedlogisticprovidersandcustomersGetAsync()
        {
            return ApiServicesAppIntegratorsGetallconnectedlogisticprovidersandcustomersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of connected Logistics Providers and connected customers for integrator
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfIntegratorLogisticProviderDto>> ApiServicesAppIntegratorsGetallconnectedlogisticprovidersandcustomersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Integrators/GetAllConnectedLogisticProvidersAndCustomers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfIntegratorLogisticProviderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get processed entities
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="errorFilter">Filter by Error Message</param>
        /// <param name="showOnlyFailedRequests">Filter only failed requests</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfIntegratorProcessedEntityDto>> ApiServicesAppIntegratorsProcessedentitiesGetAsync(int? logisticProviderId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string errorFilter, bool? showOnlyFailedRequests, ProcessOperationType? processOperationType, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppIntegratorsProcessedentitiesGetAsync(logisticProviderId, fromDate, toDate, errorFilter, showOnlyFailedRequests, processOperationType, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get processed entities
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="errorFilter">Filter by Error Message</param>
        /// <param name="showOnlyFailedRequests">Filter only failed requests</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfIntegratorProcessedEntityDto>> ApiServicesAppIntegratorsProcessedentitiesGetAsync(int? logisticProviderId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string errorFilter, bool? showOnlyFailedRequests, ProcessOperationType? processOperationType, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Integrators/ProcessedEntities?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (errorFilter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ErrorFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(errorFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showOnlyFailedRequests != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ShowOnlyFailedRequests") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showOnlyFailedRequests, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processOperationType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProcessOperationType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processOperationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfIntegratorProcessedEntityDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all shipment mappings by LogisticProviderId, Optional customer Tenant Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfShipmentMappingDto>> ApiServicesAppIntegratorsGetallshipmentmappingsbylogisticprovideridGetAsync(int? logisticProviderId, int? customerTenantId)
        {
            return ApiServicesAppIntegratorsGetallshipmentmappingsbylogisticprovideridGetAsync(logisticProviderId, customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all shipment mappings by LogisticProviderId, Optional customer Tenant Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfShipmentMappingDto>> ApiServicesAppIntegratorsGetallshipmentmappingsbylogisticprovideridGetAsync(int? logisticProviderId, int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Integrators/GetAllShipmentMappingsByLogisticProviderId?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfShipmentMappingDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all Integrator orders
        /// </summary>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="onlyPaidOrders">Return only paid orders</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderId">Array of sales channel Order id</param>
        /// <param name="externalOrderId">Array of external order id</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfIntegratorOrderDto>> ApiServicesAppIntegratorordersOrdersGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, string status, bool? onlyPaidOrders, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderId, IEnumerable<string> externalOrderId, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppIntegratorordersOrdersGetAsync(fromImportedDate, toImportedDate, fromModifiedDate, toModifiedDate, logisticProviderIds, customerTenantIds, status, onlyPaidOrders, mergeBundleLineItems, salesChannelOrderId, externalOrderId, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all Integrator orders
        /// </summary>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="onlyPaidOrders">Return only paid orders</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderId">Array of sales channel Order id</param>
        /// <param name="externalOrderId">Array of external order id</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfIntegratorOrderDto>> ApiServicesAppIntegratorordersOrdersGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, string status, bool? onlyPaidOrders, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderId, IEnumerable<string> externalOrderId, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorOrders/Orders?");
            if (fromImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromImportedDate") + "=").Append(System.Uri.EscapeDataString(fromImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToImportedDate") + "=").Append(System.Uri.EscapeDataString(toImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromModifiedDate") + "=").Append(System.Uri.EscapeDataString(fromModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToModifiedDate") + "=").Append(System.Uri.EscapeDataString(toModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderIds != null)
            {
                foreach (var item_ in logisticProviderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerTenantIds != null)
            {
                foreach (var item_ in customerTenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyPaidOrders != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyPaidOrders") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyPaidOrders, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelOrderId != null)
            {
                foreach (var item_ in salesChannelOrderId) { urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalOrderId != null)
            {
                foreach (var item_ in externalOrderId) { urlBuilder_.Append(System.Uri.EscapeDataString("ExternalOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfIntegratorOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all Integrator orders
        /// </summary>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="onlyPaidOrders">Return only paid orders</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderId">Array of sales channel Order id</param>
        /// <param name="externalOrderId">Array of external order id</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfMinimalIntegratorOrderDto>> ApiServicesAppIntegratorordersMinimalordersGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, string status, bool? onlyPaidOrders, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderId, IEnumerable<string> externalOrderId, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppIntegratorordersMinimalordersGetAsync(fromImportedDate, toImportedDate, fromModifiedDate, toModifiedDate, logisticProviderIds, customerTenantIds, status, onlyPaidOrders, mergeBundleLineItems, salesChannelOrderId, externalOrderId, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all Integrator orders
        /// </summary>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="onlyPaidOrders">Return only paid orders</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderId">Array of sales channel Order id</param>
        /// <param name="externalOrderId">Array of external order id</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfMinimalIntegratorOrderDto>> ApiServicesAppIntegratorordersMinimalordersGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, string status, bool? onlyPaidOrders, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderId, IEnumerable<string> externalOrderId, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorOrders/MinimalOrders?");
            if (fromImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromImportedDate") + "=").Append(System.Uri.EscapeDataString(fromImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToImportedDate") + "=").Append(System.Uri.EscapeDataString(toImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromModifiedDate") + "=").Append(System.Uri.EscapeDataString(fromModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToModifiedDate") + "=").Append(System.Uri.EscapeDataString(toModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderIds != null)
            {
                foreach (var item_ in logisticProviderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerTenantIds != null)
            {
                foreach (var item_ in customerTenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyPaidOrders != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyPaidOrders") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyPaidOrders, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelOrderId != null)
            {
                foreach (var item_ in salesChannelOrderId) { urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalOrderId != null)
            {
                foreach (var item_ in externalOrderId) { urlBuilder_.Append(System.Uri.EscapeDataString("ExternalOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfMinimalIntegratorOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Count all Integrator orders
        /// </summary>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="onlyPaidOrders">Return only paid orders</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderId">Array of sales channel Order id</param>
        /// <param name="externalOrderId">Array of external order id</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppIntegratorordersCountGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, string status, bool? onlyPaidOrders, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderId, IEnumerable<string> externalOrderId, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppIntegratorordersCountGetAsync(fromImportedDate, toImportedDate, fromModifiedDate, toModifiedDate, logisticProviderIds, customerTenantIds, status, onlyPaidOrders, mergeBundleLineItems, salesChannelOrderId, externalOrderId, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Count all Integrator orders
        /// </summary>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="onlyPaidOrders">Return only paid orders</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderId">Array of sales channel Order id</param>
        /// <param name="externalOrderId">Array of external order id</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppIntegratorordersCountGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, string status, bool? onlyPaidOrders, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderId, IEnumerable<string> externalOrderId, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorOrders/Count?");
            if (fromImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromImportedDate") + "=").Append(System.Uri.EscapeDataString(fromImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToImportedDate") + "=").Append(System.Uri.EscapeDataString(toImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromModifiedDate") + "=").Append(System.Uri.EscapeDataString(fromModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToModifiedDate") + "=").Append(System.Uri.EscapeDataString(toModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderIds != null)
            {
                foreach (var item_ in logisticProviderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerTenantIds != null)
            {
                foreach (var item_ in customerTenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyPaidOrders != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyPaidOrders") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyPaidOrders, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelOrderId != null)
            {
                foreach (var item_ in salesChannelOrderId) { urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalOrderId != null)
            {
                foreach (var item_ in externalOrderId) { urlBuilder_.Append(System.Uri.EscapeDataString("ExternalOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Process Orders
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorordersProcessintegratorordersPostAsync(IEnumerable<IntegratorProcessOrderInput> body)
        {
            return ApiServicesAppIntegratorordersProcessintegratorordersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Process Orders
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorordersProcessintegratorordersPostAsync(IEnumerable<IntegratorProcessOrderInput> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorOrders/ProcessIntegratorOrders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retry failed processed order
        /// </summary>
        /// <param name="processedOrderSystemId">System Id of Processed Order</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorordersRetryprocessedorderPostAsync(int? processedOrderSystemId)
        {
            return ApiServicesAppIntegratorordersRetryprocessedorderPostAsync(processedOrderSystemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retry failed processed order
        /// </summary>
        /// <param name="processedOrderSystemId">System Id of Processed Order</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorordersRetryprocessedorderPostAsync(int? processedOrderSystemId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorOrders/RetryProcessedOrder?");
            if (processedOrderSystemId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processedOrderSystemId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processedOrderSystemId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Integrator Products
        /// </summary>
        /// <param name="fromImportedDate">Filter products by (From) date time when product was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter products by (To) date time when product was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter products by (From) date time when product was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter products by (To) date time when product was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfIntegratorProductDto>> ApiServicesAppIntegratorproductsProductsGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, bool? mergeBundleProducts, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppIntegratorproductsProductsGetAsync(fromImportedDate, toImportedDate, fromModifiedDate, toModifiedDate, logisticProviderIds, customerTenantIds, mergeBundleProducts, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Integrator Products
        /// </summary>
        /// <param name="fromImportedDate">Filter products by (From) date time when product was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter products by (To) date time when product was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter products by (From) date time when product was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter products by (To) date time when product was modified in Prime Penguin</param>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfIntegratorProductDto>> ApiServicesAppIntegratorproductsProductsGetAsync(DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, bool? mergeBundleProducts, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/Products?");
            if (fromImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromImportedDate") + "=").Append(System.Uri.EscapeDataString(fromImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToImportedDate") + "=").Append(System.Uri.EscapeDataString(toImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromModifiedDate") + "=").Append(System.Uri.EscapeDataString(fromModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToModifiedDate") + "=").Append(System.Uri.EscapeDataString(toModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderIds != null)
            {
                foreach (var item_ in logisticProviderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerTenantIds != null)
            {
                foreach (var item_ in customerTenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (mergeBundleProducts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProducts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProducts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfIntegratorProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get count of All Integrator Products
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppIntegratorproductsCountGetAsync(IEnumerable<int> logisticProviderIds)
        {
            return ApiServicesAppIntegratorproductsCountGetAsync(logisticProviderIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get count of All Integrator Products
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppIntegratorproductsCountGetAsync(IEnumerable<int> logisticProviderIds, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/Count?");
            if (logisticProviderIds != null)
            {
                foreach (var item_ in logisticProviderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get information of products which are assigned to LP
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<IntegratorAssignedProductVariantDto>>> ApiServicesAppIntegratorproductsGetallassignedproductvariantinfoGetAsync(IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds)
        {
            return ApiServicesAppIntegratorproductsGetallassignedproductvariantinfoGetAsync(logisticProviderIds, customerTenantIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get information of products which are assigned to LP
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<IntegratorAssignedProductVariantDto>>> ApiServicesAppIntegratorproductsGetallassignedproductvariantinfoGetAsync(IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/GetAllAssignedProductVariantInfo?");
            if (logisticProviderIds != null)
            {
                foreach (var item_ in logisticProviderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerTenantIds != null)
            {
                foreach (var item_ in customerTenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<IntegratorAssignedProductVariantDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get information of products variants which are assigned to LP
        /// </summary>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="salesChannelProductVariantId">Array of sales channel product variant id</param>
        /// <param name="externalProductVariantId">Array of external product variant id</param>
        /// <param name="sku">Array of product variant SKU</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<ExtendedIntegratorProductVariantDto>>> ApiServicesAppIntegratorproductsGetproductvariantsbyfilterGetAsync(IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, IEnumerable<long> salesChannelProductVariantId, IEnumerable<string> externalProductVariantId, IEnumerable<string> sku)
        {
            return ApiServicesAppIntegratorproductsGetproductvariantsbyfilterGetAsync(logisticProviderIds, customerTenantIds, salesChannelProductVariantId, externalProductVariantId, sku, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get information of products variants which are assigned to LP
        /// </summary>
        /// <param name="logisticProviderIds">Array of Logistic Provider Ids</param>
        /// <param name="customerTenantIds">Array of Customer Tenant Ids</param>
        /// <param name="salesChannelProductVariantId">Array of sales channel product variant id</param>
        /// <param name="externalProductVariantId">Array of external product variant id</param>
        /// <param name="sku">Array of product variant SKU</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<ExtendedIntegratorProductVariantDto>>> ApiServicesAppIntegratorproductsGetproductvariantsbyfilterGetAsync(IEnumerable<int> logisticProviderIds, IEnumerable<int> customerTenantIds, IEnumerable<long> salesChannelProductVariantId, IEnumerable<string> externalProductVariantId, IEnumerable<string> sku, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/GetProductVariantsByFilter?");
            if (logisticProviderIds != null)
            {
                foreach (var item_ in logisticProviderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerTenantIds != null)
            {
                foreach (var item_ in customerTenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (salesChannelProductVariantId != null)
            {
                foreach (var item_ in salesChannelProductVariantId) { urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelProductVariantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalProductVariantId != null)
            {
                foreach (var item_ in externalProductVariantId) { urlBuilder_.Append(System.Uri.EscapeDataString("ExternalProductVariantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sku != null)
            {
                foreach (var item_ in sku) { urlBuilder_.Append(System.Uri.EscapeDataString("Sku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<ExtendedIntegratorProductVariantDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Process Inventory changes
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorproductsProcessintegrationinventoryPostAsync(IEnumerable<IntegratorProcessInventoryInput> body)
        {
            return ApiServicesAppIntegratorproductsProcessintegrationinventoryPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Process Inventory changes
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorproductsProcessintegrationinventoryPostAsync(IEnumerable<IntegratorProcessInventoryInput> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/ProcessIntegrationInventory");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retry failed processed Inventory
        /// </summary>
        /// <param name="processedInventorySystemId">System Id of Processed Inventory</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorproductsRetryprocessedinventoryPostAsync(int? processedInventorySystemId)
        {
            return ApiServicesAppIntegratorproductsRetryprocessedinventoryPostAsync(processedInventorySystemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retry failed processed Inventory
        /// </summary>
        /// <param name="processedInventorySystemId">System Id of Processed Inventory</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorproductsRetryprocessedinventoryPostAsync(int? processedInventorySystemId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/RetryProcessedInventory?");
            if (processedInventorySystemId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processedInventorySystemId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processedInventorySystemId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Process inventory location changes
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorproductsProcessintegrationinventorylocationPostAsync(IEnumerable<IntegratorProcessInventoryLocationInput> body)
        {
            return ApiServicesAppIntegratorproductsProcessintegrationinventorylocationPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Process inventory location changes
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorproductsProcessintegrationinventorylocationPostAsync(IEnumerable<IntegratorProcessInventoryLocationInput> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/ProcessIntegrationInventoryLocation");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retry failed processed Inventory Location
        /// </summary>
        /// <param name="processedInventoryLocationSystemId">System Id of Processed Inventory Location</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorproductsRetryprocessedinventorylocationPostAsync(int? processedInventoryLocationSystemId)
        {
            return ApiServicesAppIntegratorproductsRetryprocessedinventorylocationPostAsync(processedInventoryLocationSystemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retry failed processed Inventory Location
        /// </summary>
        /// <param name="processedInventoryLocationSystemId">System Id of Processed Inventory Location</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorproductsRetryprocessedinventorylocationPostAsync(int? processedInventoryLocationSystemId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorProducts/RetryProcessedInventoryLocation?");
            if (processedInventoryLocationSystemId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processedInventoryLocationSystemId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processedInventoryLocationSystemId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Or Update Purchase Order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorpurchaseordersProcesspurchaseordersPostAsync(IEnumerable<IntegratorProcessPurchaseOrrderDto> body)
        {
            return ApiServicesAppIntegratorpurchaseordersProcesspurchaseordersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Or Update Purchase Order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorpurchaseordersProcesspurchaseordersPostAsync(IEnumerable<IntegratorProcessPurchaseOrrderDto> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorPurchaseOrders/ProcessPurchaseOrders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retry failed processed purchase order
        /// </summary>
        /// <param name="purchaseOrderSystemId">System Id of Processed Purchase Order</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppIntegratorpurchaseordersRetryprocessedpurchaseorderPostAsync(int? purchaseOrderSystemId)
        {
            return ApiServicesAppIntegratorpurchaseordersRetryprocessedpurchaseorderPostAsync(purchaseOrderSystemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retry failed processed purchase order
        /// </summary>
        /// <param name="purchaseOrderSystemId">System Id of Processed Purchase Order</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppIntegratorpurchaseordersRetryprocessedpurchaseorderPostAsync(int? purchaseOrderSystemId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/IntegratorPurchaseOrders/RetryProcessedPurchaseOrder?");
            if (purchaseOrderSystemId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purchaseOrderSystemId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purchaseOrderSystemId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory List
        /// </summary>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="location">Filter by Location name | Sorting Parameter</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfInventoryLocationItemDto>> ApiServicesAppInventorylocationreportGetinventorylocationlistGetAsync(string variantTitleOrSku, int? salesChannelId, string location, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppInventorylocationreportGetinventorylocationlistGetAsync(variantTitleOrSku, salesChannelId, location, quantityLessThan, quantityMoreThan, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory List
        /// </summary>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="location">Filter by Location name | Sorting Parameter</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfInventoryLocationItemDto>> ApiServicesAppInventorylocationreportGetinventorylocationlistGetAsync(string variantTitleOrSku, int? salesChannelId, string location, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryLocationReport/GetInventoryLocationList?");
            if (variantTitleOrSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VariantTitleOrSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variantTitleOrSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (location != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Location") + "=").Append(System.Uri.EscapeDataString(ConvertToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityLessThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityLessThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityMoreThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityMoreThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityMoreThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfInventoryLocationItemDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory List as excel
        /// </summary>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="location">Filter by Location name | Sorting Parameter</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventorylocationreportGetinventorylocationlisttoexcelGetAsync(string variantTitleOrSku, int? salesChannelId, string location, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppInventorylocationreportGetinventorylocationlisttoexcelGetAsync(variantTitleOrSku, salesChannelId, location, quantityLessThan, quantityMoreThan, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory List as excel
        /// </summary>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="location">Filter by Location name | Sorting Parameter</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventorylocationreportGetinventorylocationlisttoexcelGetAsync(string variantTitleOrSku, int? salesChannelId, string location, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryLocationReport/GetInventoryLocationListToExcel?");
            if (variantTitleOrSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VariantTitleOrSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variantTitleOrSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (location != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Location") + "=").Append(System.Uri.EscapeDataString(ConvertToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityLessThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityLessThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityMoreThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityMoreThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityMoreThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory List as pdf
        /// </summary>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="location">Filter by Location name | Sorting Parameter</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventorylocationreportGetinventorylocationlisttopdfGetAsync(string variantTitleOrSku, int? salesChannelId, string location, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppInventorylocationreportGetinventorylocationlisttopdfGetAsync(variantTitleOrSku, salesChannelId, location, quantityLessThan, quantityMoreThan, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory List as pdf
        /// </summary>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="location">Filter by Location name | Sorting Parameter</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventorylocationreportGetinventorylocationlisttopdfGetAsync(string variantTitleOrSku, int? salesChannelId, string location, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryLocationReport/GetInventoryLocationListToPdf?");
            if (variantTitleOrSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VariantTitleOrSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variantTitleOrSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (location != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Location") + "=").Append(System.Uri.EscapeDataString(ConvertToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityLessThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityLessThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityMoreThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityMoreThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityMoreThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory List
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="productTitle">Filter by product title | Sorting Parameter</param>
        /// <param name="supplier">Filter by Supplier Name</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfInventoryItemDto>> ApiServicesAppInventoryreportGetinventorylistGetAsync(int? salesChannelId, int? logisticProviderId, string variantTitleOrSku, string productTitle, string supplier, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, int? addedBy)
        {
            return ApiServicesAppInventoryreportGetinventorylistGetAsync(salesChannelId, logisticProviderId, variantTitleOrSku, productTitle, supplier, quantityLessThan, quantityMoreThan, sorting, maxResultCount, skipCount, addedBy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory List
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="productTitle">Filter by product title | Sorting Parameter</param>
        /// <param name="supplier">Filter by Supplier Name</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfInventoryItemDto>> ApiServicesAppInventoryreportGetinventorylistGetAsync(int? salesChannelId, int? logisticProviderId, string variantTitleOrSku, string productTitle, string supplier, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, int? addedBy, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryReport/GetInventoryList?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (variantTitleOrSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VariantTitleOrSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variantTitleOrSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplier != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Supplier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityLessThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityLessThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityMoreThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityMoreThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityMoreThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (addedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AddedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfInventoryItemDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory List as excel
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="productTitle">Filter by product title | Sorting Parameter</param>
        /// <param name="supplier">Filter by Supplier Name</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventoryreportGetinventorylisttoexcelGetAsync(int? salesChannelId, int? logisticProviderId, string variantTitleOrSku, string productTitle, string supplier, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, int? addedBy)
        {
            return ApiServicesAppInventoryreportGetinventorylisttoexcelGetAsync(salesChannelId, logisticProviderId, variantTitleOrSku, productTitle, supplier, quantityLessThan, quantityMoreThan, sorting, maxResultCount, skipCount, addedBy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory List as excel
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="productTitle">Filter by product title | Sorting Parameter</param>
        /// <param name="supplier">Filter by Supplier Name</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventoryreportGetinventorylisttoexcelGetAsync(int? salesChannelId, int? logisticProviderId, string variantTitleOrSku, string productTitle, string supplier, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, int? addedBy, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryReport/GetInventoryListToExcel?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (variantTitleOrSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VariantTitleOrSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variantTitleOrSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplier != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Supplier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityLessThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityLessThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityMoreThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityMoreThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityMoreThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (addedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AddedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory List as pdf
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="productTitle">Filter by product title | Sorting Parameter</param>
        /// <param name="supplier">Filter by Supplier Name</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventoryreportGetinventorylisttopdfGetAsync(int? salesChannelId, int? logisticProviderId, string variantTitleOrSku, string productTitle, string supplier, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, int? addedBy)
        {
            return ApiServicesAppInventoryreportGetinventorylisttopdfGetAsync(salesChannelId, logisticProviderId, variantTitleOrSku, productTitle, supplier, quantityLessThan, quantityMoreThan, sorting, maxResultCount, skipCount, addedBy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory List as pdf
        /// </summary>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="variantTitleOrSku">Filter by product variant title or SKU | Sorting Parameter</param>
        /// <param name="productTitle">Filter by product title | Sorting Parameter</param>
        /// <param name="supplier">Filter by Supplier Name</param>
        /// <param name="quantityLessThan">Filter items whose quantity is less than</param>
        /// <param name="quantityMoreThan">Filter items whose quantity is more than</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventoryreportGetinventorylisttopdfGetAsync(int? salesChannelId, int? logisticProviderId, string variantTitleOrSku, string productTitle, string supplier, int? quantityLessThan, int? quantityMoreThan, string sorting, int? maxResultCount, int? skipCount, int? addedBy, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryReport/GetInventoryListToPdf?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (variantTitleOrSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VariantTitleOrSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variantTitleOrSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supplier != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Supplier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supplier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityLessThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityLessThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantityMoreThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QuantityMoreThan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantityMoreThan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (addedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AddedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of generated inventories
        /// </summary>
        /// <param name="fromDate">From Created Date</param>
        /// <param name="toDate">To Created Date</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfInventoryReportDto>> ApiServicesAppInventoryreportGetallgeneratedinventoryreportsGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppInventoryreportGetallgeneratedinventoryreportsGetAsync(fromDate, toDate, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of generated inventories
        /// </summary>
        /// <param name="fromDate">From Created Date</param>
        /// <param name="toDate">To Created Date</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfInventoryReportDto>> ApiServicesAppInventoryreportGetallgeneratedinventoryreportsGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryReport/GetAllGeneratedInventoryReports?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfInventoryReportDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download report pdf file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<byte>[]> ApiServicesAppInventoryreportGetreportpdffordownloadGetAsync(int? id)
        {
            return ApiServicesAppInventoryreportGetreportpdffordownloadGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download report pdf file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<byte>[]> ApiServicesAppInventoryreportGetreportpdffordownloadGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryReport/GetReportPdfForDownload?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<byte>[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download report excel file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventoryreportGetreportexcelfordownloadGetAsync(int? id)
        {
            return ApiServicesAppInventoryreportGetreportexcelfordownloadGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download report excel file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppInventoryreportGetreportexcelfordownloadGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/InventoryReport/GetReportExcelForDownload?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<InvoiceDto>> ApiServicesAppInvoiceGetinvoiceinfoGetAsync(long? id)
        {
            return ApiServicesAppInvoiceGetinvoiceinfoGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<InvoiceDto>> ApiServicesAppInvoiceGetinvoiceinfoGetAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoice/GetInvoiceInfo?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<InvoiceDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppInvoiceCreateinvoicePostAsync(CreateInvoiceDto body)
        {
            return ApiServicesAppInvoiceCreateinvoicePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppInvoiceCreateinvoicePostAsync(CreateInvoiceDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoice/CreateInvoice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Invoice list
        /// </summary>
        /// <param name="invoiceStatus">Filter by Invoice Status | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfInvoiceFileDto>> ApiServicesAppInvoicesGetGetAsync(string filter, InvoiceStatus? invoiceStatus, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppInvoicesGetGetAsync(filter, invoiceStatus, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Invoice list
        /// </summary>
        /// <param name="invoiceStatus">Filter by Invoice Status | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfInvoiceFileDto>> ApiServicesAppInvoicesGetGetAsync(string filter, InvoiceStatus? invoiceStatus, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoices/Get?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("InvoiceStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfInvoiceFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Invoice by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesGetbyidGetAsync(int? id)
        {
            return ApiServicesAppInvoicesGetbyidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Invoice by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesGetbyidGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoices/GetById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<InvoiceFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download invoice. Downloaded file will be in Byte Array
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesDownloadGetAsync(int? id)
        {
            return ApiServicesAppInvoicesDownloadGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download invoice. Downloaded file will be in Byte Array
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesDownloadGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoices/Download?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<InvoiceFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesUpdatePutAsync(UpdateInvoiceDto body)
        {
            return ApiServicesAppInvoicesUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesUpdatePutAsync(UpdateInvoiceDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoices/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<InvoiceFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesDeleteDeleteAsync(int? id)
        {
            return ApiServicesAppInvoicesDeleteDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<InvoiceFileDto>> ApiServicesAppInvoicesDeleteDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoices/Delete?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<InvoiceFileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload an invoice
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="paymentDate">Last date of payment</param>
        /// <param name="amount">Invoice Amount</param>
        /// <param name="currency">Amount Currency</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppInvoicesUploadPostAsync(int? customerTenantId, DateTimeOffset? paymentDate, InvoiceStatus? invoiceStatus, double? amount, string currency)
        {
            return ApiServicesAppInvoicesUploadPostAsync(customerTenantId, paymentDate, invoiceStatus, amount, currency, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload an invoice
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="paymentDate">Last date of payment</param>
        /// <param name="amount">Invoice Amount</param>
        /// <param name="currency">Amount Currency</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppInvoicesUploadPostAsync(int? customerTenantId, DateTimeOffset? paymentDate, InvoiceStatus? invoiceStatus, double? amount, string currency, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Invoices/Upload");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (customerTenantId == null)
                        throw new System.ArgumentNullException("customerTenantId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture)), "CustomerTenantId");
                    }

                    if (paymentDate == null)
                        throw new System.ArgumentNullException("paymentDate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(paymentDate, System.Globalization.CultureInfo.InvariantCulture)), "PaymentDate");
                    }

                    if (invoiceStatus == null)
                        throw new System.ArgumentNullException("invoiceStatus");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(invoiceStatus, System.Globalization.CultureInfo.InvariantCulture)), "InvoiceStatus");
                    }

                    if (amount == null)
                        throw new System.ArgumentNullException("amount");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture)), "Amount");
                    }

                    if (currency == null)
                        throw new System.ArgumentNullException("currency");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)), "Currency");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetLanguagesOutput>> ApiServicesAppLanguageGetlanguagesGetAsync()
        {
            return ApiServicesAppLanguageGetlanguagesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetLanguagesOutput>> ApiServicesAppLanguageGetlanguagesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/GetLanguages");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetLanguagesOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetLanguageForEditOutput>> ApiServicesAppLanguageGetlanguageforeditGetAsync(int? id)
        {
            return ApiServicesAppLanguageGetlanguageforeditGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetLanguageForEditOutput>> ApiServicesAppLanguageGetlanguageforeditGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/GetLanguageForEdit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetLanguageForEditOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLanguageCreateorupdatelanguagePostAsync(CreateOrUpdateLanguageInput body)
        {
            return ApiServicesAppLanguageCreateorupdatelanguagePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLanguageCreateorupdatelanguagePostAsync(CreateOrUpdateLanguageInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/CreateOrUpdateLanguage");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLanguageDeletelanguageDeleteAsync(int? id)
        {
            return ApiServicesAppLanguageDeletelanguageDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLanguageDeletelanguageDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/DeleteLanguage?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLanguageSetdefaultlanguagePostAsync(SetDefaultLanguageInput body)
        {
            return ApiServicesAppLanguageSetdefaultlanguagePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLanguageSetdefaultlanguagePostAsync(SetDefaultLanguageInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/SetDefaultLanguage");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfLanguageTextListDto>> ApiServicesAppLanguageGetlanguagetextsGetAsync(int? maxResultCount, int? skipCount, string sorting, string sourceName, string baseLanguageName, string targetLanguageName, string targetValueFilter, string filterText)
        {
            return ApiServicesAppLanguageGetlanguagetextsGetAsync(maxResultCount, skipCount, sorting, sourceName, baseLanguageName, targetLanguageName, targetValueFilter, filterText, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfLanguageTextListDto>> ApiServicesAppLanguageGetlanguagetextsGetAsync(int? maxResultCount, int? skipCount, string sorting, string sourceName, string baseLanguageName, string targetLanguageName, string targetValueFilter, string filterText, System.Threading.CancellationToken cancellationToken)
        {
            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            if (targetLanguageName == null)
                throw new System.ArgumentNullException("targetLanguageName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/GetLanguageTexts?");
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("SourceName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (baseLanguageName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BaseLanguageName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseLanguageName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("TargetLanguageName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(targetLanguageName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (targetValueFilter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TargetValueFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(targetValueFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterText != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FilterText") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterText, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfLanguageTextListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLanguageUpdatelanguagetextPutAsync(UpdateLanguageTextInput body)
        {
            return ApiServicesAppLanguageUpdatelanguagetextPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLanguageUpdatelanguagetextPutAsync(UpdateLanguageTextInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/UpdateLanguageText");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppLanguageGeneratelanguagexmlPostAsync(EntityDto body)
        {
            return ApiServicesAppLanguageGeneratelanguagexmlPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppLanguageGeneratelanguagexmlPostAsync(EntityDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Language/GenerateLanguageXml");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all warehouse location costs
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfWarehouseLocationCostDto>> ApiServicesAppLocationcostGetalllocationcostsGetAsync(int? customerTenantId, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppLocationcostGetalllocationcostsGetAsync(customerTenantId, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all warehouse location costs
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfWarehouseLocationCostDto>> ApiServicesAppLocationcostGetalllocationcostsGetAsync(int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCost/GetAllLocationCosts?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfWarehouseLocationCostDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get warehouse location cost by filter
        /// </summary>
        /// <param name="storageLocationType">Warehouse storage location type</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WarehouseLocationCostDto>> ApiServicesAppLocationcostGetlocationcostGetAsync(int? customerTenantId, WarehouseStorageLocationType storageLocationType)
        {
            return ApiServicesAppLocationcostGetlocationcostGetAsync(customerTenantId, storageLocationType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse location cost by filter
        /// </summary>
        /// <param name="storageLocationType">Warehouse storage location type</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WarehouseLocationCostDto>> ApiServicesAppLocationcostGetlocationcostGetAsync(int? customerTenantId, WarehouseStorageLocationType storageLocationType, System.Threading.CancellationToken cancellationToken)
        {
            if (storageLocationType == null)
                throw new System.ArgumentNullException("storageLocationType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCost/GetLocationCost?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("StorageLocationType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(storageLocationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WarehouseLocationCostDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get warehouse location cost by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WarehouseLocationCostDto>> ApiServicesAppLocationcostGetlocationcostbyidGetAsync(int? id)
        {
            return ApiServicesAppLocationcostGetlocationcostbyidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse location cost by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WarehouseLocationCostDto>> ApiServicesAppLocationcostGetlocationcostbyidGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCost/GetLocationCostById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WarehouseLocationCostDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update Location cost
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLocationcostCreateorupdatelocationcostPostAsync(CreateOrUpdateLocationCostInput body)
        {
            return ApiServicesAppLocationcostCreateorupdatelocationcostPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update Location cost
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLocationcostCreateorupdatelocationcostPostAsync(CreateOrUpdateLocationCostInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCost/CreateOrUpdateLocationCost");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Location Cost by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLocationcostDeletelocationcostDeleteAsync(int? id)
        {
            return ApiServicesAppLocationcostDeletelocationcostDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Location Cost by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLocationcostDeletelocationcostDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCost/DeleteLocationCost?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all warehouse location cost rules
        /// </summary>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfWarehouseLocationCostRuleDto>> ApiServicesAppLocationcostruleGetalllocationcostrulesGetAsync(int? customerTenantId, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppLocationcostruleGetalllocationcostrulesGetAsync(customerTenantId, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all warehouse location cost rules
        /// </summary>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfWarehouseLocationCostRuleDto>> ApiServicesAppLocationcostruleGetalllocationcostrulesGetAsync(int? customerTenantId, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCostRule/GetAllLocationCostRules?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfWarehouseLocationCostRuleDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all available location names from warehouse locations
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppLocationcostruleGetavailablelocationnamesGetAsync(string query)
        {
            return ApiServicesAppLocationcostruleGetavailablelocationnamesGetAsync(query, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all available location names from warehouse locations
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppLocationcostruleGetavailablelocationnamesGetAsync(string query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCostRule/GetAvailableLocationNames?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get warehouse location cost rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WarehouseLocationCostRuleDto>> ApiServicesAppLocationcostruleGetlocationcostrulebyidGetAsync(int? ruleId)
        {
            return ApiServicesAppLocationcostruleGetlocationcostrulebyidGetAsync(ruleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse location cost rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WarehouseLocationCostRuleDto>> ApiServicesAppLocationcostruleGetlocationcostrulebyidGetAsync(int? ruleId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCostRule/GetLocationCostRuleById?");
            if (ruleId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ruleId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WarehouseLocationCostRuleDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update Location cost rule
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLocationcostruleCreateorupdatelocationcostrulePostAsync(CreateOrUpdateLocationCostRuleInput body)
        {
            return ApiServicesAppLocationcostruleCreateorupdatelocationcostrulePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update Location cost rule
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLocationcostruleCreateorupdatelocationcostrulePostAsync(CreateOrUpdateLocationCostRuleInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCostRule/CreateOrUpdateLocationCostRule");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Location Cost Rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLocationcostruleDeletelocationcostruleDeleteAsync(int? ruleId)
        {
            return ApiServicesAppLocationcostruleDeletelocationcostruleDeleteAsync(ruleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Location Cost Rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLocationcostruleDeletelocationcostruleDeleteAsync(int? ruleId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCostRule/DeleteLocationCostRule?");
            if (ruleId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ruleId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets all matching location names by query
        /// </summary>
        /// <param name="searchTerm">Name of the location where product is stored</param>
        /// <param name="locationCostRuleSearchType">Rule condition</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<KeyValuePairOfStringString>>> ApiServicesAppLocationcostruleGetallmatchinglocationnamesGetAsync(string searchTerm, LocationCostRuleSearchType locationCostRuleSearchType, int? customerTenantId)
        {
            return ApiServicesAppLocationcostruleGetallmatchinglocationnamesGetAsync(searchTerm, locationCostRuleSearchType, customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all matching location names by query
        /// </summary>
        /// <param name="searchTerm">Name of the location where product is stored</param>
        /// <param name="locationCostRuleSearchType">Rule condition</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<KeyValuePairOfStringString>>> ApiServicesAppLocationcostruleGetallmatchinglocationnamesGetAsync(string searchTerm, LocationCostRuleSearchType locationCostRuleSearchType, int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            if (locationCostRuleSearchType == null)
                throw new System.ArgumentNullException("locationCostRuleSearchType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LocationCostRule/GetAllMatchingLocationNames?");
            if (searchTerm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SearchTerm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchTerm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("LocationCostRuleSearchType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locationCostRuleSearchType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<KeyValuePairOfStringString>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Logistic Provider Details
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfLogisticProviderDetails>> ApiServicesAppLogisticprovidersGetGetAsync()
        {
            return ApiServicesAppLogisticprovidersGetGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Logistic Provider Details
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfLogisticProviderDetails>> ApiServicesAppLogisticprovidersGetGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviders/Get");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfLogisticProviderDetails>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of Logistic Provider Customers
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id | Sorting Parameter</param>
        /// <param name="filter">Filter by Store name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfLogisticProviderCustomerDetailDto>> ApiServicesAppLogisticprovidercustomersGetGetAsync(int? logisticProviderId, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppLogisticprovidercustomersGetGetAsync(logisticProviderId, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of Logistic Provider Customers
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id | Sorting Parameter</param>
        /// <param name="filter">Filter by Store name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfLogisticProviderCustomerDetailDto>> ApiServicesAppLogisticprovidercustomersGetGetAsync(int? logisticProviderId, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomers/Get?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfLogisticProviderCustomerDetailDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of All Logistic Provider Customers
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfLogisticProviderCustomerDto>> ApiServicesAppLogisticprovidercustomersGetallGetAsync(int? logisticProviderId)
        {
            return ApiServicesAppLogisticprovidercustomersGetallGetAsync(logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of All Logistic Provider Customers
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfLogisticProviderCustomerDto>> ApiServicesAppLogisticprovidercustomersGetallGetAsync(int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomers/GetAll?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfLogisticProviderCustomerDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get count of Logistic Provider Customers
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppLogisticprovidercustomersCountGetAsync(int? logisticProviderId)
        {
            return ApiServicesAppLogisticprovidercustomersCountGetAsync(logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get count of Logistic Provider Customers
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppLogisticprovidercustomersCountGetAsync(int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomers/Count?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Logistic Provider Customer by Customer Tenant Id
        /// </summary>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<LogisticProviderCustomerDetailDto>> ApiServicesAppLogisticprovidercustomersGetbytenantidGetAsync(long? id, bool? includeChild)
        {
            return ApiServicesAppLogisticprovidercustomersGetbytenantidGetAsync(id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Logistic Provider Customer by Customer Tenant Id
        /// </summary>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<LogisticProviderCustomerDetailDto>> ApiServicesAppLogisticprovidercustomersGetbytenantidGetAsync(long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomers/GetByTenantId?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<LogisticProviderCustomerDetailDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of installed Logistic Provider for all the Customers
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppLogisticprovidercustomersAllinstalledlogisticprovidersGetAsync(int? customerTenantId)
        {
            return ApiServicesAppLogisticprovidercustomersAllinstalledlogisticprovidersGetAsync(customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of installed Logistic Provider for all the Customers
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppLogisticprovidercustomersAllinstalledlogisticprovidersGetAsync(int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomers/AllInstalledLogisticProviders?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of all sales channels installed by Customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfSalesChannelInstallationStatusDto>> ApiServicesAppLogisticprovidercustomersGetallinstalledsaleschannelsbycustomertenantidGetAsync(int? customerTenantId)
        {
            return ApiServicesAppLogisticprovidercustomersGetallinstalledsaleschannelsbycustomertenantidGetAsync(customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of all sales channels installed by Customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfSalesChannelInstallationStatusDto>> ApiServicesAppLogisticprovidercustomersGetallinstalledsaleschannelsbycustomertenantidGetAsync(int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomers/GetAllInstalledSalesChannelsByCustomerTenantId?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfSalesChannelInstallationStatusDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get currency of Logistic provider customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<string>> ApiServicesAppLogisticprovidercustomersGetlpcustomercurrencyGetAsync(int? customerTenantId)
        {
            return ApiServicesAppLogisticprovidercustomersGetlpcustomercurrencyGetAsync(customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get currency of Logistic provider customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<string>> ApiServicesAppLogisticprovidercustomersGetlpcustomercurrencyGetAsync(int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomers/GetLpCustomerCurrency?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Custom Product with Variant
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticprovidercustomproductCreateproductPostAsync(CustomProductDto body)
        {
            return ApiServicesAppLogisticprovidercustomproductCreateproductPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Custom Product with Variant
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticprovidercustomproductCreateproductPostAsync(CustomProductDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomProduct/CreateProduct");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Custom Variant
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticprovidercustomproductCreateproductvariantPostAsync(long? salesChannelProductId, CustomProductVariantDto body)
        {
            return ApiServicesAppLogisticprovidercustomproductCreateproductvariantPostAsync(salesChannelProductId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Custom Variant
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticprovidercustomproductCreateproductvariantPostAsync(long? salesChannelProductId, CustomProductVariantDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomProduct/CreateProductVariant?");
            if (salesChannelProductId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelProductId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductVariantDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete product by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLogisticprovidercustomproductDeleteproductDeleteAsync(int? salesChannelProductId)
        {
            return ApiServicesAppLogisticprovidercustomproductDeleteproductDeleteAsync(salesChannelProductId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete product by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLogisticprovidercustomproductDeleteproductDeleteAsync(int? salesChannelProductId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomProduct/DeleteProduct?");
            if (salesChannelProductId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelProductId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Variant by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLogisticprovidercustomproductDeleteproductvariantDeleteAsync(int? productVariantId)
        {
            return ApiServicesAppLogisticprovidercustomproductDeleteproductvariantDeleteAsync(productVariantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Variant by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLogisticprovidercustomproductDeleteproductvariantDeleteAsync(int? productVariantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderCustomProduct/DeleteProductVariant?");
            if (productVariantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productVariantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productVariantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<SalesChannelOrderOverviewDto>>> ApiServicesAppLogisticproviderdashboardGetsaleschannelorderoverviewGetAsync(bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate)
        {
            return ApiServicesAppLogisticproviderdashboardGetsaleschannelorderoverviewGetAsync(processedOrdersOnly, chargeableOrdersOnly, startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="processedOrdersOnly">Filter only invoiced orders | Only for PP Admin dashboard</param>
        /// <param name="chargeableOrdersOnly">Filter only chargeable invoiced orders (Skip 0 value order) | Only for PP Admin dashboard</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<SalesChannelOrderOverviewDto>>> ApiServicesAppLogisticproviderdashboardGetsaleschannelorderoverviewGetAsync(bool? processedOrdersOnly, bool? chargeableOrdersOnly, DateTimeOffset? startDate, DateTimeOffset? endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderDashboard/GetSalesChannelOrderOverview?");
            if (processedOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProcessedOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processedOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chargeableOrdersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChargeableOrdersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chargeableOrdersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<SalesChannelOrderOverviewDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get number of orders created each day filtered by month
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>> ApiServicesAppLogisticproviderdashboardGetordercountperdaybydaterangeGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate)
        {
            return ApiServicesAppLogisticproviderdashboardGetordercountperdaybydaterangeGetAsync(logisticProviderId, customerTenantId, salesChannelId, fromDate, toDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get number of orders created each day filtered by month
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>> ApiServicesAppLogisticproviderdashboardGetordercountperdaybydaterangeGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderDashboard/GetOrderCountPerDayByDateRange?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of logistic provider invoices
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Sales Channel Id | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfLogisticProviderInvoicesDto>> ApiServicesAppLogisticproviderinvoiceGetinvoicesGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? invoiceId, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppLogisticproviderinvoiceGetinvoicesGetAsync(fromDate, toDate, logisticProviderId, invoiceId, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of logistic provider invoices
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Sales Channel Id | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfLogisticProviderInvoicesDto>> ApiServicesAppLogisticproviderinvoiceGetinvoicesGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? invoiceId, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderInvoice/GetInvoices?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("InvoiceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfLogisticProviderInvoicesDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download invoice. Downloaded file will be in Byte Array
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppLogisticproviderinvoiceGetinvoicefordownloadGetAsync(int? id)
        {
            return ApiServicesAppLogisticproviderinvoiceGetinvoicefordownloadGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download invoice. Downloaded file will be in Byte Array
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppLogisticproviderinvoiceGetinvoicefordownloadGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderInvoice/GetInvoiceForDownload?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate all invoices for current month
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLogisticproviderinvoiceGenerateallinvoicesforcurrentmonthPostAsync()
        {
            return ApiServicesAppLogisticproviderinvoiceGenerateallinvoicesforcurrentmonthPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate all invoices for current month
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLogisticproviderinvoiceGenerateallinvoicesforcurrentmonthPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderInvoice/GenerateAllInvoicesForCurrentMonth");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a generated invoice by invoice id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLogisticproviderinvoiceDeleteinvoiceDeleteAsync(int? id)
        {
            return ApiServicesAppLogisticproviderinvoiceDeleteinvoiceDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a generated invoice by invoice id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLogisticproviderinvoiceDeleteinvoiceDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderInvoice/DeleteInvoice?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of orders assigned to Logistic Provider
        /// </summary>
        /// <param name="fromDate">Filter orders by CreatedAt (From Date)</param>
        /// <param name="toDate">Filter orders by CreatedAt (To Date)</param>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="includeLineItems">Boolean to include line item in result</param>
        /// <param name="includeFulfillments">Boolean to include order fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeRefunds">Boolean to include order refunds in result</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="skipMarked">Skip fetching the marked orders</param>
        /// <param name="status">Default: Pending,InProgress | Filter by Order Status.
        /// <br/>A Comma separated list of statuses. Status can be any of any, inprogress, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="includeNonPaidOrders">Include non paid orders in result</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderIds">Filter order by Prime Penguin's order id</param>
        /// <param name="externalOrderIds">Filter order by External order id</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>> ApiServicesAppLogisticproviderordersGetGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeRefunds, int? logisticProviderId, bool? skipMarked, string status, bool? includeNonPaidOrders, int? customerTenantId, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderIds, IEnumerable<string> externalOrderIds, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppLogisticproviderordersGetGetAsync(fromDate, toDate, fromImportedDate, toImportedDate, fromModifiedDate, toModifiedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeRefunds, logisticProviderId, skipMarked, status, includeNonPaidOrders, customerTenantId, mergeBundleLineItems, salesChannelOrderIds, externalOrderIds, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of orders assigned to Logistic Provider
        /// </summary>
        /// <param name="fromDate">Filter orders by CreatedAt (From Date)</param>
        /// <param name="toDate">Filter orders by CreatedAt (To Date)</param>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="includeLineItems">Boolean to include line item in result</param>
        /// <param name="includeFulfillments">Boolean to include order fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeRefunds">Boolean to include order refunds in result</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="skipMarked">Skip fetching the marked orders</param>
        /// <param name="status">Default: Pending,InProgress | Filter by Order Status.
        /// <br/>A Comma separated list of statuses. Status can be any of any, inprogress, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="includeNonPaidOrders">Include non paid orders in result</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="salesChannelOrderIds">Filter order by Prime Penguin's order id</param>
        /// <param name="externalOrderIds">Filter order by External order id</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>> ApiServicesAppLogisticproviderordersGetGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeRefunds, int? logisticProviderId, bool? skipMarked, string status, bool? includeNonPaidOrders, int? customerTenantId, bool? mergeBundleLineItems, IEnumerable<long> salesChannelOrderIds, IEnumerable<string> externalOrderIds, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/Get?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromImportedDate") + "=").Append(System.Uri.EscapeDataString(fromImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToImportedDate") + "=").Append(System.Uri.EscapeDataString(toImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromModifiedDate") + "=").Append(System.Uri.EscapeDataString(fromModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToModifiedDate") + "=").Append(System.Uri.EscapeDataString(toModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefunds != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeRefunds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefunds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipMarked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipMarked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipMarked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeNonPaidOrders != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeNonPaidOrders") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeNonPaidOrders, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelOrderIds != null)
            {
                foreach (var item_ in salesChannelOrderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelOrderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalOrderIds != null)
            {
                foreach (var item_ in externalOrderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("ExternalOrderIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get count of all the orders assigned to Logistic Provider
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="skipMarked">Bool to skip marked orders</param>
        /// <param name="status">Default: Pending,InProgress | Filter by Order Status. A Comma separated list of statuses. Status can be any of any, inprogress, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="includeNonPaidOrders">Include non paid orders in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppLogisticproviderordersCountGetAsync(int? customerTenantId, int? logisticProviderId, bool? skipMarked, string status, bool? includeNonPaidOrders)
        {
            return ApiServicesAppLogisticproviderordersCountGetAsync(customerTenantId, logisticProviderId, skipMarked, status, includeNonPaidOrders, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get count of all the orders assigned to Logistic Provider
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="skipMarked">Bool to skip marked orders</param>
        /// <param name="status">Default: Pending,InProgress | Filter by Order Status. A Comma separated list of statuses. Status can be any of any, inprogress, fulfilled, pending, cancelled or refunded | Sorting Parameter</param>
        /// <param name="includeNonPaidOrders">Include non paid orders in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppLogisticproviderordersCountGetAsync(int? customerTenantId, int? logisticProviderId, bool? skipMarked, string status, bool? includeNonPaidOrders, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/Count?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipMarked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skipMarked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipMarked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeNonPaidOrders != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeNonPaidOrders") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeNonPaidOrders, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single order by Id
        /// </summary>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelOrderDto>> ApiServicesAppLogisticproviderordersGetbyidGetAsync(bool? mergeBundleLineItems, long? id, bool? includeChild)
        {
            return ApiServicesAppLogisticproviderordersGetbyidGetAsync(mergeBundleLineItems, id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single order by Id
        /// </summary>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelOrderDto>> ApiServicesAppLogisticproviderordersGetbyidGetAsync(bool? mergeBundleLineItems, long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/GetById?");
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get order fulfillment details by Order Id
        /// </summary>
        /// <param name="orderId">PrimePenguin Order Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetFulfillmentsDto>> ApiServicesAppLogisticproviderordersFulfillmentsGetAsync(long? orderId)
        {
            return ApiServicesAppLogisticproviderordersFulfillmentsGetAsync(orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get order fulfillment details by Order Id
        /// </summary>
        /// <param name="orderId">PrimePenguin Order Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetFulfillmentsDto>> ApiServicesAppLogisticproviderordersFulfillmentsGetAsync(long? orderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/Fulfillments?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetFulfillmentsDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets order fulfillment counts in order
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppLogisticproviderordersFulfillmentcountGetAsync(long? orderId)
        {
            return ApiServicesAppLogisticproviderordersFulfillmentcountGetAsync(orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets order fulfillment counts in order
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppLogisticproviderordersFulfillmentcountGetAsync(long? orderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/FulfillmentCount?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Order Fulfillment in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersFulfillmentPostAsync(CreateOrderFulfillmentDto body)
        {
            return ApiServicesAppLogisticproviderordersFulfillmentPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Order Fulfillment in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersFulfillmentPostAsync(CreateOrderFulfillmentDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/Fulfillment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelFulfillmentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Order Fulfillment in Sales Channel. This will not update fulfillment status.
        /// <br/>This API is only supported by Shopify sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersFulfillmentPutAsync(UpdateOrderFulfillmentDto body)
        {
            return ApiServicesAppLogisticproviderordersFulfillmentPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Order Fulfillment in Sales Channel. This will not update fulfillment status.
        /// <br/>This API is only supported by Shopify sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersFulfillmentPutAsync(UpdateOrderFulfillmentDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/Fulfillment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelFulfillmentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Order Fulfillment in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersCancelfulfillmentPostAsync(CancelOrderFulfillmentDto body)
        {
            return ApiServicesAppLogisticproviderordersCancelfulfillmentPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Order Fulfillment in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersCancelfulfillmentPostAsync(CancelOrderFulfillmentDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/CancelFulfillment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelFulfillmentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Order Fulfillment Status in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersFulfillmentstatusPutAsync(UpdateFulfillmentStatusDto body)
        {
            return ApiServicesAppLogisticproviderordersFulfillmentstatusPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Order Fulfillment Status in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelFulfillmentDto>> ApiServicesAppLogisticproviderordersFulfillmentstatusPutAsync(UpdateFulfillmentStatusDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/FulfillmentStatus");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelFulfillmentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark order as downloaded
        /// </summary>
        /// <param name="body">Order Ids Array</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfSalesChannelOrderDto>> ApiServicesAppLogisticproviderordersMarkasdownloadedPostAsync(IEnumerable<long> body)
        {
            return ApiServicesAppLogisticproviderordersMarkasdownloadedPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark order as downloaded
        /// </summary>
        /// <param name="body">Order Ids Array</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfSalesChannelOrderDto>> ApiServicesAppLogisticproviderordersMarkasdownloadedPostAsync(IEnumerable<long> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderOrders/MarkAsDownloaded");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfSalesChannelOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of products that are assigned to Logistic Provider
        /// </summary>
        /// <param name="fromCreatedDate">Filter products by CreatedAt (From Date)</param>
        /// <param name="toCreatedDate">Filter products by CreatedAt (To Date)</param>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="includeProductVariants">Boolean to include product variants in result</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetGetAsync(DateTimeOffset? fromCreatedDate, DateTimeOffset? toCreatedDate, DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, int? logisticProviderId, int? customerTenantId, bool? includeProductVariants, int? addedBy, bool? mergeBundleProducts, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppLogisticproviderproductsGetGetAsync(fromCreatedDate, toCreatedDate, fromImportedDate, toImportedDate, fromModifiedDate, toModifiedDate, logisticProviderId, customerTenantId, includeProductVariants, addedBy, mergeBundleProducts, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of products that are assigned to Logistic Provider
        /// </summary>
        /// <param name="fromCreatedDate">Filter products by CreatedAt (From Date)</param>
        /// <param name="toCreatedDate">Filter products by CreatedAt (To Date)</param>
        /// <param name="fromImportedDate">Filter orders by (From) date time when order was imported in Prime Penguin</param>
        /// <param name="toImportedDate">Filter orders by (To) date time when order was imported in Prime Penguin</param>
        /// <param name="fromModifiedDate">Filter orders by (From) date time when order was modified in Prime Penguin</param>
        /// <param name="toModifiedDate">Filter orders by (To) date time when order was modified in Prime Penguin</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="includeProductVariants">Boolean to include product variants in result</param>
        /// <param name="addedBy">Filter by Adder | 1 - Sales Channel, 2 - Logistic Provider</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetGetAsync(DateTimeOffset? fromCreatedDate, DateTimeOffset? toCreatedDate, DateTimeOffset? fromImportedDate, DateTimeOffset? toImportedDate, DateTimeOffset? fromModifiedDate, DateTimeOffset? toModifiedDate, int? logisticProviderId, int? customerTenantId, bool? includeProductVariants, int? addedBy, bool? mergeBundleProducts, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/Get?");
            if (fromCreatedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromCreatedDate") + "=").Append(System.Uri.EscapeDataString(fromCreatedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toCreatedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToCreatedDate") + "=").Append(System.Uri.EscapeDataString(toCreatedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromImportedDate") + "=").Append(System.Uri.EscapeDataString(fromImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toImportedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToImportedDate") + "=").Append(System.Uri.EscapeDataString(toImportedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromModifiedDate") + "=").Append(System.Uri.EscapeDataString(fromModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toModifiedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToModifiedDate") + "=").Append(System.Uri.EscapeDataString(toModifiedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProductVariants != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeProductVariants") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProductVariants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (addedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AddedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleProducts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProducts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProducts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get count of products that are assigned to Logistic Provider
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppLogisticproviderproductsCountGetAsync(int? customerTenantId, int? logisticProviderId)
        {
            return ApiServicesAppLogisticproviderproductsCountGetAsync(customerTenantId, logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get count of products that are assigned to Logistic Provider
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppLogisticproviderproductsCountGetAsync(int? customerTenantId, int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/Count?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single Product by Id
        /// </summary>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetbyidGetAsync(bool? mergeBundleProducts, long? id, bool? includeChild)
        {
            return ApiServicesAppLogisticproviderproductsGetbyidGetAsync(mergeBundleProducts, id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Product by Id
        /// </summary>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetbyidGetAsync(bool? mergeBundleProducts, long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/GetById?");
            if (mergeBundleProducts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProducts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProducts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single Product Variant by Id
        /// </summary>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticproviderproductsGetvariantbyidGetAsync(long? id, bool? includeChild)
        {
            return ApiServicesAppLogisticproviderproductsGetvariantbyidGetAsync(id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Product Variant by Id
        /// </summary>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticproviderproductsGetvariantbyidGetAsync(long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/GetVariantById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductVariantDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single Product Variant by SKU
        /// </summary>
        /// <param name="sku">Product Variant SKU</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales channel Id</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticproviderproductsGetvariantbyskuGetAsync(string sku, int? customerTenantId, int? salesChannelId, bool? mergeBundleProducts)
        {
            return ApiServicesAppLogisticproviderproductsGetvariantbyskuGetAsync(sku, customerTenantId, salesChannelId, mergeBundleProducts, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Product Variant by SKU
        /// </summary>
        /// <param name="sku">Product Variant SKU</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales channel Id</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticproviderproductsGetvariantbyskuGetAsync(string sku, int? customerTenantId, int? salesChannelId, bool? mergeBundleProducts, System.Threading.CancellationToken cancellationToken)
        {
            if (sku == null)
                throw new System.ArgumentNullException("sku");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/GetVariantBySku?");
            urlBuilder_.Append(System.Uri.EscapeDataString("Sku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleProducts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProducts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProducts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductVariantDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single Product by Variant Id
        /// </summary>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetproductbyvariantidGetAsync(bool? mergeBundleProducts, long? id, bool? includeChild)
        {
            return ApiServicesAppLogisticproviderproductsGetproductbyvariantidGetAsync(mergeBundleProducts, id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Product by Variant Id
        /// </summary>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetproductbyvariantidGetAsync(bool? mergeBundleProducts, long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/GetProductByVariantId?");
            if (mergeBundleProducts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProducts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProducts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single Product by Variant SKU
        /// </summary>
        /// <param name="sku">Product Variant SKU</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales channel Id</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetproductbyvariantskuGetAsync(string sku, int? customerTenantId, int? salesChannelId, bool? mergeBundleProducts)
        {
            return ApiServicesAppLogisticproviderproductsGetproductbyvariantskuGetAsync(sku, customerTenantId, salesChannelId, mergeBundleProducts, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Product by Variant SKU
        /// </summary>
        /// <param name="sku">Product Variant SKU</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales channel Id</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppLogisticproviderproductsGetproductbyvariantskuGetAsync(string sku, int? customerTenantId, int? salesChannelId, bool? mergeBundleProducts, System.Threading.CancellationToken cancellationToken)
        {
            if (sku == null)
                throw new System.ArgumentNullException("sku");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/GetProductByVariantSku?");
            urlBuilder_.Append(System.Uri.EscapeDataString("Sku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleProducts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProducts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProducts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Product Inventory in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticproviderproductsProductvariantinventoryPutAsync(UpdateProductInventoryDto body)
        {
            return ApiServicesAppLogisticproviderproductsProductvariantinventoryPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Product Inventory in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductVariantDto>> ApiServicesAppLogisticproviderproductsProductvariantinventoryPutAsync(UpdateProductInventoryDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderProducts/ProductVariantInventory");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductVariantDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of refunds for an order by Order Id
        /// </summary>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfSalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsGetGetAsync(long? id, bool? includeChild)
        {
            return ApiServicesAppLogisticproviderrefundsGetGetAsync(id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of refunds for an order by Order Id
        /// </summary>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfSalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsGetGetAsync(long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderRefunds/Get?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfSalesChannelOrderRefundDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create refund for an Order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsCreatePostAsync(CreateRefundInputDto body)
        {
            return ApiServicesAppLogisticproviderrefundsCreatePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create refund for an Order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsCreatePostAsync(CreateRefundInputDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderRefunds/Create");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelOrderRefundDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Recieve Refund request from customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsRefundrequestPostAsync(NewRefundRequest body)
        {
            return ApiServicesAppLogisticproviderrefundsRefundrequestPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recieve Refund request from customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsRefundrequestPostAsync(NewRefundRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderRefunds/RefundRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelOrderRefundDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel refund request
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <param name="reason">Reason for cancelling the refund request</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsCancelrequestPutAsync(long? orderId, string reason)
        {
            return ApiServicesAppLogisticproviderrefundsCancelrequestPutAsync(orderId, reason, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel refund request
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <param name="reason">Reason for cancelling the refund request</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsCancelrequestPutAsync(long? orderId, string reason, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderRefunds/CancelRequest?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reason != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelOrderRefundDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Process refund request
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsProcessrequestPostAsync(long? orderId, ShippingDto body)
        {
            return ApiServicesAppLogisticproviderrefundsProcessrequestPostAsync(orderId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Process refund request
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelOrderRefundDto>> ApiServicesAppLogisticproviderrefundsProcessrequestPostAsync(long? orderId, ShippingDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderRefunds/ProcessRequest?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelOrderRefundDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get service cost for Logistic Provider Customer
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ServiceCostDto>> ApiServicesAppLogisticproviderServicecostsGetGetAsync(int? logisticProviderId, int? customerTenantId)
        {
            return ApiServicesAppLogisticproviderServicecostsGetGetAsync(logisticProviderId, customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get service cost for Logistic Provider Customer
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ServiceCostDto>> ApiServicesAppLogisticproviderServicecostsGetGetAsync(int? logisticProviderId, int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProvider/ServiceCosts/Get?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ServiceCostDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the service cost for Logistic Provider Customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ServiceCostDto>> ApiServicesAppLogisticproviderServicecostsUpdatePutAsync(UpdateCustomerServiceCost body)
        {
            return ApiServicesAppLogisticproviderServicecostsUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the service cost for Logistic Provider Customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ServiceCostDto>> ApiServicesAppLogisticproviderServicecostsUpdatePutAsync(UpdateCustomerServiceCost body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProvider/ServiceCosts/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ServiceCostDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get storage description for Logistic Provider Customer
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<StorageDescriptionDto>> ApiServicesAppLogisticproviderStoragedescriptionsGetGetAsync(int? logisticProviderId, int? customerTenantId)
        {
            return ApiServicesAppLogisticproviderStoragedescriptionsGetGetAsync(logisticProviderId, customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get storage description for Logistic Provider Customer
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<StorageDescriptionDto>> ApiServicesAppLogisticproviderStoragedescriptionsGetGetAsync(int? logisticProviderId, int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProvider/StorageDescriptions/Get?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<StorageDescriptionDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the storage description for User
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<StorageDescriptionDto>> ApiServicesAppLogisticproviderStoragedescriptionsUpdatePutAsync(UpdateCustomerStorageDescriptionInput body)
        {
            return ApiServicesAppLogisticproviderStoragedescriptionsUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the storage description for User
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<StorageDescriptionDto>> ApiServicesAppLogisticproviderStoragedescriptionsUpdatePutAsync(UpdateCustomerStorageDescriptionInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProvider/StorageDescriptions/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<StorageDescriptionDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get storage information for Logistic Provider Customer
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<StorageInformationDto>> ApiServicesAppLogisticproviderStorageinformationsGetGetAsync(int? logisticProviderId, int? customerTenantId)
        {
            return ApiServicesAppLogisticproviderStorageinformationsGetGetAsync(logisticProviderId, customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get storage information for Logistic Provider Customer
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<StorageInformationDto>> ApiServicesAppLogisticproviderStorageinformationsGetGetAsync(int? logisticProviderId, int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProvider/StorageInformations/Get?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<StorageInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Storage Information (including history)
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfStorageInformationDto>> ApiServicesAppLogisticproviderStorageinformationsGetallGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId)
        {
            return ApiServicesAppLogisticproviderStorageinformationsGetallGetAsync(fromDate, toDate, logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Storage Information (including history)
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfStorageInformationDto>> ApiServicesAppLogisticproviderStorageinformationsGetallGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProvider/StorageInformations/GetAll?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfStorageInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the storage information for User
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<StorageInformationDto>> ApiServicesAppLogisticproviderStorageinformationsUpdatePutAsync(UpdateCustomerStorageInformationInput body)
        {
            return ApiServicesAppLogisticproviderStorageinformationsUpdatePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the storage information for User
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<StorageInformationDto>> ApiServicesAppLogisticproviderStorageinformationsUpdatePutAsync(UpdateCustomerStorageInformationInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProvider/StorageInformations/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<StorageInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get LP Terms list
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfLogisticProviderTermDto>> ApiServicesAppLogisticprovidertermsGetlogisticprovidertermsGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter)
        {
            return ApiServicesAppLogisticprovidertermsGetlogisticprovidertermsGetAsync(sorting, maxResultCount, skipCount, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get LP Terms list
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfLogisticProviderTermDto>> ApiServicesAppLogisticprovidertermsGetlogisticprovidertermsGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderTerms/GetLogisticProviderTerms?");
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfLogisticProviderTermDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get logistic provider term by term Id
        /// </summary>
        /// <param name="id">contract id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<LogisticProviderTermDto>> ApiServicesAppLogisticprovidertermsGetlogisticprovidertermbyidGetAsync(int? id)
        {
            return ApiServicesAppLogisticprovidertermsGetlogisticprovidertermbyidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get logistic provider term by term Id
        /// </summary>
        /// <param name="id">contract id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<LogisticProviderTermDto>> ApiServicesAppLogisticprovidertermsGetlogisticprovidertermbyidGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderTerms/GetLogisticProviderTermById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<LogisticProviderTermDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update term
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLogisticprovidertermsCreateorupdatetermPostAsync(CreateLogisticProviderTermInput body)
        {
            return ApiServicesAppLogisticprovidertermsCreateorupdatetermPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update term
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLogisticprovidertermsCreateorupdatetermPostAsync(CreateLogisticProviderTermInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderTerms/CreateOrUpdateTerm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete existing LP Term
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppLogisticprovidertermsDeletetermDeleteAsync(int? id)
        {
            return ApiServicesAppLogisticprovidertermsDeletetermDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete existing LP Term
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppLogisticprovidertermsDeletetermDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/LogisticProviderTerms/DeleteTerm?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Installs Magento 2.x sales channel
        /// </summary>
        /// <param name="baseUrl">Base url</param>
        /// <param name="accessToken">Access token</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMagentoInstallmagentoPostAsync(string baseUrl, string accessToken)
        {
            return ApiServicesAppMagentoInstallmagentoPostAsync(baseUrl, accessToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Installs Magento 2.x sales channel
        /// </summary>
        /// <param name="baseUrl">Base url</param>
        /// <param name="accessToken">Access token</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMagentoInstallmagentoPostAsync(string baseUrl, string accessToken, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Magento/InstallMagento?");
            if (baseUrl != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("baseUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (accessToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("accessToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accessToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Installs Magento 1.x sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMagento1Installmagento1PostAsync(InstallMagento1Input body)
        {
            return ApiServicesAppMagento1Installmagento1PostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Installs Magento 1.x sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMagento1Installmagento1PostAsync(InstallMagento1Input body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Magento1/InstallMagento1");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMagento1hookPostAsync(Magento1HookInput body)
        {
            return ApiServicesAppMagento1hookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMagento1hookPostAsync(Magento1HookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Magento1Hook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMagentohookPostAsync(MagentoHookInput body)
        {
            return ApiServicesAppMagentohookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMagentohookPostAsync(MagentoHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MagentoHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Connect MyCashFlow sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMycashflowInstallmycashflowPostAsync(InstallMyCashFlowInput body)
        {
            return ApiServicesAppMycashflowInstallmycashflowPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Connect MyCashFlow sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMycashflowInstallmycashflowPostAsync(InstallMyCashFlowInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyCashFlow/InstallMyCashFlow");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMycashflowhookPostAsync(MyCashFlowHookInput body)
        {
            return ApiServicesAppMycashflowhookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMycashflowhookPostAsync(MyCashFlowHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyCashFlowHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMycashflowhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppMycashflowhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMycashflowhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyCashFlowHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMycashflowhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppMycashflowhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMycashflowhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyCashFlowHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get URL to install MyStore Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMystoreGetmystoreinstallurlGetAsync(string shopUrl, string clientId, string clientSecret, string state)
        {
            return ApiServicesAppMystoreGetmystoreinstallurlGetAsync(shopUrl, clientId, clientSecret, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get URL to install MyStore Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppMystoreGetmystoreinstallurlGetAsync(string shopUrl, string clientId, string clientSecret, string state, System.Threading.CancellationToken cancellationToken)
        {
            if (shopUrl == null)
                throw new System.ArgumentNullException("shopUrl");

            if (clientId == null)
                throw new System.ArgumentNullException("clientId");

            if (clientSecret == null)
                throw new System.ArgumentNullException("clientSecret");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyStore/GetMyStoreInstallUrl?");
            urlBuilder_.Append(System.Uri.EscapeDataString("ShopUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shopUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ClientId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ClientSecret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientSecret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("State") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Only to be used be MyStore to Authorize user after installation
        /// </summary>
        /// <param name="code">authentication code from my store</param>
        /// <param name="state">logged in user state</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMystoreInstallmystoreGetAsync(string code, string state)
        {
            return ApiServicesAppMystoreInstallmystoreGetAsync(code, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Only to be used be MyStore to Authorize user after installation
        /// </summary>
        /// <param name="code">authentication code from my store</param>
        /// <param name="state">logged in user state</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMystoreInstallmystoreGetAsync(string code, string state, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyStore/InstallMyStore?");
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMystorehookCreateorupdateproductPostAsync(int? salesChannelId, ViewaProductDetailresponse body)
        {
            return ApiServicesAppMystorehookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMystorehookCreateorupdateproductPostAsync(int? salesChannelId, ViewaProductDetailresponse body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyStoreHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMystorehookDeleteproductPostAsync(int? salesChannelId, ViewaProductDetailresponse body)
        {
            return ApiServicesAppMystorehookDeleteproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMystorehookDeleteproductPostAsync(int? salesChannelId, ViewaProductDetailresponse body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyStoreHook/DeleteProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppMystorehookCreateorupdateorderPostAsync(int? salesChannelId, ViewaOrderDetailresponse body)
        {
            return ApiServicesAppMystorehookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppMystorehookCreateorupdateorderPostAsync(int? salesChannelId, ViewaOrderDetailresponse body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/MyStoreHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Install Netbutikk Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppNetbutikkInstallnetbutikkPostAsync(InstallNetbutikkInput body)
        {
            return ApiServicesAppNetbutikkInstallnetbutikkPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Install Netbutikk Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppNetbutikkInstallnetbutikkPostAsync(InstallNetbutikkInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Netbutikk/InstallNetbutikk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppNetbutikkhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppNetbutikkhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppNetbutikkhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/NetbutikkHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppNetbutikkhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppNetbutikkhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppNetbutikkhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/NetbutikkHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetNotificationsOutput>> ApiServicesAppNotificationGetusernotificationsGetAsync(UserNotificationState? state, DateTimeOffset? startDate, DateTimeOffset? endDate, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppNotificationGetusernotificationsGetAsync(state, startDate, endDate, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetNotificationsOutput>> ApiServicesAppNotificationGetusernotificationsGetAsync(UserNotificationState? state, DateTimeOffset? startDate, DateTimeOffset? endDate, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/GetUserNotifications?");
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("State") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetNotificationsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfUserNotification>> ApiServicesAppNotificationGetshopnotificationsGetAsync()
        {
            return ApiServicesAppNotificationGetshopnotificationsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfUserNotification>> ApiServicesAppNotificationGetshopnotificationsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/GetShopNotifications");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfUserNotification>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppNotificationSetallnotificationsasreadPostAsync()
        {
            return ApiServicesAppNotificationSetallnotificationsasreadPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppNotificationSetallnotificationsasreadPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/SetAllNotificationsAsRead");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppNotificationSetnotificationasreadPostAsync(EntityDtoOfGuid body)
        {
            return ApiServicesAppNotificationSetnotificationasreadPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppNotificationSetnotificationasreadPostAsync(EntityDtoOfGuid body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/SetNotificationAsRead");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetNotificationSettingsOutput>> ApiServicesAppNotificationGetnotificationsettingsGetAsync()
        {
            return ApiServicesAppNotificationGetnotificationsettingsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetNotificationSettingsOutput>> ApiServicesAppNotificationGetnotificationsettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/GetNotificationSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetNotificationSettingsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppNotificationUpdatenotificationsettingsPutAsync(UpdateNotificationSettingsInput body)
        {
            return ApiServicesAppNotificationUpdatenotificationsettingsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppNotificationUpdatenotificationsettingsPutAsync(UpdateNotificationSettingsInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/UpdateNotificationSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppNotificationDeletenotificationDeleteAsync(System.Guid? id)
        {
            return ApiServicesAppNotificationDeletenotificationDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppNotificationDeletenotificationDeleteAsync(System.Guid? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/DeleteNotification?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppNotificationDeleteallusernotificationsDeleteAsync(UserNotificationState? state, DateTimeOffset? startDate, DateTimeOffset? endDate)
        {
            return ApiServicesAppNotificationDeleteallusernotificationsDeleteAsync(state, startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppNotificationDeleteallusernotificationsDeleteAsync(UserNotificationState? state, DateTimeOffset? startDate, DateTimeOffset? endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Notification/DeleteAllUserNotifications?");
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("State") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all warehouse order cost rules
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfOrderCostRuleDto>> ApiServicesAppOrdercostruleGetallordercostrulesGetAsync(int? customerTenantId, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppOrdercostruleGetallordercostrulesGetAsync(customerTenantId, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all warehouse order cost rules
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfOrderCostRuleDto>> ApiServicesAppOrdercostruleGetallordercostrulesGetAsync(int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderCostRule/GetAllOrderCostRules?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfOrderCostRuleDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get warehouse order cost rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<OrderCostRuleDto>> ApiServicesAppOrdercostruleGetordercostrulebyidGetAsync(int? ruleId)
        {
            return ApiServicesAppOrdercostruleGetordercostrulebyidGetAsync(ruleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse order cost rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<OrderCostRuleDto>> ApiServicesAppOrdercostruleGetordercostrulebyidGetAsync(int? ruleId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderCostRule/GetOrderCostRuleById?");
            if (ruleId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ruleId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<OrderCostRuleDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update Order cost rule
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrdercostruleCreateorupdateordercostrulePostAsync(CreateOrUpdateOrderCostRuleInput body)
        {
            return ApiServicesAppOrdercostruleCreateorupdateordercostrulePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update Order cost rule
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrdercostruleCreateorupdateordercostrulePostAsync(CreateOrUpdateOrderCostRuleInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderCostRule/CreateOrUpdateOrderCostRule");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Order Cost Rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrdercostruleDeleteordercostruleDeleteAsync(int? ruleId)
        {
            return ApiServicesAppOrdercostruleDeleteordercostruleDeleteAsync(ruleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Order Cost Rule by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrdercostruleDeleteordercostruleDeleteAsync(int? ruleId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderCostRule/DeleteOrderCostRule?");
            if (ruleId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ruleId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of orders mappings
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Customer Tenant Id</param>
        /// <param name="saleChannelId">User Sales Channel Id</param>
        /// <param name="isCustom">Only show custom mappings If true</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfOrderMappingDto>> ApiServicesAppOrdermappingsGetGetAsync(int? logisticProviderId, int? customerTenantId, int? saleChannelId, bool? isCustom, string salesChannelOrderId, string orderNumber, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppOrdermappingsGetGetAsync(logisticProviderId, customerTenantId, saleChannelId, isCustom, salesChannelOrderId, orderNumber, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of orders mappings
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Customer Tenant Id</param>
        /// <param name="saleChannelId">User Sales Channel Id</param>
        /// <param name="isCustom">Only show custom mappings If true</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfOrderMappingDto>> ApiServicesAppOrdermappingsGetGetAsync(int? logisticProviderId, int? customerTenantId, int? saleChannelId, bool? isCustom, string salesChannelOrderId, string orderNumber, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderMappings/Get?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (saleChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SaleChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(saleChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isCustom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsCustom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isCustom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfOrderMappingDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update order Mapping
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrdermappingsUpdatePutAsync(int? logisticProviderId, long? salesChannelOrderId)
        {
            return ApiServicesAppOrdermappingsUpdatePutAsync(logisticProviderId, salesChannelOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update order Mapping
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrdermappingsUpdatePutAsync(int? logisticProviderId, long? salesChannelOrderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderMappings/Update?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Undo order Mapping
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrdermappingsUndoPutAsync(long? salesChannelOrderId)
        {
            return ApiServicesAppOrdermappingsUndoPutAsync(salesChannelOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Undo order Mapping
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrdermappingsUndoPutAsync(long? salesChannelOrderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderMappings/Undo?");
            if (salesChannelOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark order as paid, even when it is not
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrdermappingsMarkorderascustompaidPutAsync(long? salesChannelOrderId)
        {
            return ApiServicesAppOrdermappingsMarkorderascustompaidPutAsync(salesChannelOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark order as paid, even when it is not
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrdermappingsMarkorderascustompaidPutAsync(long? salesChannelOrderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderMappings/MarkOrderAsCustomPaid?");
            if (salesChannelOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order List as excel
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus)
        {
            return ApiServicesAppOrderreportGetorderlisttoexcelGetAsync(logisticProviderId, salesChannelId, fromDate, toDate, fromClosedDate, toClosedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeOrderTracking, status, lineItemName, lineItemSku, filter, trackingStatus, customerTenantId, sorting, maxResultCount, skipCount, mergeBundleLineItems, deliveryStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order List as excel
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderReport/GetOrderListToExcel?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromClosedDate") + "=").Append(System.Uri.EscapeDataString(fromClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToClosedDate") + "=").Append(System.Uri.EscapeDataString(toClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trackingStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TrackingStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeliveryStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order List as pdf
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttopdfGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus)
        {
            return ApiServicesAppOrderreportGetorderlisttopdfGetAsync(logisticProviderId, salesChannelId, fromDate, toDate, fromClosedDate, toClosedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeOrderTracking, status, lineItemName, lineItemSku, filter, trackingStatus, customerTenantId, sorting, maxResultCount, skipCount, mergeBundleLineItems, deliveryStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order List as pdf
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttopdfGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderReport/GetOrderListToPdf?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromClosedDate") + "=").Append(System.Uri.EscapeDataString(fromClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToClosedDate") + "=").Append(System.Uri.EscapeDataString(toClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trackingStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TrackingStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeliveryStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order List as NYCE Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttonyceexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus)
        {
            return ApiServicesAppOrderreportGetorderlisttonyceexcelGetAsync(logisticProviderId, salesChannelId, fromDate, toDate, fromClosedDate, toClosedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeOrderTracking, status, lineItemName, lineItemSku, filter, trackingStatus, customerTenantId, sorting, maxResultCount, skipCount, mergeBundleLineItems, deliveryStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order List as NYCE Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttonyceexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderReport/GetOrderListToNyceExcel?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromClosedDate") + "=").Append(System.Uri.EscapeDataString(fromClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToClosedDate") + "=").Append(System.Uri.EscapeDataString(toClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trackingStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TrackingStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeliveryStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order List as Ongoing Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoongoingexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus)
        {
            return ApiServicesAppOrderreportGetorderlisttoongoingexcelGetAsync(logisticProviderId, salesChannelId, fromDate, toDate, fromClosedDate, toClosedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeOrderTracking, status, lineItemName, lineItemSku, filter, trackingStatus, customerTenantId, sorting, maxResultCount, skipCount, mergeBundleLineItems, deliveryStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order List as Ongoing Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoongoingexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderReport/GetOrderListToOngoingExcel?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromClosedDate") + "=").Append(System.Uri.EscapeDataString(fromClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToClosedDate") + "=").Append(System.Uri.EscapeDataString(toClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trackingStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TrackingStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeliveryStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order List as Shiphero Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoshipheroexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus)
        {
            return ApiServicesAppOrderreportGetorderlisttoshipheroexcelGetAsync(logisticProviderId, salesChannelId, fromDate, toDate, fromClosedDate, toClosedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeOrderTracking, status, lineItemName, lineItemSku, filter, trackingStatus, customerTenantId, sorting, maxResultCount, skipCount, mergeBundleLineItems, deliveryStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order List as Shiphero Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoshipheroexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderReport/GetOrderListToShipheroExcel?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromClosedDate") + "=").Append(System.Uri.EscapeDataString(fromClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToClosedDate") + "=").Append(System.Uri.EscapeDataString(toClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trackingStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TrackingStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeliveryStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order List as Profulfilment Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoprofulfilmentexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus)
        {
            return ApiServicesAppOrderreportGetorderlisttoprofulfilmentexcelGetAsync(logisticProviderId, salesChannelId, fromDate, toDate, fromClosedDate, toClosedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeOrderTracking, status, lineItemName, lineItemSku, filter, trackingStatus, customerTenantId, sorting, maxResultCount, skipCount, mergeBundleLineItems, deliveryStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order List as Profulfilment Format
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppOrderreportGetorderlisttoprofulfilmentexcelGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrderReport/GetOrderListToProfulfilmentExcel?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromClosedDate") + "=").Append(System.Uri.EscapeDataString(fromClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToClosedDate") + "=").Append(System.Uri.EscapeDataString(toClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trackingStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TrackingStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeliveryStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfOrganizationUnitDto>> ApiServicesAppOrganizationunitGetorganizationunitsGetAsync()
        {
            return ApiServicesAppOrganizationunitGetorganizationunitsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfOrganizationUnitDto>> ApiServicesAppOrganizationunitGetorganizationunitsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/GetOrganizationUnits");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfOrganizationUnitDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfOrganizationUnitUserListDto>> ApiServicesAppOrganizationunitGetorganizationunitusersGetAsync(long? id, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppOrganizationunitGetorganizationunitusersGetAsync(id, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfOrganizationUnitUserListDto>> ApiServicesAppOrganizationunitGetorganizationunitusersGetAsync(long? id, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfOrganizationUnitUserListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfOrganizationUnitRoleListDto>> ApiServicesAppOrganizationunitGetorganizationunitrolesGetAsync(long? id, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppOrganizationunitGetorganizationunitrolesGetAsync(id, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfOrganizationUnitRoleListDto>> ApiServicesAppOrganizationunitGetorganizationunitrolesGetAsync(long? id, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/GetOrganizationUnitRoles?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfOrganizationUnitRoleListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<OrganizationUnitDto>> ApiServicesAppOrganizationunitCreateorganizationunitPostAsync(CreateOrganizationUnitInput body)
        {
            return ApiServicesAppOrganizationunitCreateorganizationunitPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<OrganizationUnitDto>> ApiServicesAppOrganizationunitCreateorganizationunitPostAsync(CreateOrganizationUnitInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/CreateOrganizationUnit");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<OrganizationUnitDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<OrganizationUnitDto>> ApiServicesAppOrganizationunitUpdateorganizationunitPutAsync(UpdateOrganizationUnitInput body)
        {
            return ApiServicesAppOrganizationunitUpdateorganizationunitPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<OrganizationUnitDto>> ApiServicesAppOrganizationunitUpdateorganizationunitPutAsync(UpdateOrganizationUnitInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/UpdateOrganizationUnit");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<OrganizationUnitDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<OrganizationUnitDto>> ApiServicesAppOrganizationunitMoveorganizationunitPostAsync(MoveOrganizationUnitInput body)
        {
            return ApiServicesAppOrganizationunitMoveorganizationunitPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<OrganizationUnitDto>> ApiServicesAppOrganizationunitMoveorganizationunitPostAsync(MoveOrganizationUnitInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/MoveOrganizationUnit");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<OrganizationUnitDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrganizationunitDeleteorganizationunitDeleteAsync(long? id)
        {
            return ApiServicesAppOrganizationunitDeleteorganizationunitDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrganizationunitDeleteorganizationunitDeleteAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/DeleteOrganizationUnit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrganizationunitRemoveuserfromorganizationunitDeleteAsync(long? userId, long? organizationUnitId)
        {
            return ApiServicesAppOrganizationunitRemoveuserfromorganizationunitDeleteAsync(userId, organizationUnitId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrganizationunitRemoveuserfromorganizationunitDeleteAsync(long? userId, long? organizationUnitId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?");
            if (userId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organizationUnitId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrganizationUnitId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organizationUnitId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrganizationunitRemoverolefromorganizationunitDeleteAsync(int? roleId, long? organizationUnitId)
        {
            return ApiServicesAppOrganizationunitRemoverolefromorganizationunitDeleteAsync(roleId, organizationUnitId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrganizationunitRemoverolefromorganizationunitDeleteAsync(int? roleId, long? organizationUnitId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/RemoveRoleFromOrganizationUnit?");
            if (roleId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("RoleId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organizationUnitId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrganizationUnitId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organizationUnitId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrganizationunitAdduserstoorganizationunitPostAsync(UsersToOrganizationUnitInput body)
        {
            return ApiServicesAppOrganizationunitAdduserstoorganizationunitPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrganizationunitAdduserstoorganizationunitPostAsync(UsersToOrganizationUnitInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppOrganizationunitAddrolestoorganizationunitPostAsync(RolesToOrganizationUnitInput body)
        {
            return ApiServicesAppOrganizationunitAddrolestoorganizationunitPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppOrganizationunitAddrolestoorganizationunitPostAsync(RolesToOrganizationUnitInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/AddRolesToOrganizationUnit");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfNameValueDto>> ApiServicesAppOrganizationunitFindusersPostAsync(FindOrganizationUnitUsersInput body)
        {
            return ApiServicesAppOrganizationunitFindusersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfNameValueDto>> ApiServicesAppOrganizationunitFindusersPostAsync(FindOrganizationUnitUsersInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/FindUsers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfNameValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfNameValueDto>> ApiServicesAppOrganizationunitFindrolesPostAsync(FindOrganizationUnitRolesInput body)
        {
            return ApiServicesAppOrganizationunitFindrolesPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfNameValueDto>> ApiServicesAppOrganizationunitFindrolesPostAsync(FindOrganizationUnitRolesInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/OrganizationUnit/FindRoles");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfNameValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PaymentInfoDto>> ApiServicesAppPaymentGetpaymentinfoGetAsync(int? upgradeEditionId)
        {
            return ApiServicesAppPaymentGetpaymentinfoGetAsync(upgradeEditionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PaymentInfoDto>> ApiServicesAppPaymentGetpaymentinfoGetAsync(int? upgradeEditionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/GetPaymentInfo?");
            if (upgradeEditionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UpgradeEditionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upgradeEditionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PaymentInfoDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<long>> ApiServicesAppPaymentCreatepaymentPostAsync(CreatePaymentDto body)
        {
            return ApiServicesAppPaymentCreatepaymentPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<long>> ApiServicesAppPaymentCreatepaymentPostAsync(CreatePaymentDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/CreatePayment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<long>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentCancelpaymentPostAsync(CancelPaymentDto body)
        {
            return ApiServicesAppPaymentCancelpaymentPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentCancelpaymentPostAsync(CancelPaymentDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/CancelPayment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSubscriptionPaymentListDto>> ApiServicesAppPaymentGetpaymenthistoryGetAsync(string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppPaymentGetpaymenthistoryGetAsync(sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSubscriptionPaymentListDto>> ApiServicesAppPaymentGetpaymenthistoryGetAsync(string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/GetPaymentHistory?");
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSubscriptionPaymentListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<PaymentGatewayModel>>> ApiServicesAppPaymentGetactivegatewaysGetAsync(bool? recurringPaymentsEnabled)
        {
            return ApiServicesAppPaymentGetactivegatewaysGetAsync(recurringPaymentsEnabled, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<PaymentGatewayModel>>> ApiServicesAppPaymentGetactivegatewaysGetAsync(bool? recurringPaymentsEnabled, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/GetActiveGateways?");
            if (recurringPaymentsEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("RecurringPaymentsEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recurringPaymentsEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<PaymentGatewayModel>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SubscriptionPaymentDto>> ApiServicesAppPaymentGetpaymentGetAsync(long? paymentId)
        {
            return ApiServicesAppPaymentGetpaymentGetAsync(paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SubscriptionPaymentDto>> ApiServicesAppPaymentGetpaymentGetAsync(long? paymentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/GetPayment?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SubscriptionPaymentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SubscriptionPaymentDto>> ApiServicesAppPaymentGetlastcompletedpaymentGetAsync()
        {
            return ApiServicesAppPaymentGetlastcompletedpaymentGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SubscriptionPaymentDto>> ApiServicesAppPaymentGetlastcompletedpaymentGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/GetLastCompletedPayment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SubscriptionPaymentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentBuynowsucceedPostAsync(long? paymentId)
        {
            return ApiServicesAppPaymentBuynowsucceedPostAsync(paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentBuynowsucceedPostAsync(long? paymentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/BuyNowSucceed?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentNewregistrationsucceedPostAsync(long? paymentId)
        {
            return ApiServicesAppPaymentNewregistrationsucceedPostAsync(paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentNewregistrationsucceedPostAsync(long? paymentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/NewRegistrationSucceed?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentUpgradesucceedPostAsync(long? paymentId)
        {
            return ApiServicesAppPaymentUpgradesucceedPostAsync(paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentUpgradesucceedPostAsync(long? paymentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/UpgradeSucceed?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentExtendsucceedPostAsync(long? paymentId)
        {
            return ApiServicesAppPaymentExtendsucceedPostAsync(paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentExtendsucceedPostAsync(long? paymentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/ExtendSucceed?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentPaymentfailedPostAsync(long? paymentId)
        {
            return ApiServicesAppPaymentPaymentfailedPostAsync(paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentPaymentfailedPostAsync(long? paymentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/PaymentFailed?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentSwitchbetweenfreeeditionsPostAsync(int? upgradeEditionId)
        {
            return ApiServicesAppPaymentSwitchbetweenfreeeditionsPostAsync(upgradeEditionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentSwitchbetweenfreeeditionsPostAsync(int? upgradeEditionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/SwitchBetweenFreeEditions?");
            if (upgradeEditionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("upgradeEditionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upgradeEditionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaymentUpgradesubscriptioncostslessthenminamountPostAsync(int? editionId)
        {
            return ApiServicesAppPaymentUpgradesubscriptioncostslessthenminamountPostAsync(editionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaymentUpgradesubscriptioncostslessthenminamountPostAsync(int? editionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/UpgradeSubscriptionCostsLessThenMinAmount?");
            if (editionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("editionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(editionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<bool>> ApiServicesAppPaymentHasanypaymentPostAsync()
        {
            return ApiServicesAppPaymentHasanypaymentPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<bool>> ApiServicesAppPaymentHasanypaymentPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Payment/HasAnyPayment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPaypalpaymentConfirmpaymentPostAsync(long? paymentId, string paypalOrderId)
        {
            return ApiServicesAppPaypalpaymentConfirmpaymentPostAsync(paymentId, paypalOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPaypalpaymentConfirmpaymentPostAsync(long? paymentId, string paypalOrderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PayPalPayment/ConfirmPayment?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paypalOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paypalOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paypalOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PayPalConfigurationDto>> ApiServicesAppPaypalpaymentGetconfigurationGetAsync()
        {
            return ApiServicesAppPaypalpaymentGetconfigurationGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PayPalConfigurationDto>> ApiServicesAppPaypalpaymentGetconfigurationGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PayPalPayment/GetConfiguration");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PayPalConfigurationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfFlatPermissionWithLevelDto>> ApiServicesAppPermissionGetallpermissionsGetAsync()
        {
            return ApiServicesAppPermissionGetallpermissionsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfFlatPermissionWithLevelDto>> ApiServicesAppPermissionGetallpermissionsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Permission/GetAllPermissions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfFlatPermissionWithLevelDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Install PrestaShop sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppPrestashopInstallprestashopPostAsync(InstallPrestaShopInput body)
        {
            return ApiServicesAppPrestashopInstallprestashopPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Install PrestaShop sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppPrestashopInstallprestashopPostAsync(InstallPrestaShopInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrestaShop/InstallPrestaShop");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPrestashophookPostAsync(PrestaShopHookInput body)
        {
            return ApiServicesAppPrestashophookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPrestashophookPostAsync(PrestaShopHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrestaShopHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All logistic Providers.
        /// <br/>Only available for Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<LogisticProvidersDto>>> ApiServicesAppPrimepenguinadmincommonGetallexternallogisticprovidersGetAsync()
        {
            return ApiServicesAppPrimepenguinadmincommonGetallexternallogisticprovidersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All logistic Providers.
        /// <br/>Only available for Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<LogisticProvidersDto>>> ApiServicesAppPrimepenguinadmincommonGetallexternallogisticprovidersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/GetAllExternalLogisticProviders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<LogisticProvidersDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of all available Logistic Provider
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppPrimepenguinadmincommonGetalllogisticprovidersGetAsync()
        {
            return ApiServicesAppPrimepenguinadmincommonGetalllogisticprovidersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of all available Logistic Provider
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppPrimepenguinadmincommonGetalllogisticprovidersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/GetAllLogisticProviders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All eshops
        /// <br/>Only available for Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>> ApiServicesAppPrimepenguinadmincommonGetalleshopsGetAsync()
        {
            return ApiServicesAppPrimepenguinadmincommonGetalleshopsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All eshops
        /// <br/>Only available for Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>> ApiServicesAppPrimepenguinadmincommonGetalleshopsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/GetAllEshops");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return list of all Prime Penguin tenants
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfNameIdDto>> ApiServicesAppPrimepenguinadmincommonGetalltenantidnameGetAsync(bool? onlySharpTenants)
        {
            return ApiServicesAppPrimepenguinadmincommonGetalltenantidnameGetAsync(onlySharpTenants, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return list of all Prime Penguin tenants
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfNameIdDto>> ApiServicesAppPrimepenguinadmincommonGetalltenantidnameGetAsync(bool? onlySharpTenants, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/GetAllTenantIdName?");
            if (onlySharpTenants != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlySharpTenants") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlySharpTenants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfNameIdDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All eshops which does not have any contract with Logistics Provider.
        /// <br/>Only available for Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>> ApiServicesAppPrimepenguinadmincommonGeteshopwithnocontractforlogisticproviderGetAsync(int? logisticProviderId)
        {
            return ApiServicesAppPrimepenguinadmincommonGeteshopwithnocontractforlogisticproviderGetAsync(logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All eshops which does not have any contract with Logistics Provider.
        /// <br/>Only available for Admin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>> ApiServicesAppPrimepenguinadmincommonGeteshopwithnocontractforlogisticproviderGetAsync(int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/GetEshopWithNoContractForLogisticProvider?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of installed Logistic Provider by Customer Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppPrimepenguinadmincommonGetallinstalledlogisticproviderforcustomerGetAsync(int? customerTenantId)
        {
            return ApiServicesAppPrimepenguinadmincommonGetallinstalledlogisticproviderforcustomerGetAsync(customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of installed Logistic Provider by Customer Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppPrimepenguinadmincommonGetallinstalledlogisticproviderforcustomerGetAsync(int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/GetAllInstalledLogisticProviderForCustomer?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send general notification
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPrimepenguinadmincommonSendgeneralnotificationPostAsync(SendGeneralNotificationInput body)
        {
            return ApiServicesAppPrimepenguinadmincommonSendgeneralnotificationPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send general notification
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPrimepenguinadmincommonSendgeneralnotificationPostAsync(SendGeneralNotificationInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/SendGeneralNotification");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Demo sales channel account for impersonation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<NameIdDto>> ApiServicesAppPrimepenguinadmincommonGetuserinfofordemoGetAsync()
        {
            return ApiServicesAppPrimepenguinadmincommonGetuserinfofordemoGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Demo sales channel account for impersonation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<NameIdDto>> ApiServicesAppPrimepenguinadmincommonGetuserinfofordemoGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinAdminCommon/GetUserInfoForDemo");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<NameIdDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Receieve/Request an offer from Logistic Provider
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPrimepenguincommonReceivelogisticproviderofferPostAsync(string logisticProviderName)
        {
            return ApiServicesAppPrimepenguincommonReceivelogisticproviderofferPostAsync(logisticProviderName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receieve/Request an offer from Logistic Provider
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPrimepenguincommonReceivelogisticproviderofferPostAsync(string logisticProviderName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/ReceiveLogisticProviderOffer?");
            if (logisticProviderName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Receieve/Request an offer for Prime Penguin Enterprise Edition
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPrimepenguincommonReceiveenterpriseeditionofferPostAsync()
        {
            return ApiServicesAppPrimepenguincommonReceiveenterpriseeditionofferPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receieve/Request an offer for Prime Penguin Enterprise Edition
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPrimepenguincommonReceiveenterpriseeditionofferPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/ReceiveEnterpriseEditionOffer");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Request PrimePenguin Support
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPrimepenguincommonSupportPostAsync(SupportFormInput body)
        {
            return ApiServicesAppPrimepenguincommonSupportPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request PrimePenguin Support
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPrimepenguincommonSupportPostAsync(SupportFormInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/Support");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send Email Invites
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<NameValueOfString>> ApiServicesAppPrimepenguincommonSendinvitePostAsync(IEnumerable<string> body)
        {
            return ApiServicesAppPrimepenguincommonSendinvitePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send Email Invites
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<NameValueOfString>> ApiServicesAppPrimepenguincommonSendinvitePostAsync(IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/SendInvite");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<NameValueOfString>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfLogisticProviderMasterDto>> ApiServicesAppPrimepenguincommonGetlogisticprovidermastersGetAsync()
        {
            return ApiServicesAppPrimepenguincommonGetlogisticprovidermastersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfLogisticProviderMasterDto>> ApiServicesAppPrimepenguincommonGetlogisticprovidermastersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/GetLogisticProviderMasters");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfLogisticProviderMasterDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Logistic Provider Customers
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>> ApiServicesAppPrimepenguincommonGetlogisticprovidercustomersGetAsync(int? logisticProviderId)
        {
            return ApiServicesAppPrimepenguincommonGetlogisticprovidercustomersGetAsync(logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Logistic Provider Customers
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>> ApiServicesAppPrimepenguincommonGetlogisticprovidercustomersGetAsync(int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/GetLogisticProviderCustomers?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<LogisticProviderCustomerTenantIdNameDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPrimepenguincommonSyncproducttowarehousePostAsync(int? salesChannelProductId)
        {
            return ApiServicesAppPrimepenguincommonSyncproducttowarehousePostAsync(salesChannelProductId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPrimepenguincommonSyncproducttowarehousePostAsync(int? salesChannelProductId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/SyncProductToWarehouse?");
            if (salesChannelProductId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelProductId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPrimepenguincommonSyncordertowarehousePostAsync(int? salesChannelOrderId)
        {
            return ApiServicesAppPrimepenguincommonSyncordertowarehousePostAsync(salesChannelOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPrimepenguincommonSyncordertowarehousePostAsync(int? salesChannelOrderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PrimePenguinCommon/SyncOrderToWarehouse?");
            if (salesChannelOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets all Product Mapping by SalesChannel Id.
        /// <br/>Only to be used internally by PrimePenguin
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop) | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="filter">Filter by Variant Id Or SKU</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfProductMappingDto>> ApiServicesAppProductmappingGetproductmappingsGetAsync(int? customerTenantId, int? salesChannelId, int? logisticProviderId, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppProductmappingGetproductmappingsGetAsync(customerTenantId, salesChannelId, logisticProviderId, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Product Mapping by SalesChannel Id.
        /// <br/>Only to be used internally by PrimePenguin
        /// </summary>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop) | Sorting Parameter</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="filter">Filter by Variant Id Or SKU</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfProductMappingDto>> ApiServicesAppProductmappingGetproductmappingsGetAsync(int? customerTenantId, int? salesChannelId, int? logisticProviderId, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ProductMapping/GetProductMappings?");
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfProductMappingDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add/Update/Remove Product Mapping
        /// <br/>Supply all the mappings. Previous mapping for the product variant will be removed.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProductmappingAddupdateproductmappingsPostAsync(IEnumerable<AddUpdateProductMappingsInput> body)
        {
            return ApiServicesAppProductmappingAddupdateproductmappingsPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add/Update/Remove Product Mapping
        /// <br/>Supply all the mappings. Previous mapping for the product variant will be removed.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProductmappingAddupdateproductmappingsPostAsync(IEnumerable<AddUpdateProductMappingsInput> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ProductMapping/AddUpdateProductMappings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark Default mappings for all product variants of eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProductmappingMarkdefaultlogisticproviderPostAsync(int? logisticProviderId, int? salesChannelId)
        {
            return ApiServicesAppProductmappingMarkdefaultlogisticproviderPostAsync(logisticProviderId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark Default mappings for all product variants of eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProductmappingMarkdefaultlogisticproviderPostAsync(int? logisticProviderId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ProductMapping/MarkDefaultLogisticProvider?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Conditional mappings for all product variants of eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProductmappingMarkconditionallogisticproviderPostAsync(ConditionalProductMappingInput body)
        {
            return ApiServicesAppProductmappingMarkconditionallogisticproviderPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Conditional mappings for all product variants of eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProductmappingMarkconditionallogisticproviderPostAsync(ConditionalProductMappingInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ProductMapping/MarkConditionalLogisticProvider");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<CurrentUserProfileEditDto>> ApiServicesAppProfileGetcurrentuserprofileforeditGetAsync()
        {
            return ApiServicesAppProfileGetcurrentuserprofileforeditGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<CurrentUserProfileEditDto>> ApiServicesAppProfileGetcurrentuserprofileforeditGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/GetCurrentUserProfileForEdit");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<CurrentUserProfileEditDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfileDisablegoogleauthenticatorPostAsync()
        {
            return ApiServicesAppProfileDisablegoogleauthenticatorPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfileDisablegoogleauthenticatorPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/DisableGoogleAuthenticator");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<UpdateGoogleAuthenticatorKeyOutput>> ApiServicesAppProfileUpdategoogleauthenticatorkeyPutAsync()
        {
            return ApiServicesAppProfileUpdategoogleauthenticatorkeyPutAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<UpdateGoogleAuthenticatorKeyOutput>> ApiServicesAppProfileUpdategoogleauthenticatorkeyPutAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/UpdateGoogleAuthenticatorKey");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<UpdateGoogleAuthenticatorKeyOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfileSendverificationsmsPostAsync(SendVerificationSmsInputDto body)
        {
            return ApiServicesAppProfileSendverificationsmsPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfileSendverificationsmsPostAsync(SendVerificationSmsInputDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/SendVerificationSms");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfileVerifysmscodePostAsync(VerifySmsCodeInputDto body)
        {
            return ApiServicesAppProfileVerifysmscodePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfileVerifysmscodePostAsync(VerifySmsCodeInputDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/VerifySmsCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfilePreparecollecteddataPostAsync()
        {
            return ApiServicesAppProfilePreparecollecteddataPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfilePreparecollecteddataPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/PrepareCollectedData");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfileUpdatecurrentuserprofilePutAsync(CurrentUserProfileEditDto body)
        {
            return ApiServicesAppProfileUpdatecurrentuserprofilePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfileUpdatecurrentuserprofilePutAsync(CurrentUserProfileEditDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/UpdateCurrentUserProfile");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfileChangepasswordPostAsync(ChangePasswordInput body)
        {
            return ApiServicesAppProfileChangepasswordPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfileChangepasswordPostAsync(ChangePasswordInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/ChangePassword");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfileUpdateprofilepicturePutAsync(UpdateProfilePictureInput body)
        {
            return ApiServicesAppProfileUpdateprofilepicturePutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfileUpdateprofilepicturePutAsync(UpdateProfilePictureInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/UpdateProfilePicture");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetPasswordComplexitySettingOutput>> ApiServicesAppProfileGetpasswordcomplexitysettingGetAsync()
        {
            return ApiServicesAppProfileGetpasswordcomplexitysettingGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetPasswordComplexitySettingOutput>> ApiServicesAppProfileGetpasswordcomplexitysettingGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/GetPasswordComplexitySetting");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetPasswordComplexitySettingOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetprofilepictureGetAsync()
        {
            return ApiServicesAppProfileGetprofilepictureGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetprofilepictureGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/GetProfilePicture");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetProfilePictureOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetprofilepicturebyusernameGetAsync(string username)
        {
            return ApiServicesAppProfileGetprofilepicturebyusernameGetAsync(username, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetprofilepicturebyusernameGetAsync(string username, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/GetProfilePictureByUserName?");
            if (username != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetProfilePictureOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetfriendprofilepictureGetAsync(long? userId, int? tenantId)
        {
            return ApiServicesAppProfileGetfriendprofilepictureGetAsync(userId, tenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetfriendprofilepictureGetAsync(long? userId, int? tenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/GetFriendProfilePicture?");
            if (userId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetProfilePictureOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetprofilepicturebyuserGetAsync(long? userId)
        {
            return ApiServicesAppProfileGetprofilepicturebyuserGetAsync(userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetProfilePictureOutput>> ApiServicesAppProfileGetprofilepicturebyuserGetAsync(long? userId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/GetProfilePictureByUser?");
            if (userId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetProfilePictureOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppProfileChangelanguagePostAsync(ChangeUserLanguageDto body)
        {
            return ApiServicesAppProfileChangelanguagePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppProfileChangelanguagePostAsync(ChangeUserLanguageDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Profile/ChangeLanguage");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of purchase orders from WMS
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="purchaseOrderId">System Id of Purchase Order</param>
        /// <param name="status">Filter by Purchase Order Status | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfPurchaseOrderDto>> ApiServicesAppPurchaseorderGetpurchaseordersGetAsync(int? logisticProviderId, int? customerTenantId, int? purchaseOrderId, string status, string orderNumber, string batchNumber, string invoiceNumber, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppPurchaseorderGetpurchaseordersGetAsync(logisticProviderId, customerTenantId, purchaseOrderId, status, orderNumber, batchNumber, invoiceNumber, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of purchase orders from WMS
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="purchaseOrderId">System Id of Purchase Order</param>
        /// <param name="status">Filter by Purchase Order Status | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfPurchaseOrderDto>> ApiServicesAppPurchaseorderGetpurchaseordersGetAsync(int? logisticProviderId, int? customerTenantId, int? purchaseOrderId, string status, string orderNumber, string batchNumber, string invoiceNumber, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PurchaseOrder/GetPurchaseOrders?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (purchaseOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PurchaseOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purchaseOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (batchNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BatchNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(batchNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("InvoiceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfPurchaseOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of Purchase Orders between Dates
        /// </summary>
        /// <param name="from">Filter Goods Planning by CreatedAt (From Date)</param>
        /// <param name="to">Filter Goods Planning by CreatedAt (To Date)</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfPurchaseOrderDto>> ApiServicesAppPurchaseorderGetpurchaseordersbetweenGetAsync(DateTimeOffset from, DateTimeOffset to, int? logisticProviderId)
        {
            return ApiServicesAppPurchaseorderGetpurchaseordersbetweenGetAsync(from, to, logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of Purchase Orders between Dates
        /// </summary>
        /// <param name="from">Filter Goods Planning by CreatedAt (From Date)</param>
        /// <param name="to">Filter Goods Planning by CreatedAt (To Date)</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfPurchaseOrderDto>> ApiServicesAppPurchaseorderGetpurchaseordersbetweenGetAsync(DateTimeOffset from, DateTimeOffset to, int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PurchaseOrder/GetPurchaseOrdersBetween?");
            urlBuilder_.Append(System.Uri.EscapeDataString("From") + "=").Append(System.Uri.EscapeDataString(from.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("To") + "=").Append(System.Uri.EscapeDataString(to.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfPurchaseOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update Purchase order in WMS
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPurchaseorderCreateorupdatepurchaseorderPostAsync(bool? notifyByEmail, CreateUpdatePurchaseOrderDto body)
        {
            return ApiServicesAppPurchaseorderCreateorupdatepurchaseorderPostAsync(notifyByEmail, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update Purchase order in WMS
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPurchaseorderCreateorupdatepurchaseorderPostAsync(bool? notifyByEmail, CreateUpdatePurchaseOrderDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PurchaseOrder/CreateOrUpdatePurchaseOrder?");
            if (notifyByEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notifyByEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notifyByEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Purchase order in WMS
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppPurchaseorderDeletepurchaseorderDeleteAsync(int? purchaseOrderId)
        {
            return ApiServicesAppPurchaseorderDeletepurchaseorderDeleteAsync(purchaseOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Purchase order in WMS
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppPurchaseorderDeletepurchaseorderDeleteAsync(int? purchaseOrderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PurchaseOrder/DeletePurchaseOrder?");
            if (purchaseOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purchaseOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purchaseOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check if Logistic Partner has Active connection for warehouse
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<bool>> ApiServicesAppPurchaseorderHasactivewarehouseconnectionforpurchaseorderPostAsync(int? logisticProviderId)
        {
            return ApiServicesAppPurchaseorderHasactivewarehouseconnectionforpurchaseorderPostAsync(logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if Logistic Partner has Active connection for warehouse
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<bool>> ApiServicesAppPurchaseorderHasactivewarehouseconnectionforpurchaseorderPostAsync(int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/PurchaseOrder/HasActiveWarehouseConnectionForPurchaseOrder?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Connect Quickbutik sales channel
        /// </summary>
        /// <param name="body">quickbutik input</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppQuickbutikInstallquickbutikPostAsync(InstallQuickbutikInput body)
        {
            return ApiServicesAppQuickbutikInstallquickbutikPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Connect Quickbutik sales channel
        /// </summary>
        /// <param name="body">quickbutik input</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppQuickbutikInstallquickbutikPostAsync(InstallQuickbutikInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Quickbutik/InstallQuickbutik");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Webhook security hash for Quickbutik
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<string>> ApiServicesAppQuickbutikGetsecurityhashGetAsync(int? salesChannelId)
        {
            return ApiServicesAppQuickbutikGetsecurityhashGetAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Webhook security hash for Quickbutik
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<string>> ApiServicesAppQuickbutikGetsecurityhashGetAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Quickbutik/GetSecurityHash?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Webhook security hash for Quickbutik
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppQuickbutikUpdatesecurityhashPutAsync(int? salesChannelId, string securityHash)
        {
            return ApiServicesAppQuickbutikUpdatesecurityhashPutAsync(salesChannelId, securityHash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Webhook security hash for Quickbutik
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppQuickbutikUpdatesecurityhashPutAsync(int? salesChannelId, string securityHash, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Quickbutik/UpdateSecurityHash?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityHash != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityHash") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityHash, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppQuickbutikhookPostAsync(QuickbutikHookInput body)
        {
            return ApiServicesAppQuickbutikhookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppQuickbutikhookPostAsync(QuickbutikHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/QuickbutikHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// process web hook
        /// </summary>
        /// <param name="order_id">order id of the order</param>
        /// <param name="event_type">type of event</param>
        /// <param name="securityhash">It makes sure webhooks come from the store with a secret key.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppQuickbutikhookProcessBySalechannelidGetAsync(string order_id, string product_id, string event_type, string securityhash, int saleChannelId)
        {
            return ApiServicesAppQuickbutikhookProcessBySalechannelidGetAsync(order_id, product_id, event_type, securityhash, saleChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// process web hook
        /// </summary>
        /// <param name="order_id">order id of the order</param>
        /// <param name="event_type">type of event</param>
        /// <param name="securityhash">It makes sure webhooks come from the store with a secret key.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppQuickbutikhookProcessBySalechannelidGetAsync(string order_id, string product_id, string event_type, string securityhash, int saleChannelId, System.Threading.CancellationToken cancellationToken)
        {
            if (saleChannelId == null)
                throw new System.ArgumentNullException("saleChannelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/QuickbutikHook/process/{saleChannelId}?");
            urlBuilder_.Replace("{saleChannelId}", System.Uri.EscapeDataString(ConvertToString(saleChannelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (order_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (product_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("product_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (event_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("event_type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(event_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityhash != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityhash") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityhash, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppQuickbutikhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppQuickbutikhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppQuickbutikhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/QuickbutikHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppQuickbutikhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppQuickbutikhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppQuickbutikhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/QuickbutikHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Return List as excel
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppReturnreportGetreturnlisttoexcelGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppReturnreportGetreturnlisttoexcelGetAsync(logisticProviderId, customerTenantId, salesChannelId, fromDate, toDate, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Return List as excel
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppReturnreportGetreturnlisttoexcelGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ReturnReport/GetReturnListToExcel?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Return List as pdf
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppReturnreportGetreturnlisttopdfGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppReturnreportGetreturnlisttopdfGetAsync(logisticProviderId, customerTenantId, salesChannelId, fromDate, toDate, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Return List as pdf
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppReturnreportGetreturnlisttopdfGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ReturnReport/GetReturnListToPdf?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfRoleListDto>> ApiServicesAppRoleGetrolesGetAsync(IEnumerable<string> permissions)
        {
            return ApiServicesAppRoleGetrolesGetAsync(permissions, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfRoleListDto>> ApiServicesAppRoleGetrolesGetAsync(IEnumerable<string> permissions, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Role/GetRoles?");
            if (permissions != null)
            {
                foreach (var item_ in permissions) { urlBuilder_.Append(System.Uri.EscapeDataString("Permissions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfRoleListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetRoleForEditOutput>> ApiServicesAppRoleGetroleforeditGetAsync(int? id)
        {
            return ApiServicesAppRoleGetroleforeditGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetRoleForEditOutput>> ApiServicesAppRoleGetroleforeditGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Role/GetRoleForEdit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetRoleForEditOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppRoleCreateorupdaterolePostAsync(CreateOrUpdateRoleInput body)
        {
            return ApiServicesAppRoleCreateorupdaterolePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppRoleCreateorupdaterolePostAsync(CreateOrUpdateRoleInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Role/CreateOrUpdateRole");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppRoleDeleteroleDeleteAsync(int? id)
        {
            return ApiServicesAppRoleDeleteroleDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppRoleDeleteroleDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Role/DeleteRole?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets list of all installed Sales Channel for a user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfInstalledSalesChannel>> ApiServicesAppSaleschannelInstalledsaleschannelsGetAsync()
        {
            return ApiServicesAppSaleschannelInstalledsaleschannelsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets list of all installed Sales Channel for a user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfInstalledSalesChannel>> ApiServicesAppSaleschannelInstalledsaleschannelsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/InstalledSalesChannels");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfInstalledSalesChannel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of installed Logistic Provider for the eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppSaleschannelInstalledlogisticprovidersGetAsync()
        {
            return ApiServicesAppSaleschannelInstalledlogisticprovidersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of installed Logistic Provider for the eshop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>> ApiServicesAppSaleschannelInstalledlogisticprovidersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/InstalledLogisticProviders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfInstalledLogisticProviderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get currency set by Logistic Partner for all costs in application
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<string>> ApiServicesAppSaleschannelGetlpcontractcurrencyGetAsync(int? logisticProviderId)
        {
            return ApiServicesAppSaleschannelGetlpcontractcurrencyGetAsync(logisticProviderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get currency set by Logistic Partner for all costs in application
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<string>> ApiServicesAppSaleschannelGetlpcontractcurrencyGetAsync(int? logisticProviderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/GetLpContractCurrency?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Checks the Installation Status of sales channel in PrimePenguin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<bool>> ApiServicesAppSaleschannelIssaleschannelinstalledGetAsync(string salesChannelName)
        {
            return ApiServicesAppSaleschannelIssaleschannelinstalledGetAsync(salesChannelName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks the Installation Status of sales channel in PrimePenguin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<bool>> ApiServicesAppSaleschannelIssaleschannelinstalledGetAsync(string salesChannelName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/IsSalesChannelInstalled?");
            if (salesChannelName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Dashboard information
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelDashboardDto>> ApiServicesAppSaleschannelDashboardGetAsync(int? salesChannelId)
        {
            return ApiServicesAppSaleschannelDashboardGetAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Dashboard information
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelDashboardDto>> ApiServicesAppSaleschannelDashboardGetAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/Dashboard?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelDashboardDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get installation status for all installed sales channels
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfSalesChannelInstallationStatusDto>> ApiServicesAppSaleschannelSaleschannelsinstallationstatusGetAsync(int? salesChannelId)
        {
            return ApiServicesAppSaleschannelSaleschannelsinstallationstatusGetAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get installation status for all installed sales channels
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfSalesChannelInstallationStatusDto>> ApiServicesAppSaleschannelSaleschannelsinstallationstatusGetAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/SalesChannelsInstallationStatus?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfSalesChannelInstallationStatusDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deactivate Sales Channel Integration
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelDeactivateintegrationPostAsync(int? salesChannelId)
        {
            return ApiServicesAppSaleschannelDeactivateintegrationPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate Sales Channel Integration
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelDeactivateintegrationPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/DeactivateIntegration?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check whether user is allowed to connect to more sales channels
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<bool>> ApiServicesAppSaleschannelIsallowedtoconnectmoresaleschannelGetAsync()
        {
            return ApiServicesAppSaleschannelIsallowedtoconnectmoresaleschannelGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check whether user is allowed to connect to more sales channels
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<bool>> ApiServicesAppSaleschannelIsallowedtoconnectmoresaleschannelGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/IsAllowedToConnectMoreSalesChannel");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Setup Demo Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelSetupdemosaleschannelPostAsync()
        {
            return ApiServicesAppSaleschannelSetupdemosaleschannelPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Setup Demo Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelSetupdemosaleschannelPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/SetupDemoSalesChannel");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update credentials of Sales Channel if existing details are invalid
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelUpdatesaleschannelcredentialsPutAsync(UpdateSalesChannelCredentialsDto body)
        {
            return ApiServicesAppSaleschannelUpdatesaleschannelcredentialsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update credentials of Sales Channel if existing details are invalid
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelUpdatesaleschannelcredentialsPutAsync(UpdateSalesChannelCredentialsDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/UpdateSalesChannelCredentials");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sync integration of sales channel
        /// </summary>
        /// <param name="id">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelSyncintegrationPostAsync(int? id)
        {
            return ApiServicesAppSaleschannelSyncintegrationPostAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sync integration of sales channel
        /// </summary>
        /// <param name="id">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelSyncintegrationPostAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/SyncIntegration?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sales channel default settings
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelUpdatesaleschannelsettingsPostAsync(SalesChannelSettingsDto body)
        {
            return ApiServicesAppSaleschannelUpdatesaleschannelsettingsPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sales channel default settings
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelUpdatesaleschannelsettingsPostAsync(SalesChannelSettingsDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/UpdateSalesChannelSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Sales channel default settings
        /// </summary>
        /// <param name="saleChannelId">request sale channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelSettingsDto>> ApiServicesAppSaleschannelGetsaleschanneldefaultsettingsGetAsync(int? saleChannelId)
        {
            return ApiServicesAppSaleschannelGetsaleschanneldefaultsettingsGetAsync(saleChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Sales channel default settings
        /// </summary>
        /// <param name="saleChannelId">request sale channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelSettingsDto>> ApiServicesAppSaleschannelGetsaleschanneldefaultsettingsGetAsync(int? saleChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/GetSalesChannelDefaultSettings?");
            if (saleChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("saleChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(saleChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelSettingsDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory location settings
        /// </summary>
        /// <param name="saleChannelId">request sale channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<SalesChannelLocationDto>>> ApiServicesAppSaleschannelGetinventorylocationsettingsGetAsync(int? saleChannelId)
        {
            return ApiServicesAppSaleschannelGetinventorylocationsettingsGetAsync(saleChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory location settings
        /// </summary>
        /// <param name="saleChannelId">request sale channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<SalesChannelLocationDto>>> ApiServicesAppSaleschannelGetinventorylocationsettingsGetAsync(int? saleChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/GetInventoryLocationSettings?");
            if (saleChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("saleChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(saleChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<SalesChannelLocationDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update sales channel location settings
        /// </summary>
        /// <param name="logisticProviderId">logistic provider id</param>
        /// <param name="locationId">location id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelUpdatesaleschannellocationsettingsPostAsync(int? logisticProviderId, int? locationId)
        {
            return ApiServicesAppSaleschannelUpdatesaleschannellocationsettingsPostAsync(logisticProviderId, locationId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update sales channel location settings
        /// </summary>
        /// <param name="logisticProviderId">logistic provider id</param>
        /// <param name="locationId">location id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelUpdatesaleschannellocationsettingsPostAsync(int? logisticProviderId, int? locationId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/UpdateSalesChannelLocationSettings?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Used to stop displaying webhook configuration alert on UI
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelClosewebhookconfigalertPostAsync(int? salesChannelId)
        {
            return ApiServicesAppSaleschannelClosewebhookconfigalertPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Used to stop displaying webhook configuration alert on UI
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelClosewebhookconfigalertPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/CloseWebhookConfigAlert?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Installed logistic provider coordinates
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<LogisticProviderCoordinates>>> ApiServicesAppSaleschannelGeinstalledlogisticprovidercoordinatesGetAsync()
        {
            return ApiServicesAppSaleschannelGeinstalledlogisticprovidercoordinatesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Installed logistic provider coordinates
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<LogisticProviderCoordinates>>> ApiServicesAppSaleschannelGeinstalledlogisticprovidercoordinatesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannel/GeInstalledLogisticProviderCoordinates");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<LogisticProviderCoordinates>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of orders from Sales Channel
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="orderId">External order id</param>
        /// <param name="includeLineItems">Boolean to include line items in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeRefunds">Boolean to include Refunds in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>> ApiServicesAppSaleschannelordersGetGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId, string orderId, bool? includeLineItems, bool? includeFulfillments, bool? includeRefunds, bool? includeShippingAddress, bool? includeOrderTracking, bool? mergeBundleLineItems, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppSaleschannelordersGetGetAsync(fromDate, toDate, salesChannelId, orderId, includeLineItems, includeFulfillments, includeRefunds, includeShippingAddress, includeOrderTracking, mergeBundleLineItems, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of orders from Sales Channel
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="orderId">External order id</param>
        /// <param name="includeLineItems">Boolean to include line items in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeRefunds">Boolean to include Refunds in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>> ApiServicesAppSaleschannelordersGetGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId, string orderId, bool? includeLineItems, bool? includeFulfillments, bool? includeRefunds, bool? includeShippingAddress, bool? includeOrderTracking, bool? mergeBundleLineItems, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrders/Get?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefunds != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeRefunds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefunds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get count of all the orders made in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppSaleschannelordersCountGetAsync(int? salesChannelId)
        {
            return ApiServicesAppSaleschannelordersCountGetAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get count of all the orders made in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppSaleschannelordersCountGetAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrders/Count?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single order by Id
        /// </summary>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelOrderDto>> ApiServicesAppSaleschannelordersGetbyidGetAsync(bool? mergeBundleLineItems, long? id, bool? includeChild)
        {
            return ApiServicesAppSaleschannelordersGetbyidGetAsync(mergeBundleLineItems, id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single order by Id
        /// </summary>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelOrderDto>> ApiServicesAppSaleschannelordersGetbyidGetAsync(bool? mergeBundleLineItems, long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrders/GetById?");
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get order fulfillment details by Order Id
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfSalesChannelFulfillmentDto>> ApiServicesAppSaleschannelordersFulfillmentsGetAsync(long orderId, int? salesChannelId)
        {
            return ApiServicesAppSaleschannelordersFulfillmentsGetAsync(orderId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get order fulfillment details by Order Id
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfSalesChannelFulfillmentDto>> ApiServicesAppSaleschannelordersFulfillmentsGetAsync(long orderId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrders/Fulfillments?");
            urlBuilder_.Append(System.Uri.EscapeDataString("OrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfSalesChannelFulfillmentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets order fulfillment counts in a sales channel order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppSaleschannelordersFulfillmentcountGetAsync(long? orderId, int? salesChannelId)
        {
            return ApiServicesAppSaleschannelordersFulfillmentcountGetAsync(orderId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets order fulfillment counts in a sales channel order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppSaleschannelordersFulfillmentcountGetAsync(long? orderId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrders/FulfillmentCount?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update sales channel order shipping Address | Persisted in PP Only
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelordersUpdatesaleschannelordershippingaddressPostAsync(UpdateSalesChannelOrderShippingAddressInput body)
        {
            return ApiServicesAppSaleschannelordersUpdatesaleschannelordershippingaddressPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update sales channel order shipping Address | Persisted in PP Only
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelordersUpdatesaleschannelordershippingaddressPostAsync(UpdateSalesChannelOrderShippingAddressInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrders/UpdateSalesChannelOrderShippingAddress");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add special delivery instructions and internal note to order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelordersAdddeliveryinstructionandnotetoorderPostAsync(AddDeliveryInstructionToOrderInput body)
        {
            return ApiServicesAppSaleschannelordersAdddeliveryinstructionandnotetoorderPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add special delivery instructions and internal note to order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelordersAdddeliveryinstructionandnotetoorderPostAsync(AddDeliveryInstructionToOrderInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrders/AddDeliveryInstructionAndNoteToOrder");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelordertrackingProcesshookPostAsync(string securityKey, AftershipWebhookResponse body)
        {
            return ApiServicesAppSaleschannelordertrackingProcesshookPostAsync(securityKey, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelordertrackingProcesshookPostAsync(string securityKey, AftershipWebhookResponse body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelOrderTracking/ProcessHook?");
            if (securityKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update a product or product variant
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelplatformCreateorupdateproductPostAsync(string shop, SalesChannelProductInput body)
        {
            return ApiServicesAppSaleschannelplatformCreateorupdateproductPostAsync(shop, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a product or product variant
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelplatformCreateorupdateproductPostAsync(string shop, SalesChannelProductInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelPlatform/CreateOrUpdateProduct?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a product
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelplatformDeleteproductDeleteAsync(string shop, string salesChannelProductId)
        {
            return ApiServicesAppSaleschannelplatformDeleteproductDeleteAsync(shop, salesChannelProductId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelplatformDeleteproductDeleteAsync(string shop, string salesChannelProductId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelPlatform/DeleteProduct?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelProductId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelProductId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update an order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelplatformCreateorupdateorderPostAsync(string shop, SalesChannelOrderInput body)
        {
            return ApiServicesAppSaleschannelplatformCreateorupdateorderPostAsync(shop, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update an order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelplatformCreateorupdateorderPostAsync(string shop, SalesChannelOrderInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelPlatform/CreateOrUpdateOrder?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelplatformDeleteorderDeleteAsync(string shop, string salesChannelOrderId)
        {
            return ApiServicesAppSaleschannelplatformDeleteorderDeleteAsync(shop, salesChannelOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelplatformDeleteorderDeleteAsync(string shop, string salesChannelOrderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelPlatform/DeleteOrder?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove integration for shop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSaleschannelplatformAppuninstallPostAsync(string shop)
        {
            return ApiServicesAppSaleschannelplatformAppuninstallPostAsync(shop, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove integration for shop
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSaleschannelplatformAppuninstallPostAsync(string shop, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelPlatform/AppUninstall?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets list of products from sales channel
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="includeProductVariants">Boolean to include product variants in result</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelProductDto>> ApiServicesAppSaleschannelproductsGetGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId, bool? includeProductVariants, bool? mergeBundleProducts, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppSaleschannelproductsGetGetAsync(fromDate, toDate, salesChannelId, includeProductVariants, mergeBundleProducts, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets list of products from sales channel
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="includeProductVariants">Boolean to include product variants in result</param>
        /// <param name="mergeBundleProducts">Replace bundle product with actual items of the bundle product</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelProductDto>> ApiServicesAppSaleschannelproductsGetGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId, bool? includeProductVariants, bool? mergeBundleProducts, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelProducts/Get?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProductVariants != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeProductVariants") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProductVariants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleProducts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProducts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProducts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get count of all the products available in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<int>> ApiServicesAppSaleschannelproductsCountGetAsync(int? salesChannelId)
        {
            return ApiServicesAppSaleschannelproductsCountGetAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get count of all the products available in Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<int>> ApiServicesAppSaleschannelproductsCountGetAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelProducts/Count?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Single Product by Id
        /// </summary>
        /// <param name="mergeBundleProduct">Replace bundle product with actual items of the bundle product</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppSaleschannelproductsGetbyidGetAsync(bool? mergeBundleProduct, long? id, bool? includeChild)
        {
            return ApiServicesAppSaleschannelproductsGetbyidGetAsync(mergeBundleProduct, id, includeChild, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Product by Id
        /// </summary>
        /// <param name="mergeBundleProduct">Replace bundle product with actual items of the bundle product</param>
        /// <param name="id">Entity Id</param>
        /// <param name="includeChild">Boolean to include all related child data in result</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelProductDto>> ApiServicesAppSaleschannelproductsGetbyidGetAsync(bool? mergeBundleProduct, long? id, bool? includeChild, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelProducts/GetById?");
            if (mergeBundleProduct != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleProduct") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleProduct, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelProductDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets brief list of product variants from sales channel
        /// </summary>
        /// <param name="id">Id of Product Variant</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfProductVariantMiniInformationDto>> ApiServicesAppSaleschannelproductsGetallvariantsGetAsync(long? id, DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId)
        {
            return ApiServicesAppSaleschannelproductsGetallvariantsGetAsync(id, fromDate, toDate, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets brief list of product variants from sales channel
        /// </summary>
        /// <param name="id">Id of Product Variant</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfProductVariantMiniInformationDto>> ApiServicesAppSaleschannelproductsGetallvariantsGetAsync(long? id, DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelProducts/GetAllVariants?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfProductVariantMiniInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets inventory history of product variant
        /// </summary>
        /// <param name="productVariantId">Entity Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfProductVariantInventoryHistoryDto>> ApiServicesAppSaleschannelproductsInventoryhistoryGetAsync(long? productVariantId, int? logisticProviderId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppSaleschannelproductsInventoryhistoryGetAsync(productVariantId, logisticProviderId, fromDate, toDate, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets inventory history of product variant
        /// </summary>
        /// <param name="productVariantId">Entity Id</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfProductVariantInventoryHistoryDto>> ApiServicesAppSaleschannelproductsInventoryhistoryGetAsync(long? productVariantId, int? logisticProviderId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SalesChannelProducts/InventoryHistory?");
            if (productVariantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductVariantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productVariantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfProductVariantInventoryHistoryDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check if Self managed store is enabled
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<bool>> ApiServicesAppSelfmanagedstoreIsselfmanagedstoreenabledPostAsync()
        {
            return ApiServicesAppSelfmanagedstoreIsselfmanagedstoreenabledPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if Self managed store is enabled
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<bool>> ApiServicesAppSelfmanagedstoreIsselfmanagedstoreenabledPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SelfManagedStore/IsSelfManagedStoreEnabled");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Self managed store is used to create and manage B2B orders
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSelfmanagedstoreEnableselfmanagedstorePostAsync()
        {
            return ApiServicesAppSelfmanagedstoreEnableselfmanagedstorePostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Self managed store is used to create and manage B2B orders
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSelfmanagedstoreEnableselfmanagedstorePostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SelfManagedStore/EnableSelfManagedStore");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create B2B order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSelfmanagedstoreCreateb2borderPostAsync(CreateUpdateB2BOrderInput body)
        {
            return ApiServicesAppSelfmanagedstoreCreateb2borderPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create B2B order
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSelfmanagedstoreCreateb2borderPostAsync(CreateUpdateB2BOrderInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SelfManagedStore/CreateB2BOrder");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update fulfillment status to cancel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSelfmanagedstoreCancelb2borderPostAsync(long? orderId)
        {
            return ApiServicesAppSelfmanagedstoreCancelb2borderPostAsync(orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update fulfillment status to cancel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSelfmanagedstoreCancelb2borderPostAsync(long? orderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SelfManagedStore/CancelB2BOrder?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the B2B order from Prime Penguin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSelfmanagedstoreDeleteb2borderDeleteAsync(long? orderId)
        {
            return ApiServicesAppSelfmanagedstoreDeleteb2borderDeleteAsync(orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the B2B order from Prime Penguin
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSelfmanagedstoreDeleteb2borderDeleteAsync(long? orderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SelfManagedStore/DeleteB2BOrder?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSelfmanagedstoreCreatestocktransferorderPostAsync(CreateUpdateStockTransferOrderInput body)
        {
            return ApiServicesAppSelfmanagedstoreCreatestocktransferorderPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSelfmanagedstoreCreatestocktransferorderPostAsync(CreateUpdateStockTransferOrderInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SelfManagedStore/CreateStockTransferOrder");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetCurrentLoginInformationsOutput>> ApiServicesAppSessionGetcurrentlogininformationsGetAsync()
        {
            return ApiServicesAppSessionGetcurrentlogininformationsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetCurrentLoginInformationsOutput>> ApiServicesAppSessionGetcurrentlogininformationsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Session/GetCurrentLoginInformations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetCurrentLoginInformationsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<UpdateUserSignInTokenOutput>> ApiServicesAppSessionUpdateusersignintokenPutAsync()
        {
            return ApiServicesAppSessionUpdateusersignintokenPutAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<UpdateUserSignInTokenOutput>> ApiServicesAppSessionUpdateusersignintokenPutAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Session/UpdateUserSignInToken");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<UpdateUserSignInTokenOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all shipment mappings
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfShipmentMappingResponse>> ApiServicesAppShipmentmappingGetallshipmentmappingsGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter)
        {
            return ApiServicesAppShipmentmappingGetallshipmentmappingsGetAsync(sorting, maxResultCount, skipCount, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all shipment mappings
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfShipmentMappingResponse>> ApiServicesAppShipmentmappingGetallshipmentmappingsGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShipmentMapping/GetAllShipmentMappings?");
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfShipmentMappingResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update(delete and create new) Shipping rule
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ShipmentMappingDto>> ApiServicesAppShipmentmappingCreateupdateshipmentmappingPostAsync(ShipmentMappingDto body)
        {
            return ApiServicesAppShipmentmappingCreateupdateshipmentmappingPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update(delete and create new) Shipping rule
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ShipmentMappingDto>> ApiServicesAppShipmentmappingCreateupdateshipmentmappingPostAsync(ShipmentMappingDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShipmentMapping/CreateUpdateShipmentMapping");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ShipmentMappingDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Shipment Mapping
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShipmentmappingDeleteshipmentmappingDeleteAsync(int? mappingId)
        {
            return ApiServicesAppShipmentmappingDeleteshipmentmappingDeleteAsync(mappingId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Shipment Mapping
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShipmentmappingDeleteshipmentmappingDeleteAsync(int? mappingId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShipmentMapping/DeleteShipmentMapping?");
            if (mappingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mappingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mappingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get order location analytics
        /// </summary>
        /// <param name="salesChannelId">Id of the Sales Channel</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="fromDate">Filter orders by CreatedAt (From Date)</param>
        /// <param name="toDate">Filter orders by CreatedAt (To Date)</param>
        /// <param name="includeRecommendedWarehouseLocation">Include Warehouse recommendation</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<OrderGeographicalAnalytics>> ApiServicesAppShopanalyticsGetordersgeographicallyGetAsync(int? salesChannelId, int? logisticProviderId, DateTimeOffset? fromDate, DateTimeOffset? toDate, bool? includeRecommendedWarehouseLocation)
        {
            return ApiServicesAppShopanalyticsGetordersgeographicallyGetAsync(salesChannelId, logisticProviderId, fromDate, toDate, includeRecommendedWarehouseLocation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get order location analytics
        /// </summary>
        /// <param name="salesChannelId">Id of the Sales Channel</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="fromDate">Filter orders by CreatedAt (From Date)</param>
        /// <param name="toDate">Filter orders by CreatedAt (To Date)</param>
        /// <param name="includeRecommendedWarehouseLocation">Include Warehouse recommendation</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<OrderGeographicalAnalytics>> ApiServicesAppShopanalyticsGetordersgeographicallyGetAsync(int? salesChannelId, int? logisticProviderId, DateTimeOffset? fromDate, DateTimeOffset? toDate, bool? includeRecommendedWarehouseLocation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopAnalytics/GetOrdersGeographically?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRecommendedWarehouseLocation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeRecommendedWarehouseLocation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRecommendedWarehouseLocation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<OrderGeographicalAnalytics>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Processed Orders by Day
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<ProcessedOrdersPerDayResult>>> ApiServicesAppShopanalyticsGetprocessedordersperdayGetAsync(int? year)
        {
            return ApiServicesAppShopanalyticsGetprocessedordersperdayGetAsync(year, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Processed Orders by Day
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<ProcessedOrdersPerDayResult>>> ApiServicesAppShopanalyticsGetprocessedordersperdayGetAsync(int? year, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopAnalytics/GetProcessedOrdersPerDay?");
            if (year != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<ProcessedOrdersPerDayResult>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Redirects to PrimePenguin sales channel installation page. Only to be used by Shopify.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyGetshopifyinstallGetAsync(string shop)
        {
            return ApiServicesAppShopifyGetshopifyinstallGetAsync(shop, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redirects to PrimePenguin sales channel installation page. Only to be used by Shopify.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyGetshopifyinstallGetAsync(string shop, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Shopify/GetShopifyInstall?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Url to install Shopify Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppShopifyGetshopifyinstallurlGetAsync(string shop, string state)
        {
            return ApiServicesAppShopifyGetshopifyinstallurlGetAsync(shop, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Url to install Shopify Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppShopifyGetshopifyinstallurlGetAsync(string shop, string state, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Shopify/GetShopifyInstallUrl?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Only to be used be Shopify to Authorize user after installation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyInstallshopifyGetAsync(string shop, string code, string state)
        {
            return ApiServicesAppShopifyInstallshopifyGetAsync(shop, code, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Only to be used be Shopify to Authorize user after installation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyInstallshopifyGetAsync(string shop, string code, string state, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Shopify/InstallShopify?");
            if (shop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when Shopify App is Uninstalled from Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookAppuninstallPostAsync(int? salesChannelId)
        {
            return ApiServicesAppShopifyhookAppuninstallPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when Shopify App is Uninstalled from Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookAppuninstallPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/AppUninstall?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Product is Created or Updated in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookCreateorupdateproductPostAsync(int? salesChannelId, Product body)
        {
            return ApiServicesAppShopifyhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Product is Created or Updated in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookCreateorupdateproductPostAsync(int? salesChannelId, Product body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Product is Deleted from Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookDeleteproductPostAsync(int? salesChannelId, Product body)
        {
            return ApiServicesAppShopifyhookDeleteproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Product is Deleted from Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookDeleteproductPostAsync(int? salesChannelId, Product body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/DeleteProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when an Order is Created or Updated in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookCreateorupdateorderPostAsync(int? salesChannelId, Order body)
        {
            return ApiServicesAppShopifyhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when an Order is Created or Updated in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookCreateorupdateorderPostAsync(int? salesChannelId, Order body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when an Order is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookDeleteorderPostAsync(int? salesChannelId, Order body)
        {
            return ApiServicesAppShopifyhookDeleteorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when an Order is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookDeleteorderPostAsync(int? salesChannelId, Order body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/DeleteOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a refund is made for an Order in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookCreaterefundPostAsync(int? salesChannelId, Refund body)
        {
            return ApiServicesAppShopifyhookCreaterefundPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a refund is made for an Order in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookCreaterefundPostAsync(int? salesChannelId, Refund body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/CreateRefund?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookCreateorupdatecustomerPostAsync(int? salesChannelId, Customer body)
        {
            return ApiServicesAppShopifyhookCreateorupdatecustomerPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookCreateorupdatecustomerPostAsync(int? salesChannelId, Customer body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/CreateOrUpdateCustomer?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Customer is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookDeletecustomerPostAsync(int? salesChannelId, Customer body)
        {
            return ApiServicesAppShopifyhookDeletecustomerPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Customer is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookDeletecustomerPostAsync(int? salesChannelId, Customer body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/DeleteCustomer?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookCreateorupdatelocationPostAsync(int? salesChannelId, Location body)
        {
            return ApiServicesAppShopifyhookCreateorupdatelocationPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookCreateorupdatelocationPostAsync(int? salesChannelId, Location body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/CreateOrUpdateLocation?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Location is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookDeletelocationPostAsync(int? salesChannelId, Location body)
        {
            return ApiServicesAppShopifyhookDeletelocationPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Location is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookDeletelocationPostAsync(int? salesChannelId, Location body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/DeleteLocation?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookCreateorupdateinventorylevelPostAsync(int? salesChannelId, InventoryLevel body)
        {
            return ApiServicesAppShopifyhookCreateorupdateinventorylevelPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookCreateorupdateinventorylevelPostAsync(int? salesChannelId, InventoryLevel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/CreateOrUpdateInventoryLevel?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when an Inventory Level is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookDeleteinventorylevelPostAsync(int? salesChannelId, InventoryLevel body)
        {
            return ApiServicesAppShopifyhookDeleteinventorylevelPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when an Inventory Level is deleted in Shopify Sales Channel.
        /// <br/>This API should only be used by Shopify Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookDeleteinventorylevelPostAsync(int? salesChannelId, InventoryLevel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/DeleteInventoryLevel?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookCustomerredactPostAsync(CustomerRedactedWebhook body)
        {
            return ApiServicesAppShopifyhookCustomerredactPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookCustomerredactPostAsync(CustomerRedactedWebhook body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/CustomerRedact");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppShopifyhookShopredactPostAsync(ShopRedactedWebhook body)
        {
            return ApiServicesAppShopifyhookShopredactPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppShopifyhookShopredactPostAsync(ShopRedactedWebhook body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/ShopifyHook/ShopRedact");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Connect Squarespace sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppSquarespaceInstallsquarespacePostAsync(InstallSquarespaceInput body)
        {
            return ApiServicesAppSquarespaceInstallsquarespacePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Connect Squarespace sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppSquarespaceInstallsquarespacePostAsync(InstallSquarespaceInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Squarespace/InstallSquarespace");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSquarespacehookPostAsync(SquarespaceHookInput body)
        {
            return ApiServicesAppSquarespacehookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSquarespacehookPostAsync(SquarespaceHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SquarespaceHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSquarespacehookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppSquarespacehookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSquarespacehookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SquarespaceHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSquarespacehookCreateorupdateinventoryPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppSquarespacehookCreateorupdateinventoryPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSquarespacehookCreateorupdateinventoryPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SquarespaceHook/CreateOrUpdateInventory?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSquarespacehookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppSquarespacehookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSquarespacehookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/SquarespaceHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Install Starweb sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppStarwebInstallstarwebPostAsync(InstallStarwebInput body)
        {
            return ApiServicesAppStarwebInstallstarwebPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Install Starweb sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppStarwebInstallstarwebPostAsync(InstallStarwebInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Starweb/InstallStarweb");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Product is Created or Updated in Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppStarwebhookCreateorupdateproductPostAsync(int? salesChannelId, ProductWebhookResult body)
        {
            return ApiServicesAppStarwebhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Product is Created or Updated in Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppStarwebhookCreateorupdateproductPostAsync(int? salesChannelId, ProductWebhookResult body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StarwebHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Product is Deleted from Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppStarwebhookDeleteproductPostAsync(int? salesChannelId, ProductWebhookResult body)
        {
            return ApiServicesAppStarwebhookDeleteproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Product is Deleted from Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppStarwebhookDeleteproductPostAsync(int? salesChannelId, ProductWebhookResult body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StarwebHook/DeleteProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when an Order is Created or Updated in Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppStarwebhookCreateorupdateorderPostAsync(int? salesChannelId, OrderWebhookResult body)
        {
            return ApiServicesAppStarwebhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when an Order is Created or Updated in Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppStarwebhookCreateorupdateorderPostAsync(int? salesChannelId, OrderWebhookResult body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StarwebHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when an Order is deleted in Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppStarwebhookDeleteorderPostAsync(int? salesChannelId, OrderWebhookResult body)
        {
            return ApiServicesAppStarwebhookDeleteorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when an Order is deleted in Starweb Sales Channel.
        /// <br/>This API should only be used by Starweb Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppStarwebhookDeleteorderPostAsync(int? salesChannelId, OrderWebhookResult body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StarwebHook/DeleteOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<StripeConfigurationDto>> ApiServicesAppStripepaymentGetconfigurationGetAsync()
        {
            return ApiServicesAppStripepaymentGetconfigurationGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<StripeConfigurationDto>> ApiServicesAppStripepaymentGetconfigurationGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StripePayment/GetConfiguration");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<StripeConfigurationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SubscriptionPaymentDto>> ApiServicesAppStripepaymentGetpaymentGetAsync(string stripeSessionId)
        {
            return ApiServicesAppStripepaymentGetpaymentGetAsync(stripeSessionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SubscriptionPaymentDto>> ApiServicesAppStripepaymentGetpaymentGetAsync(string stripeSessionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StripePayment/GetPayment?");
            if (stripeSessionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StripeSessionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stripeSessionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SubscriptionPaymentDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<string>> ApiServicesAppStripepaymentCreatepaymentsessionPostAsync(StripeCreatePaymentSessionInput body)
        {
            return ApiServicesAppStripepaymentCreatepaymentsessionPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<string>> ApiServicesAppStripepaymentCreatepaymentsessionPostAsync(StripeCreatePaymentSessionInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StripePayment/CreatePaymentSession");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<StripePaymentResultOutput>> ApiServicesAppStripepaymentGetpaymentresultGetAsync(long? paymentId)
        {
            return ApiServicesAppStripepaymentGetpaymentresultGetAsync(paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<StripePaymentResultOutput>> ApiServicesAppStripepaymentGetpaymentresultGetAsync(long? paymentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/StripePayment/GetPaymentResult?");
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PaymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<StripePaymentResultOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSubscriptionDisablerecurringpaymentsPostAsync()
        {
            return ApiServicesAppSubscriptionDisablerecurringpaymentsPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSubscriptionDisablerecurringpaymentsPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Subscription/DisableRecurringPayments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSubscriptionEnablerecurringpaymentsPostAsync()
        {
            return ApiServicesAppSubscriptionEnablerecurringpaymentsPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSubscriptionEnablerecurringpaymentsPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Subscription/EnableRecurringPayments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of suppliers
        /// </summary>
        /// <param name="name">Supplier Name | Sorting Parameter</param>
        /// <param name="code">Supplier Code | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSupplierDto>> ApiServicesAppSuppliersGetGetAsync(string name, string code, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppSuppliersGetGetAsync(name, code, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of suppliers
        /// </summary>
        /// <param name="name">Supplier Name | Sorting Parameter</param>
        /// <param name="code">Supplier Code | Sorting Parameter</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSupplierDto>> ApiServicesAppSuppliersGetGetAsync(string name, string code, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Suppliers/Get?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSupplierDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get supplier by id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SupplierDto>> ApiServicesAppSuppliersGetbyidGetAsync(long? id)
        {
            return ApiServicesAppSuppliersGetbyidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get supplier by id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SupplierDto>> ApiServicesAppSuppliersGetbyidGetAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Suppliers/GetById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SupplierDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update supplier
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SupplierDto>> ApiServicesAppSuppliersCreateorupdatesupplierPostAsync(CreateOrUpdateSupplierInput body)
        {
            return ApiServicesAppSuppliersCreateorupdatesupplierPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update supplier
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SupplierDto>> ApiServicesAppSuppliersCreateorupdatesupplierPostAsync(CreateOrUpdateSupplierInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Suppliers/CreateOrUpdateSupplier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SupplierDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSuppliersDeleteDeleteAsync(long? id)
        {
            return ApiServicesAppSuppliersDeleteDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSuppliersDeleteDeleteAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Suppliers/Delete?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all available supplier names from sales channels
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppSuppliersAvailablesuppliernamesfromproductvendorsGetAsync(string query)
        {
            return ApiServicesAppSuppliersAvailablesuppliernamesfromproductvendorsGetAsync(query, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all available supplier names from sales channels
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<string>>> ApiServicesAppSuppliersAvailablesuppliernamesfromproductvendorsGetAsync(string query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Suppliers/AvailableSupplierNamesFromProductVendors?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all supplier names and Ids
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfNameValueDtoOfInt64>> ApiServicesAppSuppliersSuppliersidnamesGetAsync(string query, int? fetchCount)
        {
            return ApiServicesAppSuppliersSuppliersidnamesGetAsync(query, fetchCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all supplier names and Ids
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfNameValueDtoOfInt64>> ApiServicesAppSuppliersSuppliersidnamesGetAsync(string query, int? fetchCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Suppliers/SuppliersIdNames?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fetchCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fetchCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfNameValueDtoOfInt64>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all support questions
        /// </summary>
        /// <param name="includeQuestionBody">Include Question Body in result</param>
        /// <param name="includeAnswers">Include Answers in result</param>
        /// <param name="supportQuestionStatus">Status of Support Question</param>
        /// <param name="fromDate">Question created since</param>
        /// <param name="toDate">Question created before</param>
        /// <param name="onlyPriorityQuestion">Filter question asked by Priority Support Customer</param>
        /// <param name="tenantName">Only available for Prime Penguin Admin</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSupportQuestionDto>> ApiServicesAppSupportGetsupportquestionsGetAsync(bool? includeQuestionBody, bool? includeAnswers, SupportQuestionStatus? supportQuestionStatus, DateTimeOffset? fromDate, DateTimeOffset? toDate, bool? onlyPriorityQuestion, string tenantName, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppSupportGetsupportquestionsGetAsync(includeQuestionBody, includeAnswers, supportQuestionStatus, fromDate, toDate, onlyPriorityQuestion, tenantName, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all support questions
        /// </summary>
        /// <param name="includeQuestionBody">Include Question Body in result</param>
        /// <param name="includeAnswers">Include Answers in result</param>
        /// <param name="supportQuestionStatus">Status of Support Question</param>
        /// <param name="fromDate">Question created since</param>
        /// <param name="toDate">Question created before</param>
        /// <param name="onlyPriorityQuestion">Filter question asked by Priority Support Customer</param>
        /// <param name="tenantName">Only available for Prime Penguin Admin</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSupportQuestionDto>> ApiServicesAppSupportGetsupportquestionsGetAsync(bool? includeQuestionBody, bool? includeAnswers, SupportQuestionStatus? supportQuestionStatus, DateTimeOffset? fromDate, DateTimeOffset? toDate, bool? onlyPriorityQuestion, string tenantName, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Support/GetSupportQuestions?");
            if (includeQuestionBody != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeQuestionBody") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeQuestionBody, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAnswers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeAnswers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAnswers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (supportQuestionStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SupportQuestionStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(supportQuestionStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyPriorityQuestion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyPriorityQuestion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyPriorityQuestion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TenantName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSupportQuestionDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get support question by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SupportQuestionDto>> ApiServicesAppSupportGetsupportquestionGetAsync(int? id)
        {
            return ApiServicesAppSupportGetsupportquestionGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get support question by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SupportQuestionDto>> ApiServicesAppSupportGetsupportquestionGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Support/GetSupportQuestion?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SupportQuestionDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create support question
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SupportQuestion>> ApiServicesAppSupportCreatesupportquestionPostAsync(CreateSupportQuestionInput body)
        {
            return ApiServicesAppSupportCreatesupportquestionPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create support question
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SupportQuestion>> ApiServicesAppSupportCreatesupportquestionPostAsync(CreateSupportQuestionInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Support/CreateSupportQuestion");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SupportQuestion>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create new reply of the question
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSupportAddanswerPostAsync(CreateAnswerDto body)
        {
            return ApiServicesAppSupportAddanswerPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create new reply of the question
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSupportAddanswerPostAsync(CreateAnswerDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Support/AddAnswer");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark as answer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppSupportMarkasanswerPostAsync(int? questionId, int? answerId)
        {
            return ApiServicesAppSupportMarkasanswerPostAsync(questionId, answerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark as answer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppSupportMarkasanswerPostAsync(int? questionId, int? answerId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Support/MarkAsAnswer?");
            if (questionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("questionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(questionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (answerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("answerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(answerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfTenantListDto>> ApiServicesAppTenantGettenantsGetAsync(string filter, DateTimeOffset? subscriptionEndDateStart, DateTimeOffset? subscriptionEndDateEnd, DateTimeOffset? creationDateStart, DateTimeOffset? creationDateEnd, int? editionId, bool? editionIdSpecified, TenantType tenantType, string salesChannelName, bool? filterSharpClients, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppTenantGettenantsGetAsync(filter, subscriptionEndDateStart, subscriptionEndDateEnd, creationDateStart, creationDateEnd, editionId, editionIdSpecified, tenantType, salesChannelName, filterSharpClients, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfTenantListDto>> ApiServicesAppTenantGettenantsGetAsync(string filter, DateTimeOffset? subscriptionEndDateStart, DateTimeOffset? subscriptionEndDateEnd, DateTimeOffset? creationDateStart, DateTimeOffset? creationDateEnd, int? editionId, bool? editionIdSpecified, TenantType tenantType, string salesChannelName, bool? filterSharpClients, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantType == null)
                throw new System.ArgumentNullException("tenantType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/GetTenants?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subscriptionEndDateStart != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SubscriptionEndDateStart") + "=").Append(System.Uri.EscapeDataString(subscriptionEndDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subscriptionEndDateEnd != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SubscriptionEndDateEnd") + "=").Append(System.Uri.EscapeDataString(subscriptionEndDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creationDateStart != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreationDateStart") + "=").Append(System.Uri.EscapeDataString(creationDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creationDateEnd != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreationDateEnd") + "=").Append(System.Uri.EscapeDataString(creationDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (editionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EditionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(editionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (editionIdSpecified != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EditionIdSpecified") + "=").Append(System.Uri.EscapeDataString(ConvertToString(editionIdSpecified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("TenantType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (salesChannelName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterSharpClients != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FilterSharpClients") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterSharpClients, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfTenantListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantCreatetenantPostAsync(CreateTenantInput body)
        {
            return ApiServicesAppTenantCreatetenantPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantCreatetenantPostAsync(CreateTenantInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/CreateTenant");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<TenantEditDto>> ApiServicesAppTenantGettenantforeditGetAsync(int? id)
        {
            return ApiServicesAppTenantGettenantforeditGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<TenantEditDto>> ApiServicesAppTenantGettenantforeditGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/GetTenantForEdit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<TenantEditDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantUpdatetenantPutAsync(TenantEditDto body)
        {
            return ApiServicesAppTenantUpdatetenantPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantUpdatetenantPutAsync(TenantEditDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/UpdateTenant");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantDeletetenantDeleteAsync(int? id)
        {
            return ApiServicesAppTenantDeletetenantDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantDeletetenantDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/DeleteTenant?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetTenantFeaturesEditOutput>> ApiServicesAppTenantGettenantfeaturesforeditGetAsync(int? id)
        {
            return ApiServicesAppTenantGettenantfeaturesforeditGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetTenantFeaturesEditOutput>> ApiServicesAppTenantGettenantfeaturesforeditGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/GetTenantFeaturesForEdit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetTenantFeaturesEditOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantUpdatetenantfeaturesPutAsync(UpdateTenantFeaturesInput body)
        {
            return ApiServicesAppTenantUpdatetenantfeaturesPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantUpdatetenantfeaturesPutAsync(UpdateTenantFeaturesInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/UpdateTenantFeatures");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantResettenantspecificfeaturesPostAsync(EntityDto body)
        {
            return ApiServicesAppTenantResettenantspecificfeaturesPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantResettenantspecificfeaturesPostAsync(EntityDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/ResetTenantSpecificFeatures");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantUnlocktenantadminPostAsync(EntityDto body)
        {
            return ApiServicesAppTenantUnlocktenantadminPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantUnlocktenantadminPostAsync(EntityDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Tenant/UnlockTenantAdmin");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<RegisterTenantOutput>> ApiServicesAppTenantregistrationRegistertenantPostAsync(RegisterTenantInput body)
        {
            return ApiServicesAppTenantregistrationRegistertenantPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<RegisterTenantOutput>> ApiServicesAppTenantregistrationRegistertenantPostAsync(RegisterTenantInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantRegistration/RegisterTenant");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<RegisterTenantOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<EditionsSelectOutput>> ApiServicesAppTenantregistrationGeteditionsforselectGetAsync()
        {
            return ApiServicesAppTenantregistrationGeteditionsforselectGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<EditionsSelectOutput>> ApiServicesAppTenantregistrationGeteditionsforselectGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantRegistration/GetEditionsForSelect");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<EditionsSelectOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<EditionSelectDto>> ApiServicesAppTenantregistrationGeteditionGetAsync(int? editionId)
        {
            return ApiServicesAppTenantregistrationGeteditionGetAsync(editionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<EditionSelectDto>> ApiServicesAppTenantregistrationGeteditionGetAsync(int? editionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantRegistration/GetEdition?");
            if (editionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("editionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(editionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<EditionSelectDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<TenantSettingsEditDto>> ApiServicesAppTenantsettingsGetallsettingsGetAsync()
        {
            return ApiServicesAppTenantsettingsGetallsettingsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<TenantSettingsEditDto>> ApiServicesAppTenantsettingsGetallsettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantSettings/GetAllSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<TenantSettingsEditDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantsettingsUpdateallsettingsPutAsync(TenantSettingsEditDto body)
        {
            return ApiServicesAppTenantsettingsUpdateallsettingsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantsettingsUpdateallsettingsPutAsync(TenantSettingsEditDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantSettings/UpdateAllSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantsettingsClearlogoPostAsync()
        {
            return ApiServicesAppTenantsettingsClearlogoPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantsettingsClearlogoPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantSettings/ClearLogo");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantsettingsClearcustomcssPostAsync()
        {
            return ApiServicesAppTenantsettingsClearcustomcssPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantsettingsClearcustomcssPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantSettings/ClearCustomCss");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTenantsettingsSendtestemailPostAsync(SendTestEmailInput body)
        {
            return ApiServicesAppTenantsettingsSendtestemailPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTenantsettingsSendtestemailPostAsync(SendTestEmailInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantSettings/SendTestEmail");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ExternalLoginSettingsDto>> ApiServicesAppTenantsettingsGetenabledsocialloginsettingsGetAsync()
        {
            return ApiServicesAppTenantsettingsGetenabledsocialloginsettingsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ExternalLoginSettingsDto>> ApiServicesAppTenantsettingsGetenabledsocialloginsettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TenantSettings/GetEnabledSocialLoginSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ExternalLoginSettingsDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Connect TextTalk sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppTexttalkInstalltexttalkPostAsync(InstallTextTalkInput body)
        {
            return ApiServicesAppTexttalkInstalltexttalkPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Connect TextTalk sales channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppTexttalkInstalltexttalkPostAsync(InstallTextTalkInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TextTalk/InstallTextTalk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTexttalkhookProcessPostAsync(int? salesChannelId, string securityKey)
        {
            return ApiServicesAppTexttalkhookProcessPostAsync(salesChannelId, securityKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTexttalkhookProcessPostAsync(int? salesChannelId, string securityKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TextTalkHook/process?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTexttalkhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppTexttalkhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTexttalkhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TextTalkHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTexttalkhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppTexttalkhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTexttalkhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TextTalkHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfNameValueDto>> ApiServicesAppTimingGettimezonesGetAsync(SettingScopes defaultTimezoneScope)
        {
            return ApiServicesAppTimingGettimezonesGetAsync(defaultTimezoneScope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfNameValueDto>> ApiServicesAppTimingGettimezonesGetAsync(SettingScopes defaultTimezoneScope, System.Threading.CancellationToken cancellationToken)
        {
            if (defaultTimezoneScope == null)
                throw new System.ArgumentNullException("defaultTimezoneScope");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Timing/GetTimezones?");
            urlBuilder_.Append(System.Uri.EscapeDataString("DefaultTimezoneScope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(defaultTimezoneScope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfNameValueDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<ComboboxItemDto>>> ApiServicesAppTimingGettimezonecomboboxitemsGetAsync(string selectedTimezoneId)
        {
            return ApiServicesAppTimingGettimezonecomboboxitemsGetAsync(selectedTimezoneId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<ComboboxItemDto>>> ApiServicesAppTimingGettimezonecomboboxitemsGetAsync(string selectedTimezoneId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Timing/GetTimezoneComboboxItems?");
            if (selectedTimezoneId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SelectedTimezoneId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(selectedTimezoneId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<ComboboxItemDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<AuthenticateResultModel>> ApiTokenauthAuthenticatePostAsync(AuthenticateModel body)
        {
            return ApiTokenauthAuthenticatePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<AuthenticateResultModel>> ApiTokenauthAuthenticatePostAsync(AuthenticateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/Authenticate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<AuthenticateResultModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<RefreshTokenResult>> ApiTokenauthRefreshtokenPostAsync(string refreshToken)
        {
            return ApiTokenauthRefreshtokenPostAsync(refreshToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<RefreshTokenResult>> ApiTokenauthRefreshtokenPostAsync(string refreshToken, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/RefreshToken?");
            if (refreshToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refreshToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refreshToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<RefreshTokenResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiTokenauthLogoutGetAsync()
        {
            return ApiTokenauthLogoutGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiTokenauthLogoutGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/LogOut");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiTokenauthSendtwofactorauthcodePostAsync(SendTwoFactorAuthCodeModel body)
        {
            return ApiTokenauthSendtwofactorauthcodePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiTokenauthSendtwofactorauthcodePostAsync(SendTwoFactorAuthCodeModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/SendTwoFactorAuthCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthImpersonatedauthenticatePostAsync(string impersonationToken)
        {
            return ApiTokenauthImpersonatedauthenticatePostAsync(impersonationToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthImpersonatedauthenticatePostAsync(string impersonationToken, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/ImpersonatedAuthenticate?");
            if (impersonationToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("impersonationToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(impersonationToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ImpersonatedAuthenticateResultModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthDelegatedimpersonatedauthenticatePostAsync(long? userDelegationId, string impersonationToken)
        {
            return ApiTokenauthDelegatedimpersonatedauthenticatePostAsync(userDelegationId, impersonationToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthDelegatedimpersonatedauthenticatePostAsync(long? userDelegationId, string impersonationToken, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/DelegatedImpersonatedAuthenticate?");
            if (userDelegationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userDelegationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userDelegationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (impersonationToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("impersonationToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(impersonationToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ImpersonatedAuthenticateResultModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SwitchedAccountAuthenticateResultModel>> ApiTokenauthLinkedaccountauthenticatePostAsync(string switchAccountToken)
        {
            return ApiTokenauthLinkedaccountauthenticatePostAsync(switchAccountToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SwitchedAccountAuthenticateResultModel>> ApiTokenauthLinkedaccountauthenticatePostAsync(string switchAccountToken, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/LinkedAccountAuthenticate?");
            if (switchAccountToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("switchAccountToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(switchAccountToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SwitchedAccountAuthenticateResultModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<ExternalLoginProviderInfoModel>>> ApiTokenauthGetexternalauthenticationprovidersGetAsync()
        {
            return ApiTokenauthGetexternalauthenticationprovidersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<ExternalLoginProviderInfoModel>>> ApiTokenauthGetexternalauthenticationprovidersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/GetExternalAuthenticationProviders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<ExternalLoginProviderInfoModel>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ExternalAuthenticateResultModel>> ApiTokenauthExternalauthenticatePostAsync(ExternalAuthenticateModel body)
        {
            return ApiTokenauthExternalauthenticatePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ExternalAuthenticateResultModel>> ApiTokenauthExternalauthenticatePostAsync(ExternalAuthenticateModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/ExternalAuthenticate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ExternalAuthenticateResultModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiTokenauthTestnotificationGetAsync(string message, string severity)
        {
            return ApiTokenauthTestnotificationGetAsync(message, severity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiTokenauthTestnotificationGetAsync(string message, string severity, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TokenAuth/TestNotification?");
            if (message != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (severity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("severity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(severity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all tracking templates
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfTrackingTemplateDto>> ApiServicesAppTrackingtemplateGettrackingtemplatesGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter)
        {
            return ApiServicesAppTrackingtemplateGettrackingtemplatesGetAsync(sorting, maxResultCount, skipCount, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all tracking templates
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfTrackingTemplateDto>> ApiServicesAppTrackingtemplateGettrackingtemplatesGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TrackingTemplate/GetTrackingTemplates?");
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfTrackingTemplateDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get tracking template by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<TrackingTemplateDto>> ApiServicesAppTrackingtemplateGettrackingtemplatebyidGetAsync(int? id)
        {
            return ApiServicesAppTrackingtemplateGettrackingtemplatebyidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tracking template by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<TrackingTemplateDto>> ApiServicesAppTrackingtemplateGettrackingtemplatebyidGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TrackingTemplate/GetTrackingTemplateById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<TrackingTemplateDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update tracking template
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<TrackingTemplateDto>> ApiServicesAppTrackingtemplateCreateorupdatetrackingtemplatePostAsync(TrackingTemplateDto body)
        {
            return ApiServicesAppTrackingtemplateCreateorupdatetrackingtemplatePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update tracking template
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<TrackingTemplateDto>> ApiServicesAppTrackingtemplateCreateorupdatetrackingtemplatePostAsync(TrackingTemplateDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TrackingTemplate/CreateOrUpdateTrackingTemplate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<TrackingTemplateDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete tracking template by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppTrackingtemplateDeletetrackingtemplateDeleteAsync(int? id)
        {
            return ApiServicesAppTrackingtemplateDeletetrackingtemplateDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete tracking template by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppTrackingtemplateDeletetrackingtemplateDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/TrackingTemplate/DeleteTrackingTemplate?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<TwitterGetRequestTokenResponse>> ApiTwitterGetrequesttokenPostAsync()
        {
            return ApiTwitterGetrequesttokenPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<TwitterGetRequestTokenResponse>> ApiTwitterGetrequesttokenPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Twitter/GetRequestToken");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<TwitterGetRequestTokenResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<TwitterGetAccessTokenResponse>> ApiTwitterGetaccesstokenPostAsync(string token, string verifier)
        {
            return ApiTwitterGetaccesstokenPostAsync(token, verifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<TwitterGetAccessTokenResponse>> ApiTwitterGetaccesstokenPostAsync(string token, string verifier, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Twitter/GetAccessToken?");
            if (token != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verifier != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verifier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verifier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<TwitterGetAccessTokenResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<ThemeSettingsDto>>> ApiServicesAppUicustomizationsettingsGetuimanagementsettingsGetAsync()
        {
            return ApiServicesAppUicustomizationsettingsGetuimanagementsettingsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<ThemeSettingsDto>>> ApiServicesAppUicustomizationsettingsGetuimanagementsettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UiCustomizationSettings/GetUiManagementSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<ThemeSettingsDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUicustomizationsettingsChangethemewithdefaultvaluesPostAsync(string themeName)
        {
            return ApiServicesAppUicustomizationsettingsChangethemewithdefaultvaluesPostAsync(themeName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUicustomizationsettingsChangethemewithdefaultvaluesPostAsync(string themeName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UiCustomizationSettings/ChangeThemeWithDefaultValues?");
            if (themeName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("themeName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(themeName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUicustomizationsettingsUpdateuimanagementsettingsPutAsync(ThemeSettingsDto body)
        {
            return ApiServicesAppUicustomizationsettingsUpdateuimanagementsettingsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUicustomizationsettingsUpdateuimanagementsettingsPutAsync(ThemeSettingsDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UiCustomizationSettings/UpdateUiManagementSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUicustomizationsettingsUpdatedefaultuimanagementsettingsPutAsync(ThemeSettingsDto body)
        {
            return ApiServicesAppUicustomizationsettingsUpdatedefaultuimanagementsettingsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUicustomizationsettingsUpdatedefaultuimanagementsettingsPutAsync(ThemeSettingsDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UiCustomizationSettings/UpdateDefaultUiManagementSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUicustomizationsettingsUsesystemdefaultsettingsPostAsync()
        {
            return ApiServicesAppUicustomizationsettingsUsesystemdefaultsettingsPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUicustomizationsettingsUsesystemdefaultsettingsPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UiCustomizationSettings/UseSystemDefaultSettings");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfUserListDto>> ApiServicesAppUserGetusersGetAsync(string filter, IEnumerable<string> permissions, int? role, bool? onlyLockedUsers, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppUserGetusersGetAsync(filter, permissions, role, onlyLockedUsers, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfUserListDto>> ApiServicesAppUserGetusersGetAsync(string filter, IEnumerable<string> permissions, int? role, bool? onlyLockedUsers, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/GetUsers?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (permissions != null)
            {
                foreach (var item_ in permissions) { urlBuilder_.Append(System.Uri.EscapeDataString("Permissions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (role != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Role") + "=").Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyLockedUsers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyLockedUsers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyLockedUsers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfUserListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppUserGetuserstoexcelGetAsync(string filter, IEnumerable<string> permissions, int? role, bool? onlyLockedUsers, string sorting)
        {
            return ApiServicesAppUserGetuserstoexcelGetAsync(filter, permissions, role, onlyLockedUsers, sorting, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppUserGetuserstoexcelGetAsync(string filter, IEnumerable<string> permissions, int? role, bool? onlyLockedUsers, string sorting, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/GetUsersToExcel?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (permissions != null)
            {
                foreach (var item_ in permissions) { urlBuilder_.Append(System.Uri.EscapeDataString("Permissions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (role != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Role") + "=").Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyLockedUsers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyLockedUsers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyLockedUsers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetUserForEditOutput>> ApiServicesAppUserGetuserforeditGetAsync(long? id)
        {
            return ApiServicesAppUserGetuserforeditGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetUserForEditOutput>> ApiServicesAppUserGetuserforeditGetAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/GetUserForEdit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetUserForEditOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetUserPermissionsForEditOutput>> ApiServicesAppUserGetuserpermissionsforeditGetAsync(long? id)
        {
            return ApiServicesAppUserGetuserpermissionsforeditGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetUserPermissionsForEditOutput>> ApiServicesAppUserGetuserpermissionsforeditGetAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/GetUserPermissionsForEdit?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetUserPermissionsForEditOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserResetuserspecificpermissionsPostAsync(EntityDtoOfInt64 body)
        {
            return ApiServicesAppUserResetuserspecificpermissionsPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserResetuserspecificpermissionsPostAsync(EntityDtoOfInt64 body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/ResetUserSpecificPermissions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserUpdateuserpermissionsPutAsync(UpdateUserPermissionsInput body)
        {
            return ApiServicesAppUserUpdateuserpermissionsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserUpdateuserpermissionsPutAsync(UpdateUserPermissionsInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/UpdateUserPermissions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserCreateorupdateuserPostAsync(CreateOrUpdateUserInput body)
        {
            return ApiServicesAppUserCreateorupdateuserPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserCreateorupdateuserPostAsync(CreateOrUpdateUserInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/CreateOrUpdateUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserDeleteuserDeleteAsync(long? id)
        {
            return ApiServicesAppUserDeleteuserDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserDeleteuserDeleteAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/DeleteUser?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserUnlockuserPostAsync(EntityDtoOfInt64 body)
        {
            return ApiServicesAppUserUnlockuserPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserUnlockuserPostAsync(EntityDtoOfInt64 body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/User/UnlockUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfUserDelegationDto>> ApiServicesAppUserdelegationGetdelegatedusersGetAsync(int? maxResultCount, int? skipCount, string sorting)
        {
            return ApiServicesAppUserdelegationGetdelegatedusersGetAsync(maxResultCount, skipCount, sorting, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfUserDelegationDto>> ApiServicesAppUserdelegationGetdelegatedusersGetAsync(int? maxResultCount, int? skipCount, string sorting, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserDelegation/GetDelegatedUsers?");
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfUserDelegationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserdelegationDelegatenewuserPostAsync(CreateUserDelegationDto body)
        {
            return ApiServicesAppUserdelegationDelegatenewuserPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserdelegationDelegatenewuserPostAsync(CreateUserDelegationDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserDelegation/DelegateNewUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserdelegationRemovedelegationDeleteAsync(long? id)
        {
            return ApiServicesAppUserdelegationRemovedelegationDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserdelegationRemovedelegationDeleteAsync(long? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserDelegation/RemoveDelegation?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns active user delegations for current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<UserDelegationDto>>> ApiServicesAppUserdelegationGetactiveuserdelegationsGetAsync()
        {
            return ApiServicesAppUserdelegationGetactiveuserdelegationsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns active user delegations for current user
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<UserDelegationDto>>> ApiServicesAppUserdelegationGetactiveuserdelegationsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserDelegation/GetActiveUserDelegations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<UserDelegationDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserlinkLinktouserPostAsync(LinkToUserInput body)
        {
            return ApiServicesAppUserlinkLinktouserPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserlinkLinktouserPostAsync(LinkToUserInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserLink/LinkToUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfLinkedUserDto>> ApiServicesAppUserlinkGetlinkedusersGetAsync(int? maxResultCount, int? skipCount, string sorting)
        {
            return ApiServicesAppUserlinkGetlinkedusersGetAsync(maxResultCount, skipCount, sorting, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfLinkedUserDto>> ApiServicesAppUserlinkGetlinkedusersGetAsync(int? maxResultCount, int? skipCount, string sorting, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserLink/GetLinkedUsers?");
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfLinkedUserDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfLinkedUserDto>> ApiServicesAppUserlinkGetrecentlyusedlinkedusersGetAsync()
        {
            return ApiServicesAppUserlinkGetrecentlyusedlinkedusersGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfLinkedUserDto>> ApiServicesAppUserlinkGetrecentlyusedlinkedusersGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserLink/GetRecentlyUsedLinkedUsers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfLinkedUserDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserlinkUnlinkuserPostAsync(UnlinkUserInput body)
        {
            return ApiServicesAppUserlinkUnlinkuserPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserlinkUnlinkuserPostAsync(UnlinkUserInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserLink/UnlinkUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfUserLoginAttemptDto>> ApiServicesAppUserloginGetrecentuserloginattemptsGetAsync()
        {
            return ApiServicesAppUserloginGetrecentuserloginattemptsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfUserLoginAttemptDto>> ApiServicesAppUserloginGetrecentuserloginattemptsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserLogin/GetRecentUserLoginAttempts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfUserLoginAttemptDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppUserloginAccepttermsandconditionsPostAsync()
        {
            return ApiServicesAppUserloginAccepttermsandconditionsPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppUserloginAccepttermsandconditionsPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/UserLogin/AcceptTermsAndConditions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Warehouse Overview for dashboard and reporting
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WarehouseOverviewDashboardInformationDto>> ApiServicesAppWarehouseGetwarehousedashboardGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseGetwarehousedashboardGetAsync(fromDate, toDate, logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Warehouse Overview for dashboard and reporting
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WarehouseOverviewDashboardInformationDto>> ApiServicesAppWarehouseGetwarehousedashboardGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetWarehouseDashboard?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WarehouseOverviewDashboardInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Warehouse Overview for dashboard and reporting in Demo mode
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WarehouseOverviewDashboardInformationDto>> ApiServicesAppWarehouseGetdemowarehousedashboardGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseGetdemowarehousedashboardGetAsync(fromDate, toDate, logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Warehouse Overview for dashboard and reporting in Demo mode
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WarehouseOverviewDashboardInformationDto>> ApiServicesAppWarehouseGetdemowarehousedashboardGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetDemoWarehouseDashboard?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WarehouseOverviewDashboardInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Storage Information from Warehouse
        /// </summary>
        /// <param name="logisticProviderId">Supply logisticProvider Id if you want to get information from a specific LP</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<StorageInformationDto>> ApiServicesAppWarehouseGetstorageinformationGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseGetstorageinformationGetAsync(logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Storage Information from Warehouse
        /// </summary>
        /// <param name="logisticProviderId">Supply logisticProvider Id if you want to get information from a specific LP</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<StorageInformationDto>> ApiServicesAppWarehouseGetstorageinformationGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetStorageInformation?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<StorageInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get cost of products stored at warehouses
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<StockValueDto>>> ApiServicesAppWarehouseGetproductsvalueGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseGetproductsvalueGetAsync(logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get cost of products stored at warehouses
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<StockValueDto>>> ApiServicesAppWarehouseGetproductsvalueGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetProductsValue?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<StockValueDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Storage descriptions from Warehouse
        /// </summary>
        /// <param name="logisticProviderId">Supply logisticProvider Id if you want to get information from a specific LP</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfStorageDescriptionDto>> ApiServicesAppWarehouseGetstoragedescriptionsGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseGetstoragedescriptionsGetAsync(logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Storage descriptions from Warehouse
        /// </summary>
        /// <param name="logisticProviderId">Supply logisticProvider Id if you want to get information from a specific LP</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfStorageDescriptionDto>> ApiServicesAppWarehouseGetstoragedescriptionsGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetStorageDescriptions?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfStorageDescriptionDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Service Cost (including history) from Warehouse
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfServiceCostDto>> ApiServicesAppWarehouseGetservicecostlistGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId)
        {
            return ApiServicesAppWarehouseGetservicecostlistGetAsync(fromDate, toDate, logisticProviderId, customerTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Service Cost (including history) from Warehouse
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfServiceCostDto>> ApiServicesAppWarehouseGetservicecostlistGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetServiceCostList?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfServiceCostDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Key numbers for Warehouse
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<KeyNumbersDto>> ApiServicesAppWarehouseGetkeynumbersGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseGetkeynumbersGetAsync(fromDate, toDate, logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Key numbers for Warehouse
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<KeyNumbersDto>> ApiServicesAppWarehouseGetkeynumbersGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetKeyNumbers?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<KeyNumbersDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets all the products variants
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="filter">Filter By Id, Vendor, Product Title, SKU</param>
        /// <param name="status">VeryCritical=0, Critical=1, Normal=2</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfWarehouseProductVariantDto>> ApiServicesAppWarehouseGetallproductvariantsGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, string filter, ProductCriticality? status, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppWarehouseGetallproductvariantsGetAsync(logisticProviderId, customerTenantId, salesChannelId, filter, status, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all the products variants
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="filter">Filter By Id, Vendor, Product Title, SKU</param>
        /// <param name="status">VeryCritical=0, Critical=1, Normal=2</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfWarehouseProductVariantDto>> ApiServicesAppWarehouseGetallproductvariantsGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, string filter, ProductCriticality? status, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetAllProductVariants?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfWarehouseProductVariantDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get information for warehouse map
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfWarehouseMapEntityDto>> ApiServicesAppWarehouseGetwarehousemapentitiesGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseGetwarehousemapentitiesGetAsync(logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get information for warehouse map
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfWarehouseMapEntityDto>> ApiServicesAppWarehouseGetwarehousemapentitiesGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetWarehouseMapEntities?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfWarehouseMapEntityDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get location information for Sales channel product variant in the Warehouse
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelProductVariantId">Sales Channel Product Variant Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfWarehouseProductVariantLocationDto>> ApiServicesAppWarehouseGetallwarehousevariantlocationsGetAsync(int? logisticProviderId, int? customerTenantId, long? salesChannelProductVariantId)
        {
            return ApiServicesAppWarehouseGetallwarehousevariantlocationsGetAsync(logisticProviderId, customerTenantId, salesChannelProductVariantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get location information for Sales channel product variant in the Warehouse
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelProductVariantId">Sales Channel Product Variant Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfWarehouseProductVariantLocationDto>> ApiServicesAppWarehouseGetallwarehousevariantlocationsGetAsync(int? logisticProviderId, int? customerTenantId, long? salesChannelProductVariantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetAllWarehouseVariantLocations?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelProductVariantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelProductVariantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelProductVariantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfWarehouseProductVariantLocationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Inventory rules | Sales Channel user only
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<InventoryRule>> ApiServicesAppWarehouseGetinventoryrulesGetAsync()
        {
            return ApiServicesAppWarehouseGetinventoryrulesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Inventory rules | Sales Channel user only
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<InventoryRule>> ApiServicesAppWarehouseGetinventoryrulesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/GetInventoryRules");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<InventoryRule>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Inventory Rules | Sales Channel user only
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWarehouseUpdateinventoryrulesPutAsync(InventoryRule body)
        {
            return ApiServicesAppWarehouseUpdateinventoryrulesPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Inventory Rules | Sales Channel user only
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWarehouseUpdateinventoryrulesPutAsync(InventoryRule body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Warehouse/UpdateInventoryRules");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all warehouse connections
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfWarehouseConnectionDto>> ApiServicesAppWarehouseconnectionGetallwarehouseconnectionsGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter)
        {
            return ApiServicesAppWarehouseconnectionGetallwarehouseconnectionsGetAsync(sorting, maxResultCount, skipCount, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all warehouse connections
        /// </summary>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfWarehouseConnectionDto>> ApiServicesAppWarehouseconnectionGetallwarehouseconnectionsGetAsync(string sorting, int? maxResultCount, int? skipCount, string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseConnection/GetAllWarehouseConnections?");
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfWarehouseConnectionDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get warehouse connection by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WarehouseConnectionDto>> ApiServicesAppWarehouseconnectionGetwarehouseconnectionbyidGetAsync(int? id)
        {
            return ApiServicesAppWarehouseconnectionGetwarehouseconnectionbyidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse connection by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WarehouseConnectionDto>> ApiServicesAppWarehouseconnectionGetwarehouseconnectionbyidGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseConnection/GetWarehouseConnectionById?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WarehouseConnectionDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update Warehouse Connection
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWarehouseconnectionCreateorupdatewarehouseconnectionPostAsync(CreateOrUpdateWarehouseConnectionInput body)
        {
            return ApiServicesAppWarehouseconnectionCreateorupdatewarehouseconnectionPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update Warehouse Connection
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWarehouseconnectionCreateorupdatewarehouseconnectionPostAsync(CreateOrUpdateWarehouseConnectionInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseConnection/CreateOrUpdateWarehouseConnection");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update basic details of Warehouse Connection
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWarehouseconnectionUpdatebasicwarehouseconnectionPutAsync(UpdateBasicWarehouseConnectionInput body)
        {
            return ApiServicesAppWarehouseconnectionUpdatebasicwarehouseconnectionPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update basic details of Warehouse Connection
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWarehouseconnectionUpdatebasicwarehouseconnectionPutAsync(UpdateBasicWarehouseConnectionInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseConnection/UpdateBasicWarehouseConnection");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Warehouse Connection by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWarehouseconnectionDeletewarehouseconnectionDeleteAsync(int? id)
        {
            return ApiServicesAppWarehouseconnectionDeletewarehouseconnectionDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Warehouse Connection by Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWarehouseconnectionDeletewarehouseconnectionDeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseConnection/DeleteWarehouseConnection?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get details on sync time
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<IntegratorSyncDto>> ApiServicesAppWarehouseconnectionGetsyncdetailsbywarehouseconnectionidGetAsync(int? id)
        {
            return ApiServicesAppWarehouseconnectionGetsyncdetailsbywarehouseconnectionidGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details on sync time
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<IntegratorSyncDto>> ApiServicesAppWarehouseconnectionGetsyncdetailsbywarehouseconnectionidGetAsync(int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseConnection/GetSyncDetailsByWarehouseConnectionId?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<IntegratorSyncDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update sync details
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWarehouseconnectionUpdatesyncdetailsPutAsync(IntegratorSyncDto body)
        {
            return ApiServicesAppWarehouseconnectionUpdatesyncdetailsPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update sync details
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWarehouseconnectionUpdatesyncdetailsPutAsync(IntegratorSyncDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseConnection/UpdateSyncDetails");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns time for most critical order
        /// </summary>
        /// <param name="logisticProviderId">Supply logisticProvider Id if you want to get information from a specific LP</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<TimeLeftMostCriticalOrderDto>> ApiServicesAppWarehouseorderGettimeleftmostcriticalorderGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehouseorderGettimeleftmostcriticalorderGetAsync(logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns time for most critical order
        /// </summary>
        /// <param name="logisticProviderId">Supply logisticProvider Id if you want to get information from a specific LP</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<TimeLeftMostCriticalOrderDto>> ApiServicesAppWarehouseorderGettimeleftmostcriticalorderGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseOrder/GetTimeLeftMostCriticalOrder?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<TimeLeftMostCriticalOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of all the critical orders
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="includeLineItems">Boolean to include line items in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfCriticalOrdersDto>> ApiServicesAppWarehouseorderGetallcriticalordersGetAsync(int? logisticProviderId, int? salesChannelId, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppWarehouseorderGetallcriticalordersGetAsync(logisticProviderId, salesChannelId, includeLineItems, includeFulfillments, includeShippingAddress, customerTenantId, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of all the critical orders
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="includeLineItems">Boolean to include line items in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfCriticalOrdersDto>> ApiServicesAppWarehouseorderGetallcriticalordersGetAsync(int? logisticProviderId, int? salesChannelId, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseOrder/GetAllCriticalOrders?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfCriticalOrdersDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order list
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>> ApiServicesAppWarehouseorderGetallordersGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus)
        {
            return ApiServicesAppWarehouseorderGetallordersGetAsync(logisticProviderId, salesChannelId, fromDate, toDate, fromClosedDate, toClosedDate, includeLineItems, includeFulfillments, includeShippingAddress, includeOrderTracking, status, lineItemName, lineItemSku, filter, trackingStatus, customerTenantId, sorting, maxResultCount, skipCount, mergeBundleLineItems, deliveryStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order list
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="fromClosedDate">From Closed At Date</param>
        /// <param name="toClosedDate">To Closed At Date</param>
        /// <param name="includeLineItems">Boolean to include LineItems in result</param>
        /// <param name="includeFulfillments">Boolean to include fulfillments in result</param>
        /// <param name="includeShippingAddress">Boolean to include ShippingAddress in result</param>
        /// <param name="includeOrderTracking">Boolean to include OrderTracking in result</param>
        /// <param name="status">Filter by Order Status. Status can be any of partial, fulfilled, pending, onhold, cancelled or refunded | Sorting Parameter</param>
        /// <param name="lineItemName">Filter by line item name</param>
        /// <param name="lineItemSku">Filter by line item sku</param>
        /// <param name="filter">Filter order - currently only filter by Id is supported</param>
        /// <param name="trackingStatus">Filter by tracking status | Available only for premium tracking users</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <param name="mergeBundleLineItems">Replace bundle line item with actual items of the bundle item</param>
        /// <param name="deliveryStatus">Delivery status managed by Prime Penguin</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>> ApiServicesAppWarehouseorderGetallordersGetAsync(int? logisticProviderId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, DateTimeOffset? fromClosedDate, DateTimeOffset? toClosedDate, bool? includeLineItems, bool? includeFulfillments, bool? includeShippingAddress, bool? includeOrderTracking, string status, string lineItemName, string lineItemSku, string filter, string trackingStatus, int? customerTenantId, string sorting, int? maxResultCount, int? skipCount, bool? mergeBundleLineItems, PrimePenguinManagedDeliveryStatus? deliveryStatus, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseOrder/GetAllOrders?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromClosedDate") + "=").Append(System.Uri.EscapeDataString(fromClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toClosedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToClosedDate") + "=").Append(System.Uri.EscapeDataString(toClosedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeFulfillments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeFulfillments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeFulfillments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeShippingAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeShippingAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeShippingAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOrderTracking != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeOrderTracking") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOrderTracking, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItemSku != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineItemSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trackingStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TrackingStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeBundleLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MergeBundleLineItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeBundleLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deliveryStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeliveryStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfSalesChannelOrderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order key indexes excluding dropship orders
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<OrderInformationDto>> ApiServicesAppWarehouseorderGetorderinformationGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate)
        {
            return ApiServicesAppWarehouseorderGetorderinformationGetAsync(logisticProviderId, customerTenantId, salesChannelId, fromDate, toDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order key indexes excluding dropship orders
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<OrderInformationDto>> ApiServicesAppWarehouseorderGetorderinformationGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseOrder/GetOrderInformation?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<OrderInformationDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get number of orders created each day filtered by month
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>> ApiServicesAppWarehouseorderGetordercountperdaybymonthGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate)
        {
            return ApiServicesAppWarehouseorderGetordercountperdaybymonthGetAsync(logisticProviderId, customerTenantId, salesChannelId, fromDate, toDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get number of orders created each day filtered by month
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>> ApiServicesAppWarehouseorderGetordercountperdaybymonthGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseOrder/GetOrderCountPerDayByMonth?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IEnumerable<PrimePenguinResponse<OrderCountPerDayByMonthDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Overview for Returns
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ReturnsOverviewDto>> ApiServicesAppWarehousereturnGetreturnsoverviewGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId)
        {
            return ApiServicesAppWarehousereturnGetreturnsoverviewGetAsync(fromDate, toDate, logisticProviderId, customerTenantId, salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Overview for Returns
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ReturnsOverviewDto>> ApiServicesAppWarehousereturnGetreturnsoverviewGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? logisticProviderId, int? customerTenantId, int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseReturn/GetReturnsOverview?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ReturnsOverviewDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of all the returns
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfOrderReturnDto>> ApiServicesAppWarehousereturnGetreturnsGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppWarehousereturnGetreturnsGetAsync(logisticProviderId, customerTenantId, salesChannelId, fromDate, toDate, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of all the returns
        /// </summary>
        /// <param name="logisticProviderId">Logistic Provider Id</param>
        /// <param name="customerTenantId">Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="fromDate">FromImportedDate</param>
        /// <param name="toDate">ToImportedDate</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfOrderReturnDto>> ApiServicesAppWarehousereturnGetreturnsGetAsync(int? logisticProviderId, int? customerTenantId, int? salesChannelId, DateTimeOffset? fromDate, DateTimeOffset? toDate, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WarehouseReturn/GetReturns?");
            if (logisticProviderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LogisticProviderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logisticProviderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfOrderReturnDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Install WebFlow Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebflowInstallwebflowPostAsync(InstallWebflowInput body)
        {
            return ApiServicesAppWebflowInstallwebflowPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Install WebFlow Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebflowInstallwebflowPostAsync(InstallWebflowInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebFlow/InstallWebFlow");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when an Order is Created or Updated in WebFlow Sales Channel.
        /// <br/>This API should only be used by WebFlow Sales Channel.
        /// </summary>
        /// <param name="siteId">site id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebflowhookProcessorderPostAsync(int? salesChannelId, string securityKey, string siteId, OrderModel body)
        {
            return ApiServicesAppWebflowhookProcessorderPostAsync(salesChannelId, securityKey, siteId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when an Order is Created or Updated in WebFlow Sales Channel.
        /// <br/>This API should only be used by WebFlow Sales Channel.
        /// </summary>
        /// <param name="siteId">site id</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebflowhookProcessorderPostAsync(int? salesChannelId, string securityKey, string siteId, OrderModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebFlowHook/ProcessOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (siteId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("siteId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(siteId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when an Product is Created or Updated in WebFlow Sales Channel.
        /// <br/>This API should only be used by WebFlow Sales Channel.
        /// </summary>
        /// <param name="salesChannelId">sales channel Id</param>
        /// <param name="securityKey">security token of hook request</param>
        /// <param name="siteId">site id</param>
        /// <param name="body">created or update inventory</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebflowhookUpdateinventoryPostAsync(int? salesChannelId, string securityKey, string siteId, InventoryHook body)
        {
            return ApiServicesAppWebflowhookUpdateinventoryPostAsync(salesChannelId, securityKey, siteId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when an Product is Created or Updated in WebFlow Sales Channel.
        /// <br/>This API should only be used by WebFlow Sales Channel.
        /// </summary>
        /// <param name="salesChannelId">sales channel Id</param>
        /// <param name="securityKey">security token of hook request</param>
        /// <param name="siteId">site id</param>
        /// <param name="body">created or update inventory</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebflowhookUpdateinventoryPostAsync(int? salesChannelId, string securityKey, string siteId, InventoryHook body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebFlowHook/UpdateInventory?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (securityKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("securityKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(securityKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (siteId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("siteId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(siteId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebflowhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppWebflowhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebflowhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebFlowHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebflowhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppWebflowhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebflowhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebFlowHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WebhookEvent>> ApiServicesAppWebhookeventGetGetAsync(string id)
        {
            return ApiServicesAppWebhookeventGetGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WebhookEvent>> ApiServicesAppWebhookeventGetGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookEvent/Get?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WebhookEvent>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets list of recorded webhooks
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="showOnlyFailedWebhooks">Filter only failed webhooks</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfWebhookRecorderDto>> ApiServicesAppWebhookrecorderGetrecordedwebhooksGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId, string salesChannelName, bool? showOnlyFailedWebhooks, string filter, string sorting, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppWebhookrecorderGetrecordedwebhooksGetAsync(fromDate, toDate, salesChannelId, salesChannelName, showOnlyFailedWebhooks, filter, sorting, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets list of recorded webhooks
        /// </summary>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="salesChannelId">Sales Channel Id</param>
        /// <param name="showOnlyFailedWebhooks">Filter only failed webhooks</param>
        /// <param name="filter">Filter by Supplier Name</param>
        /// <param name="sorting">Comma Seperated list of fields to sort the result with.
        /// <br/>For more information on sorting parameters, check the response schema of the API.
        /// <br/>Example: "id asc, date desc"</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfWebhookRecorderDto>> ApiServicesAppWebhookrecorderGetrecordedwebhooksGetAsync(DateTimeOffset? fromDate, DateTimeOffset? toDate, int? salesChannelId, string salesChannelName, bool? showOnlyFailedWebhooks, string filter, string sorting, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookRecorder/GetRecordedWebhooks?");
            if (fromDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ToDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesChannelName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SalesChannelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showOnlyFailedWebhooks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ShowOnlyFailedWebhooks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showOnlyFailedWebhooks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sorting != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sorting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sorting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfWebhookRecorderDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<PagedResultDtoOfGetAllSendAttemptsOutput>> ApiServicesAppWebhooksendattemptGetallsendattemptsGetAsync(string subscriptionId, int? maxResultCount, int? skipCount)
        {
            return ApiServicesAppWebhooksendattemptGetallsendattemptsGetAsync(subscriptionId, maxResultCount, skipCount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="maxResultCount">Maximum number of records to include in result. Defaults to 10</param>
        /// <param name="skipCount">Number of records to skip</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<PagedResultDtoOfGetAllSendAttemptsOutput>> ApiServicesAppWebhooksendattemptGetallsendattemptsGetAsync(string subscriptionId, int? maxResultCount, int? skipCount, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSendAttempt/GetAllSendAttempts?");
            if (subscriptionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SubscriptionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subscriptionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResultCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skipCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SkipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<PagedResultDtoOfGetAllSendAttemptsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfGetAllSendAttemptsOfWebhookEventOutput>> ApiServicesAppWebhooksendattemptGetallsendattemptsofwebhookeventGetAsync(string id)
        {
            return ApiServicesAppWebhooksendattemptGetallsendattemptsofwebhookeventGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfGetAllSendAttemptsOfWebhookEventOutput>> ApiServicesAppWebhooksendattemptGetallsendattemptsofwebhookeventGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSendAttempt/GetAllSendAttemptsOfWebhookEvent?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfGetAllSendAttemptsOfWebhookEventOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebhooksendattemptResendPostAsync(string sendAttemptId)
        {
            return ApiServicesAppWebhooksendattemptResendPostAsync(sendAttemptId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebhooksendattemptResendPostAsync(string sendAttemptId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSendAttempt/Resend?");
            if (sendAttemptId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sendAttemptId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sendAttemptId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<string>> ApiServicesAppWebhooksubscriptionPublishtestwebhookPostAsync()
        {
            return ApiServicesAppWebhooksubscriptionPublishtestwebhookPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<string>> ApiServicesAppWebhooksubscriptionPublishtestwebhookPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/PublishTestWebhook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfGetAllSubscriptionsOutput>> ApiServicesAppWebhooksubscriptionGetallsubscriptionsGetAsync()
        {
            return ApiServicesAppWebhooksubscriptionGetallsubscriptionsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfGetAllSubscriptionsOutput>> ApiServicesAppWebhooksubscriptionGetallsubscriptionsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/GetAllSubscriptions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfGetAllSubscriptionsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<WebhookSubscription>> ApiServicesAppWebhooksubscriptionGetsubscriptionGetAsync(string subscriptionId)
        {
            return ApiServicesAppWebhooksubscriptionGetsubscriptionGetAsync(subscriptionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<WebhookSubscription>> ApiServicesAppWebhooksubscriptionGetsubscriptionGetAsync(string subscriptionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/GetSubscription?");
            if (subscriptionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subscriptionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subscriptionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<WebhookSubscription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebhooksubscriptionAddsubscriptionPostAsync(WebhookSubscription body)
        {
            return ApiServicesAppWebhooksubscriptionAddsubscriptionPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebhooksubscriptionAddsubscriptionPostAsync(WebhookSubscription body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/AddSubscription");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebhooksubscriptionUpdatesubscriptionPutAsync(WebhookSubscription body)
        {
            return ApiServicesAppWebhooksubscriptionUpdatesubscriptionPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebhooksubscriptionUpdatesubscriptionPutAsync(WebhookSubscription body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/UpdateSubscription");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWebhooksubscriptionActivatewebhooksubscriptionPostAsync(ActivateWebhookSubscriptionInput body)
        {
            return ApiServicesAppWebhooksubscriptionActivatewebhooksubscriptionPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWebhooksubscriptionActivatewebhooksubscriptionPostAsync(ActivateWebhookSubscriptionInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/ActivateWebhookSubscription");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<bool>> ApiServicesAppWebhooksubscriptionIssubscribedPostAsync(string webhookName)
        {
            return ApiServicesAppWebhooksubscriptionIssubscribedPostAsync(webhookName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<bool>> ApiServicesAppWebhooksubscriptionIssubscribedPostAsync(string webhookName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/IsSubscribed?");
            if (webhookName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfGetAllSubscriptionsOutput>> ApiServicesAppWebhooksubscriptionGetallsubscriptionsiffeaturesgrantedGetAsync(string webhookName)
        {
            return ApiServicesAppWebhooksubscriptionGetallsubscriptionsiffeaturesgrantedGetAsync(webhookName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfGetAllSubscriptionsOutput>> ApiServicesAppWebhooksubscriptionGetallsubscriptionsiffeaturesgrantedGetAsync(string webhookName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/GetAllSubscriptionsIfFeaturesGranted?");
            if (webhookName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfGetAllSubscriptionsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<ListResultDtoOfGetAllAvailableWebhooksOutput>> ApiServicesAppWebhooksubscriptionGetallavailablewebhooksGetAsync()
        {
            return ApiServicesAppWebhooksubscriptionGetallavailablewebhooksGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<ListResultDtoOfGetAllAvailableWebhooksOutput>> ApiServicesAppWebhooksubscriptionGetallavailablewebhooksGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebhookSubscription/GetAllAvailableWebhooks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<ListResultDtoOfGetAllAvailableWebhooksOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<GetLatestWebLogsOutput>> ApiServicesAppWeblogGetlatestweblogsGetAsync()
        {
            return ApiServicesAppWeblogGetlatestweblogsGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<GetLatestWebLogsOutput>> ApiServicesAppWeblogGetlatestweblogsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebLog/GetLatestWebLogs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<GetLatestWebLogsOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<FileDto>> ApiServicesAppWeblogDownloadweblogsPostAsync()
        {
            return ApiServicesAppWeblogDownloadweblogsPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<FileDto>> ApiServicesAppWeblogDownloadweblogsPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WebLog/DownloadWebLogs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<FileDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get wix install url
        /// </summary>
        /// <param name="state">user authorization token</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppWixGetwixinstallurlGetAsync(string state)
        {
            return ApiServicesAppWixGetwixinstallurlGetAsync(state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get wix install url
        /// </summary>
        /// <param name="state">user authorization token</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task<PrimePenguinResponse<SalesChannelInstallUrlOutput>> ApiServicesAppWixGetwixinstallurlGetAsync(string state, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Wix/GetWixInstallUrl?");
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrimePenguinResponse<SalesChannelInstallUrlOutput>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PrimePenguinServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Only to be used be Wix to Authorize user after installation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWixInstallwixGetAsync(string instanceId, string code, string state)
        {
            return ApiServicesAppWixInstallwixGetAsync(instanceId, code, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Only to be used be Wix to Authorize user after installation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWixInstallwixGetAsync(string instanceId, string code, string state, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/Wix/InstallWix?");
            if (instanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when Wix App is Uninstalled from Sales Channel.
        /// <br/>This API should only be used by Wix Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWixhookAppuninstallPostAsync()
        {
            return ApiServicesAppWixhookAppuninstallPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when Wix App is Uninstalled from Sales Channel.
        /// <br/>This API should only be used by Wix Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWixhookAppuninstallPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WixHook/AppUninstall");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Product is Created or Updated in WIX Sales Channel.
        /// <br/>This API should only be used by WIX Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWixhookManageproductPostAsync()
        {
            return ApiServicesAppWixhookManageproductPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Product is Created or Updated in WIX Sales Channel.
        /// <br/>This API should only be used by WIX Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWixhookManageproductPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WixHook/ManageProduct");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Webhook called when a Order is Created or Updated in WIX Sales Channel.
        /// <br/>This API should only be used by WIX Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWixhookManageorderPostAsync()
        {
            return ApiServicesAppWixhookManageorderPostAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook called when a Order is Created or Updated in WIX Sales Channel.
        /// <br/>This API should only be used by WIX Sales Channel.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWixhookManageorderPostAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WixHook/ManageOrder");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWixhookProcesshookPostAsync(WixHookInput body)
        {
            return ApiServicesAppWixhookProcesshookPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWixhookProcesshookPostAsync(WixHookInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WixHook/ProcessHook");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWixhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body)
        {
            return ApiServicesAppWixhookCreateorupdateproductPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWixhookCreateorupdateproductPostAsync(int? salesChannelId, SalesChannelProduct body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WixHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWixhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body)
        {
            return ApiServicesAppWixhookCreateorupdateorderPostAsync(salesChannelId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWixhookCreateorupdateorderPostAsync(int? salesChannelId, SalesChannelOrder body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WixHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Install WooCommerce Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWoocommerceInstallwoocommercePostAsync(InstallWooCommerceInput body)
        {
            return ApiServicesAppWoocommerceInstallwoocommercePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Install WooCommerce Sales Channel
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWoocommerceInstallwoocommercePostAsync(InstallWooCommerceInput body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WooCommerce/InstallWooCommerce");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWoocommercehookCreateorupdateproductPostAsync(int? salesChannelId)
        {
            return ApiServicesAppWoocommercehookCreateorupdateproductPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWoocommercehookCreateorupdateproductPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WooCommerceHook/CreateOrUpdateProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWoocommercehookDeleteproductPostAsync(int? salesChannelId)
        {
            return ApiServicesAppWoocommercehookDeleteproductPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWoocommercehookDeleteproductPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WooCommerceHook/DeleteProduct?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWoocommercehookCreateorupdateorderPostAsync(int? salesChannelId)
        {
            return ApiServicesAppWoocommercehookCreateorupdateorderPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWoocommercehookCreateorupdateorderPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WooCommerceHook/CreateOrUpdateOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWoocommercehookDeleteorderPostAsync(int? salesChannelId)
        {
            return ApiServicesAppWoocommercehookDeleteorderPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWoocommercehookDeleteorderPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WooCommerceHook/DeleteOrder?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWoocommercehookCreateorupdatecustomerPostAsync(int? salesChannelId)
        {
            return ApiServicesAppWoocommercehookCreateorupdatecustomerPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWoocommercehookCreateorupdatecustomerPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WooCommerceHook/CreateOrUpdateCustomer?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual Task ApiServicesAppWoocommercehookDeletecustomerPostAsync(int? salesChannelId)
        {
            return ApiServicesAppWoocommercehookDeletecustomerPostAsync(salesChannelId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="PrimePenguinServiceException">A server side error occurred.</exception>
        public virtual async Task ApiServicesAppWoocommercehookDeletecustomerPostAsync(int? salesChannelId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/app/WooCommerceHook/DeleteCustomer?");
            if (salesChannelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesChannelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesChannelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PrimePenguinServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PrimePenguinServiceException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new JsonTextReader(streamReader))
                    {
                        var serializer = JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PrimePenguinServiceException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsTenantAvailableInput
    {
        [JsonProperty("tenancyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string TenancyName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TenantAvailabilityState
    {

        Available = 1,

        InActive = 2,

        NotFound = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsTenantAvailableOutput
    {
        [JsonProperty("state", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantAvailabilityState State { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("serverRootAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ServerRootAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResolveTenantIdInput
    {
        [JsonProperty("c", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string C { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterInput
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(64)]
        public string Name { get; set; }

        [JsonProperty("surname", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(64)]
        public string Surname { get; set; }

        [JsonProperty("userName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string UserName { get; set; }

        [JsonProperty("emailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string EmailAddress { get; set; }

        [JsonProperty("password", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(32)]
        public string Password { get; set; }

        [JsonProperty("captchaResponse", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CaptchaResponse { get; set; }

        [JsonProperty("phoneNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterOutput
    {
        [JsonProperty("canLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool CanLogin { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendPasswordResetCodeInput
    {
        [JsonProperty("emailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string EmailAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResetPasswordInput
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("resetCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ResetCode { get; set; }

        [JsonProperty("password", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        [JsonProperty("returnUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ReturnUrl { get; set; }

        [JsonProperty("singleSignIn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SingleSignIn { get; set; }

        /// <summary>
        /// Encrypted values for {TenantId}, {UserId} and {ResetCode}
        /// </summary>
        [JsonProperty("c", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string C { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResetPasswordOutput
    {
        [JsonProperty("canLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool CanLogin { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendEmailActivationLinkInput
    {
        [JsonProperty("emailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string EmailAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivateEmailInput
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("confirmationCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConfirmationCode { get; set; }

        /// <summary>
        /// Encrypted values for {TenantId}, {UserId} and {ConfirmationCode}
        /// </summary>
        [JsonProperty("c", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string C { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpersonateInput
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long UserId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpersonateOutput
    {
        [JsonProperty("impersonationToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImpersonationToken { get; set; }

        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DelegatedImpersonateInput
    {
        [JsonProperty("userDelegationId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserDelegationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwitchToLinkedAccountInput
    {
        [JsonProperty("targetTenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TargetTenantId { get; set; }

        [JsonProperty("targetUserId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long TargetUserId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwitchToLinkedAccountOutput
    {
        [JsonProperty("switchAccountToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SwitchAccountToken { get; set; }

        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditLogListDto
    {
        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? UserId { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("impersonatorTenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ImpersonatorTenantId { get; set; }

        [JsonProperty("impersonatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? ImpersonatorUserId { get; set; }

        [JsonProperty("serviceName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [JsonProperty("methodName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MethodName { get; set; }

        [JsonProperty("parameters", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Parameters { get; set; }

        [JsonProperty("executionTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset ExecutionTime { get; set; }

        [JsonProperty("executionDuration", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ExecutionDuration { get; set; }

        [JsonProperty("clientIpAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientIpAddress { get; set; }

        [JsonProperty("clientName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientName { get; set; }

        [JsonProperty("browserInfo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string BrowserInfo { get; set; }

        [JsonProperty("exception", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Exception { get; set; }

        [JsonProperty("customData", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomData { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfAuditLogListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<AuditLogListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileDto
    {
        [JsonProperty("fileName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string FileName { get; set; }

        [JsonProperty("fileType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FileType { get; set; }

        [JsonProperty("fileToken", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string FileToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValueDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityChangeType
    {

        Created = 0,

        Updated = 1,

        Deleted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityChangeListDto
    {
        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? UserId { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("changeTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset ChangeTime { get; set; }

        [JsonProperty("entityTypeFullName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityTypeFullName { get; set; }

        [JsonProperty("changeType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EntityChangeType ChangeType { get; set; }

        [JsonProperty("changeTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ChangeTypeName { get; set; }

        [JsonProperty("entityChangeSetId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long EntityChangeSetId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfEntityChangeListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<EntityChangeListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityPropertyChangeDto
    {
        [JsonProperty("entityChangeId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long EntityChangeId { get; set; }

        [JsonProperty("newValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NewValue { get; set; }

        [JsonProperty("originalValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalValue { get; set; }

        [JsonProperty("propertyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        [JsonProperty("propertyTypeFullName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PropertyTypeFullName { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallBigCommerceInput
    {
        /// <summary>
        /// Base API Path
        /// </summary>
        [JsonProperty("apiPath", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiPath { get; set; }

        /// <summary>
        /// Access Token
        /// </summary>
        [JsonProperty("accessToken", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Consumer Key
        /// </summary>
        [JsonProperty("consumerKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ConsumerKey { get; set; }

        /// <summary>
        /// Consumer Secret
        /// </summary>
        [JsonProperty("consumerSecret", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ConsumerSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BigCommerceHookInput
    {
        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Inventory
    {
        /// <summary>
        /// ID of the product
        /// </summary>
        [JsonProperty("product_id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        /// <summary>
        /// absolute – inventory updated by an order&lt;br /&gt;relative – inventory updated using the API or the Control Panel
        /// </summary>
        [JsonProperty("method", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Method { get; set; }

        /// <summary>
        /// The number of items that the inventory changed by. This can be negative if the inventory is decreased -3 or positive if an item is returned to the inventory from an order, +2
        /// </summary>
        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Value { get; set; }

        /// <summary>
        /// ID of the variant
        /// </summary>
        [JsonProperty("variant_id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Variant_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventData
    {
        /// <summary>
        /// entity type
        /// </summary>
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Entity Id
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        [JsonProperty("inventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Inventory Inventory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BigCommerceWebhookPayload
    {
        /// <summary>
        /// Unix timestamp of the date the hook was created.
        /// </summary>
        [JsonProperty("created_at", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Created_at { get; set; }

        /// <summary>
        /// A numerical identifier that is unique to each store.
        /// </summary>
        [JsonProperty("store_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Store_id { get; set; }

        /// <summary>
        /// Will always follow the pattern stores/store_hash. This is the store that created the webhook.
        /// </summary>
        [JsonProperty("producer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Producer { get; set; }

        /// <summary>
        /// The event registered when the webhook was created.
        /// </summary>
        [JsonProperty("scope", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Scope { get; set; }

        /// <summary>
        /// The payload data json encoded then passed through SH1 encryption.
        /// </summary>
        [JsonProperty("hash", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Hash { get; set; }

        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EventData Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalesChannelProductType
    {

        Simple = 0,

        Bundle = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddedBy
    {

        SalesChannel = 0,

        LogisticProvider = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseProductVariantLocation
    {
        [JsonProperty("warehouseName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string WarehouseName { get; set; }

        [JsonProperty("location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Location { get; set; }

        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        [JsonProperty("inDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? InDate { get; set; }

        [JsonProperty("expiryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ExpiryDate { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [JsonProperty("width", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Width { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string DimensionUnit { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string WeightUnit { get; set; }

        [JsonProperty("salesChannelProductVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductVariantId { get; set; }

        [JsonProperty("salesChannelProductVariant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProductVariant SalesChannelProductVariant { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TenantType
    {

        Eshop = 0,

        LogisticProvider = 1,

        Integrator = 2,

        Unknown = 1000,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LeadType
    {

        PrimePenguinLead = 0,

        LogisticProviderInternalClient = 1,

        LogisticProviderNewClient = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionPaymentType
    {

        Manual = 0,

        RecurringAutomatic = 1,

        RecurringManual = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Edition
    {
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(32)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string DisplayName { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deleterUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? DeleterUserId { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserOrganizationUnit
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("organizationUnitId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long OrganizationUnitId { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserToken
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("loginProvider", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(128)]
        public string LoginProvider { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(128)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(512)]
        public string Value { get; set; }

        [JsonProperty("expireDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ExpireDate { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserLogin
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("loginProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string LoginProvider { get; set; }

        [JsonProperty("providerKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string ProviderKey { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRole
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("roleId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int RoleId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserClaim
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("claimType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(256)]
        public string ClaimType { get; set; }

        [JsonProperty("claimValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClaimValue { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserPermissionSetting
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string Name { get; set; }

        [JsonProperty("isGranted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsGranted { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Setting
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? UserId { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        [JsonProperty("profilePictureId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? ProfilePictureId { get; set; }

        [JsonProperty("shouldChangePasswordOnNextLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ShouldChangePasswordOnNextLogin { get; set; }

        [JsonProperty("signInTokenExpireTimeUtc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SignInTokenExpireTimeUtc { get; set; }

        [JsonProperty("signInToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SignInToken { get; set; }

        [JsonProperty("googleAuthenticatorKey", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GoogleAuthenticatorKey { get; set; }

        [JsonProperty("organizationUnits", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserOrganizationUnit> OrganizationUnits { get; set; }

        [JsonProperty("acceptedTermsAndConditionDateTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? AcceptedTermsAndConditionDateTime { get; set; }

        [JsonProperty("normalizedUserName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string NormalizedUserName { get; set; }

        [JsonProperty("normalizedEmailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string NormalizedEmailAddress { get; set; }

        [JsonProperty("concurrencyStamp", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(128)]
        public string ConcurrencyStamp { get; set; }

        [JsonProperty("tokens", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserToken> Tokens { get; set; }

        [JsonProperty("deleterUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User DeleterUser { get; set; }

        [JsonProperty("creatorUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User CreatorUser { get; set; }

        [JsonProperty("lastModifierUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User LastModifierUser { get; set; }

        [JsonProperty("authenticationSource", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(64)]
        public string AuthenticationSource { get; set; }

        [JsonProperty("userName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string UserName { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("emailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string EmailAddress { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string Name { get; set; }

        [JsonProperty("surname", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string Surname { get; set; }

        [JsonProperty("fullName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FullName { get; set; }

        [JsonProperty("password", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string Password { get; set; }

        [JsonProperty("emailConfirmationCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(328)]
        public string EmailConfirmationCode { get; set; }

        [JsonProperty("passwordResetCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(328)]
        public string PasswordResetCode { get; set; }

        [JsonProperty("lockoutEndDateUtc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LockoutEndDateUtc { get; set; }

        [JsonProperty("accessFailedCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int AccessFailedCount { get; set; }

        [JsonProperty("isLockoutEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsLockoutEnabled { get; set; }

        [JsonProperty("phoneNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(32)]
        public string PhoneNumber { get; set; }

        [JsonProperty("isPhoneNumberConfirmed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPhoneNumberConfirmed { get; set; }

        [JsonProperty("securityStamp", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(128)]
        public string SecurityStamp { get; set; }

        [JsonProperty("isTwoFactorEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTwoFactorEnabled { get; set; }

        [JsonProperty("logins", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserLogin> Logins { get; set; }

        [JsonProperty("roles", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserRole> Roles { get; set; }

        [JsonProperty("claims", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserClaim> Claims { get; set; }

        [JsonProperty("permissions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserPermissionSetting> Permissions { get; set; }

        [JsonProperty("settings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Setting> Settings { get; set; }

        [JsonProperty("isEmailConfirmed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEmailConfirmed { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deleterUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? DeleterUserId { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tenant
    {
        [JsonProperty("subscriptionEndDateUtc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SubscriptionEndDateUtc { get; set; }

        [JsonProperty("tenantType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantType TenantType { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(10)]
        public string Currency { get; set; }

        [JsonProperty("partnershipFee", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double PartnershipFee { get; set; }

        [JsonProperty("isInTrialPeriod", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsInTrialPeriod { get; set; }

        [JsonProperty("customCssId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? CustomCssId { get; set; }

        [JsonProperty("logoId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? LogoId { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string StoreName { get; set; }

        [JsonProperty("eShopAddressUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string EShopAddressUrl { get; set; }

        [JsonProperty("eShopAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string EShopAddress { get; set; }

        [JsonProperty("eShopSize", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string EShopSize { get; set; }

        [JsonProperty("isSharpTenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSharpTenant { get; set; }

        [JsonProperty("leadType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LeadType LeadType { get; set; }

        [JsonProperty("countries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Countries { get; set; }

        [JsonProperty("logoFileType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(64)]
        public string LogoFileType { get; set; }

        [JsonProperty("subscriptionPaymentType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionPaymentType SubscriptionPaymentType { get; set; }

        [JsonProperty("specialEditionMonthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? SpecialEditionMonthlyPrice { get; set; }

        [JsonProperty("vat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 100)]
        public int? Vat { get; set; }

        [JsonProperty("edition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Edition Edition { get; set; }

        [JsonProperty("editionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? EditionId { get; set; }

        [JsonProperty("creatorUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User CreatorUser { get; set; }

        [JsonProperty("lastModifierUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User LastModifierUser { get; set; }

        [JsonProperty("deleterUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User DeleterUser { get; set; }

        [JsonProperty("tenancyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string TenancyName { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string Name { get; set; }

        [JsonProperty("connectionString", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1024)]
        public string ConnectionString { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deleterUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? DeleterUserId { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MappingConfigurationType
    {

        Country = 1,

        CountryCode = 2,

        State = 3,

        City = 4,

        Zip = 5,

        Tag = 6,

        Default = 10000,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogisticProviderType
    {

        Internal = 0,

        External = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderCustomerOrderPrice
    {
        [JsonProperty("logisticProviderCustomerId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderCustomerId { get; set; }

        [JsonProperty("logisticProviderCustomer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LogisticProviderCustomer LogisticProviderCustomer { get; set; }

        [JsonProperty("costPerOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double CostPerOrder { get; set; }

        [JsonProperty("otherCost", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double OtherCost { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deleterUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? DeleterUserId { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderCustomer
    {
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LogisticProvider LogisticProvider { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("tenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tenant Tenant { get; set; }

        [JsonProperty("agreementEndDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset AgreementEndDate { get; set; }

        [JsonProperty("fileName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string FileName { get; set; }

        [JsonProperty("contractName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ContractName { get; set; }

        [JsonProperty("currency", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(20)]
        public string Currency { get; set; }

        [JsonProperty("logisticProviderCustomerOrderPrices", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderCustomerOrderPrice> LogisticProviderCustomerOrderPrices { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deleterUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? DeleterUserId { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderInvoice
    {
        [JsonProperty("fileName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string FileName { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LogisticProvider LogisticProvider { get; set; }

        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [JsonProperty("grandTotal", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double GrandTotal { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Note { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(10)]
        public string Currency { get; set; }

        [JsonProperty("fromDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset FromDate { get; set; }

        [JsonProperty("toDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset ToDate { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderWarehouseConnection
    {
        [JsonProperty("warehouse", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Warehouse { get; set; }

        [JsonProperty("warehouseUserName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string WarehouseUserName { get; set; }

        [JsonProperty("warehousePassword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string WarehousePassword { get; set; }

        [JsonProperty("warehouseUri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string WarehouseUri { get; set; }

        [JsonProperty("goodsOwnerCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string GoodsOwnerCode { get; set; }

        [JsonProperty("goodsOwnerId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string GoodsOwnerId { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("syncInventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncInventory { get; set; }

        [JsonProperty("excludeInventorySku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(10000)]
        public string ExcludeInventorySku { get; set; }

        [JsonProperty("freeText1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string FreeText1 { get; set; }

        [JsonProperty("freeText2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string FreeText2 { get; set; }

        [JsonProperty("syncOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncOrders { get; set; }

        [JsonProperty("processOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ProcessOrders { get; set; }

        [JsonProperty("syncPurchaseOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncPurchaseOrders { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LogisticProvider LogisticProvider { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("tenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tenant Tenant { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProvider
    {
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Name { get; set; }

        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string Description { get; set; }

        [JsonProperty("logisticProviderType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LogisticProviderType LogisticProviderType { get; set; }

        [JsonProperty("customers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderCustomer> Customers { get; set; }

        [JsonProperty("address", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(300)]
        public string Address { get; set; }

        [JsonProperty("countries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Countries { get; set; }

        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("tenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tenant Tenant { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("logisticProviderInvoices", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderInvoice> LogisticProviderInvoices { get; set; }

        [JsonProperty("logisticProviderWarehouseConnections", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderWarehouseConnection> LogisticProviderWarehouseConnections { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductMapping
    {
        [JsonProperty("salesChannelProductVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductVariantId { get; set; }

        [JsonProperty("salesChannelProductVariant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProductVariant SalesChannelProductVariant { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("tenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tenant Tenant { get; set; }

        [JsonProperty("mappingConfigurationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MappingConfigurationType MappingConfigurationType { get; set; }

        [JsonProperty("mappingConfigurationValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string MappingConfigurationValue { get; set; }

        [JsonProperty("mappingPriority", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int MappingPriority { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LogisticProvider LogisticProvider { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelProductVariant
    {
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProductVariantId { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProductId { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Sku { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string Currency { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("costPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPrice { get; set; }

        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Option1 { get; set; }

        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Option2 { get; set; }

        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Option3 { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Barcode { get; set; }

        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string ImageSources { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string WeightUnit { get; set; }

        [JsonProperty("inventoryItemId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string InventoryItemId { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProductType SalesChannelProductType { get; set; }

        [JsonProperty("salesChannelProductId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductId { get; set; }

        [JsonProperty("salesChannelProduct", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProduct SalesChannelProduct { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("addedBy", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public AddedBy AddedBy { get; set; }

        [JsonProperty("warehouseProductVariantLocations", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehouseProductVariantLocation> WarehouseProductVariantLocations { get; set; }

        [JsonProperty("hsCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string HsCode { get; set; }

        [JsonProperty("countryOfOrigin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string CountryOfOrigin { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [JsonProperty("breadth", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Breadth { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string DimensionUnit { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("productMappings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProductMapping> ProductMappings { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelBundleProductVariant
    {
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProductVariantId { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Sku { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string Currency { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Barcode { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string WeightUnit { get; set; }

        [JsonProperty("bundleQuantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int BundleQuantity { get; set; }

        [JsonProperty("salesChannelProductId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductId { get; set; }

        [JsonProperty("salesChannelProduct", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProduct SalesChannelProduct { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalesChannelInstallationStatus
    {

        Installed = 0,

        Installing = 1,

        UnInstalling = 2,

        Uninstalled = 3,

        Invalid = 100,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelLineItem
    {
        [JsonProperty("salesChannelLineItemId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SalesChannelLineItemId { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("grams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Grams { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("priceWithoutTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? PriceWithoutTax { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("fulfillableQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FulfillableQuantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("variantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantId { get; set; }

        [JsonProperty("variantTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string VariantTitle { get; set; }

        [JsonProperty("totalDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalDiscount { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Name { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        [JsonProperty("lineItemProductType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProductType LineItemProductType { get; set; }

        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("salesChannelOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrder SalesChannelOrder { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelBundleLineItem
    {
        [JsonProperty("salesChannelLineItemId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SalesChannelLineItemId { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("grams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Grams { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("variantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantId { get; set; }

        [JsonProperty("variantTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string VariantTitle { get; set; }

        [JsonProperty("totalDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalDiscount { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Name { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("salesChannelOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrder SalesChannelOrder { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelFulfillment
    {
        [JsonProperty("salesChannelFulfillmentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SalesChannelFulfillmentId { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderId { get; set; }

        [JsonProperty("receipt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1500)]
        public string Receipt { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(30)]
        public string Status { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string TrackingUrl { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("salesChannelOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrder SalesChannelOrder { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundStatus
    {

        Accepted = 1,

        Unaccepted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReviewStatus
    {

        UnControlled = 1,

        Controlled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelRefundLineItem
    {
        [JsonProperty("salesChannelRefundLineItemId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelRefundLineItemId { get; set; }

        [JsonProperty("lineItemId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LineItemId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Title { get; set; }

        [JsonProperty("salesChannelOrderRefundId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderRefundId { get; set; }

        [JsonProperty("salesChannelOrderRefund", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderRefund SalesChannelOrderRefund { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderRefund
    {
        [JsonProperty("salesChannelOrderRefundId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SalesChannelOrderRefundId { get; set; }

        [JsonProperty("refundStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RefundStatus RefundStatus { get; set; }

        [JsonProperty("reviewStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewStatus ReviewStatus { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("cancelledReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledReason { get; set; }

        [JsonProperty("cancelledOrderImages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledOrderImages { get; set; }

        [JsonProperty("processedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ProcessedAt { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("refundLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelRefundLineItem> RefundLineItems { get; set; }

        [JsonProperty("restock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Restock { get; set; }

        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("salesChannelOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrder SalesChannelOrder { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderShippingAddress
    {
        [JsonProperty("salesChannelOrderShippingAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SalesChannelOrderShippingAddressId { get; set; }

        [JsonProperty("address1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Address1 { get; set; }

        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Address2 { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string City { get; set; }

        [JsonProperty("company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Company { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Country { get; set; }

        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string CountryCode { get; set; }

        [JsonProperty("firstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FirstName { get; set; }

        [JsonProperty("lastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string LastName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Name { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Phone { get; set; }

        [JsonProperty("province", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Province { get; set; }

        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Zip { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("distanceFromWarehouseInKm", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? DistanceFromWarehouseInKm { get; set; }

        [JsonProperty("co2Emitted", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Co2Emitted { get; set; }

        [JsonProperty("isModifiedAtPP", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsModifiedAtPP { get; set; }

        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("salesChannelOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrder SalesChannelOrder { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderTracking
    {
        [JsonProperty("trackingId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string TrackingId { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Status { get; set; }

        [JsonProperty("trackingData", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TrackingData { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("deliveryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeliveryDate { get; set; }

        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("salesChannelOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrder SalesChannelOrder { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderMapping
    {
        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("salesChannelOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrder SalesChannelOrder { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LogisticProvider LogisticProvider { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("customerTenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tenant CustomerTenant { get; set; }

        [JsonProperty("isCustom", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsCustom { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrimePenguinManagedDeliveryStatus
    {

        NotManaged = 0,

        InProgressOnTime = 5,

        InProgressDelayed = 10,

        DeliveredOnTime = 15,

        DelayedShipment = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrder
    {
        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderId { get; set; }

        [JsonProperty("cancelReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string CancelReason { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("closedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ClosedAt { get; set; }

        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string CustomerName { get; set; }

        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Currency { get; set; }

        [JsonProperty("customerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string CustomerId { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string Tags { get; set; }

        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelLineItem> LineItems { get; set; }

        [JsonProperty("bundleLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleLineItem> BundleLineItems { get; set; }

        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelFulfillment> Fulfillments { get; set; }

        [JsonProperty("refunds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderRefund> Refunds { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderShippingAddress ShippingAddress { get; set; }

        [JsonProperty("orderTracking", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderTracking OrderTracking { get; set; }

        [JsonProperty("financialStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FinancialStatus { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderNumber { get; set; }

        [JsonProperty("processingMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProcessingMethod { get; set; }

        [JsonProperty("totalLineItemsPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalLineItemsPrice { get; set; }

        [JsonProperty("totalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        [JsonProperty("totalWeight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalWeight { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string UserId { get; set; }

        [JsonProperty("markedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? MarkedAt { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("shippingType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string ShippingType { get; set; }

        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string ShippingCompany { get; set; }

        [JsonProperty("shippingPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingPrice { get; set; }

        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        [JsonProperty("hasCalculatedLineItems", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool HasCalculatedLineItems { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("warehouseFulfilledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WarehouseFulfilledAt { get; set; }

        [JsonProperty("customMarkPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool CustomMarkPaid { get; set; }

        [JsonProperty("externalUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string ExternalUrl { get; set; }

        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string DeliveryInstructions { get; set; }

        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string InternalNote { get; set; }

        [JsonProperty("isNoteModified", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsNoteModified { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("userSalesChannel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserSalesChannel UserSalesChannel { get; set; }

        [JsonProperty("orderMappings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrderMapping> OrderMappings { get; set; }

        [JsonProperty("deliveryStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PrimePenguinManagedDeliveryStatus DeliveryStatus { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSalesChannel
    {
        [JsonProperty("salesChannelName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string SalesChannelName { get; set; }

        [JsonProperty("accessToken", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(5000)]
        public string AccessToken { get; set; }

        [JsonProperty("shopName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string ShopName { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(256)]
        public string StoreName { get; set; }

        [JsonProperty("consumerKey", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(256)]
        public string ConsumerKey { get; set; }

        [JsonProperty("consumerSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(256)]
        public string ConsumerSecret { get; set; }

        [JsonProperty("keyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string KeyId { get; set; }

        [JsonProperty("additionalValues", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string AdditionalValues { get; set; }

        [JsonProperty("ttl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Ttl { get; set; }

        [JsonProperty("tokenRevoked", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool TokenRevoked { get; set; }

        [JsonProperty("installationStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelInstallationStatus InstallationStatus { get; set; }

        [JsonProperty("isTest", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTest { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("tenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tenant Tenant { get; set; }

        [JsonProperty("lastSyncTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastSyncTime { get; set; }

        [JsonProperty("salesChannelOrders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrder> SalesChannelOrders { get; set; }

        [JsonProperty("salesChannelProducts", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelProduct> SalesChannelProducts { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deleterUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? DeleterUserId { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelProduct
    {
        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProductId { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Title { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string Description { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Sku { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("publishedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishedAt { get; set; }

        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Vendor { get; set; }

        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string ProductType { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Tags { get; set; }

        [JsonProperty("variants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelProductVariant> Variants { get; set; }

        [JsonProperty("bundleVariants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleProductVariant> BundleVariants { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string ImageSources { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("userSalesChannel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserSalesChannel UserSalesChannel { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProductType SalesChannelProductType { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallBrinkInput
    {
        [JsonProperty("shopUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ShopUrl { get; set; }

        [JsonProperty("apiKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelInstallUrlOutput
    {
        /// <summary>
        /// Url to install Shopify Sales Channel
        /// </summary>
        [JsonProperty("installUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InstallUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BringWebhookData
    {
        [JsonProperty("service", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Service { get; set; }

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CacheDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfCacheDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<CacheDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityDtoOfString
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallCentraInput
    {
        /// <summary>
        /// Centra Order API base url
        /// </summary>
        [JsonProperty("orderApiBaseUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string OrderApiBaseUrl { get; set; }

        /// <summary>
        /// Order API secret
        /// </summary>
        [JsonProperty("apiSecret", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CentraHookInput
    {
        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallChargebeeInput
    {
        [JsonProperty("siteName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string SiteName { get; set; }

        [JsonProperty("apiKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FriendshipState
    {

        Accepted = 1,

        Blocked = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FriendDto
    {
        [JsonProperty("friendUserId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long FriendUserId { get; set; }

        [JsonProperty("friendTenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FriendTenantId { get; set; }

        [JsonProperty("friendUserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FriendUserName { get; set; }

        [JsonProperty("friendTenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FriendTenancyName { get; set; }

        [JsonProperty("friendProfilePictureId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? FriendProfilePictureId { get; set; }

        [JsonProperty("unreadMessageCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UnreadMessageCount { get; set; }

        [JsonProperty("isOnline", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsOnline { get; set; }

        [JsonProperty("state", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public FriendshipState State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserChatFriendsWithSettingsOutput
    {
        [JsonProperty("serverTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset ServerTime { get; set; }

        [JsonProperty("friends", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FriendDto> Friends { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChatSide
    {

        Sender = 1,

        Receiver = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChatMessageReadState
    {

        Unread = 1,

        Read = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChatMessageDto
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("targetUserId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long TargetUserId { get; set; }

        [JsonProperty("targetTenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TargetTenantId { get; set; }

        [JsonProperty("side", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ChatSide Side { get; set; }

        [JsonProperty("readState", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ChatMessageReadState ReadState { get; set; }

        [JsonProperty("receiverReadState", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ChatMessageReadState ReceiverReadState { get; set; }

        [JsonProperty("message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("sharedMessageId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SharedMessageId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfChatMessageDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ChatMessageDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkAllUnreadMessagesOfUserAsReadInput
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscribableEditionComboboxItemDto
    {
        [JsonProperty("isFree", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsFree { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("displayText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayText { get; set; }

        [JsonProperty("isSelected", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSelected { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfSubscribableEditionComboboxItemDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SubscribableEditionComboboxItemDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FindUsersInput
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("excludeCurrentUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ExcludeCurrentUser { get; set; }

        [JsonProperty("maxResultCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 1000)]
        public int MaxResultCount { get; set; }

        [JsonProperty("skipCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 2147483647)]
        public int SkipCount { get; set; }

        [JsonProperty("filter", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Filter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfNameValueDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameValueDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDefaultEditionNameOutput
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommunicationChartDto
    {
        /// <summary>
        /// Person to contact for technical support
        /// </summary>
        [JsonProperty("technicalSupportContact", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string TechnicalSupportContact { get; set; }

        /// <summary>
        /// Person to contact at Store or Warehouse for General Queries
        /// </summary>
        [JsonProperty("personToContactAtStoreOrWarehouse", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string PersonToContactAtStoreOrWarehouse { get; set; }

        /// <summary>
        /// Person to contact at Warehouse for Cost Rules
        /// </summary>
        [JsonProperty("personToContactForCostRules", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string PersonToContactForCostRules { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("tenantName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantName { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfCommunicationChartDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<CommunicationChartDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractFileDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        [JsonProperty("bytes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public byte[] Bytes { get; set; }

        [JsonProperty("agreementEndDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset AgreementEndDate { get; set; }

        [JsonProperty("contractStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ContractStatus { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        [JsonProperty("fileName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        /// <summary>
        /// Cost per order charged to LP
        /// </summary>
        [JsonProperty("costPerOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double CostPerOrder { get; set; }

        /// <summary>
        /// Fixed cost charged to LP for handling the customer orders
        /// </summary>
        [JsonProperty("otherCost", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double OtherCost { get; set; }

        /// <summary>
        /// Amount Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfContractFileDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ContractFileDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateContractInput
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 2147483647)]
        public int Id { get; set; }

        [JsonProperty("agreementEndDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset AgreementEndDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateContractWithPriceInput
    {
        /// <summary>
        /// Cost per order charged to LP
        /// </summary>
        [JsonProperty("costPerOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double CostPerOrder { get; set; }

        /// <summary>
        /// Other cost charged to LP for handling the customer orders
        /// </summary>
        [JsonProperty("otherCost", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double OtherCost { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 2147483647)]
        public int Id { get; set; }

        [JsonProperty("agreementEndDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset AgreementEndDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HostedShopType
    {

        DanDomain = 0,

        SmartWeb = 1,

        ScanNet = 2,

        Wannafind = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallDanDomainInput
    {
        [JsonProperty("apiUserName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiUserName { get; set; }

        [JsonProperty("apiUserPassword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiUserPassword { get; set; }

        [JsonProperty("shopUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ShopUrl { get; set; }

        [JsonProperty("hostedShopType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public HostedShopType HostedShopType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payload
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Widget
    {
        [JsonProperty("widgetId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WidgetId { get; set; }

        [JsonProperty("height", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Height { get; set; }

        [JsonProperty("width", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Width { get; set; }

        [JsonProperty("positionX", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int PositionX { get; set; }

        [JsonProperty("positionY", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int PositionY { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Page
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("widgets", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Widget> Widgets { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dashboard
    {
        [JsonProperty("dashboardName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DashboardName { get; set; }

        [JsonProperty("pages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Page> Pages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavePageInput
    {
        [JsonProperty("dashboardName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DashboardName { get; set; }

        [JsonProperty("application", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Application { get; set; }

        [JsonProperty("pages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Page> Pages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RenamePageInput
    {
        [JsonProperty("dashboardName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DashboardName { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("application", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Application { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddNewPageInput
    {
        [JsonProperty("dashboardName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DashboardName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("application", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Application { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddNewPageOutput
    {
        [JsonProperty("pageId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PageId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddWidgetInput
    {
        [JsonProperty("widgetId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WidgetId { get; set; }

        [JsonProperty("pageId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PageId { get; set; }

        [JsonProperty("dashboardName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DashboardName { get; set; }

        [JsonProperty("width", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Width { get; set; }

        [JsonProperty("height", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Height { get; set; }

        [JsonProperty("application", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Application { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WidgetFilterOutput
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WidgetOutput
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("filters", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WidgetFilterOutput> Filters { get; set; }

    }

    /// <summary>
    /// This class stores filtered dashboard information by user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DashboardOutput
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("widgets", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WidgetOutput> Widgets { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicEntityPropertyDto
    {
        [JsonProperty("entityFullName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityFullName { get; set; }

        [JsonProperty("dynamicPropertyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DynamicPropertyName { get; set; }

        [JsonProperty("dynamicPropertyId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DynamicPropertyId { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfDynamicEntityPropertyDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DynamicEntityPropertyDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllEntitiesHasDynamicPropertyOutput
    {
        [JsonProperty("entityFullName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityFullName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfGetAllEntitiesHasDynamicPropertyOutput
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<GetAllEntitiesHasDynamicPropertyOutput> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicEntityPropertyValueDto
    {
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("dynamicEntityPropertyId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DynamicEntityPropertyId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfDynamicEntityPropertyValueDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DynamicEntityPropertyValueDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IValueValidator
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("attributes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, object> Attributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IInputType
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("attributes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, object> Attributes { get; set; }

        [JsonProperty("validator", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public IValueValidator Validator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllDynamicEntityPropertyValuesOutputItem
    {
        [JsonProperty("dynamicEntityPropertyId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DynamicEntityPropertyId { get; set; }

        [JsonProperty("propertyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        [JsonProperty("inputType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public IInputType InputType { get; set; }

        [JsonProperty("selectedValues", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> SelectedValues { get; set; }

        [JsonProperty("allValuesInputTypeHas", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> AllValuesInputTypeHas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllDynamicEntityPropertyValuesOutput
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<GetAllDynamicEntityPropertyValuesOutputItem> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsertOrUpdateAllValuesInputItem
    {
        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("dynamicEntityPropertyId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DynamicEntityPropertyId { get; set; }

        [JsonProperty("values", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Values { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsertOrUpdateAllValuesInput
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<InsertOrUpdateAllValuesInputItem> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CleanValuesInput
    {
        [JsonProperty("dynamicEntityPropertyId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DynamicEntityPropertyId { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicPropertyDto
    {
        [JsonProperty("propertyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        [JsonProperty("inputType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InputType { get; set; }

        [JsonProperty("permission", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Permission { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfDynamicPropertyDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DynamicPropertyDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicPropertyValueDto
    {
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("dynamicPropertyId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DynamicPropertyId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfDynamicPropertyValueDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DynamicPropertyValueDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditionListDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("dailyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? DailyPrice { get; set; }

        [JsonProperty("weeklyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? WeeklyPrice { get; set; }

        [JsonProperty("monthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? MonthlyPrice { get; set; }

        [JsonProperty("annualPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? AnnualPrice { get; set; }

        [JsonProperty("waitingDayAfterExpire", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? WaitingDayAfterExpire { get; set; }

        [JsonProperty("trialDayCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TrialDayCount { get; set; }

        [JsonProperty("expiringEditionDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExpiringEditionDisplayName { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfEditionListDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<EditionListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditionEditDto
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [JsonProperty("displayName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [JsonProperty("expiringEditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ExpiringEditionId { get; set; }

        [JsonProperty("isTest", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTest { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalizableComboboxItemDto
    {
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("displayText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayText { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalizableComboboxItemSourceDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LocalizableComboboxItemDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeatureInputTypeDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("attributes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, object> Attributes { get; set; }

        [JsonProperty("validator", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public IValueValidator Validator { get; set; }

        [JsonProperty("itemSource", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LocalizableComboboxItemSourceDto ItemSource { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatFeatureDto
    {
        [JsonProperty("parentName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ParentName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("defaultValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [JsonProperty("inputType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public FeatureInputTypeDto InputType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetEditionEditOutput
    {
        [JsonProperty("edition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EditionEditDto Edition { get; set; }

        [JsonProperty("featureValues", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameValueDto> FeatureValues { get; set; }

        [JsonProperty("features", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FlatFeatureDto> Features { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditionCreateDto
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [JsonProperty("displayName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [JsonProperty("dailyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? DailyPrice { get; set; }

        [JsonProperty("weeklyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? WeeklyPrice { get; set; }

        [JsonProperty("monthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? MonthlyPrice { get; set; }

        [JsonProperty("annualPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? AnnualPrice { get; set; }

        [JsonProperty("trialDayCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TrialDayCount { get; set; }

        [JsonProperty("waitingDayAfterExpire", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? WaitingDayAfterExpire { get; set; }

        [JsonProperty("expiringEditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ExpiringEditionId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateEditionDto
    {
        [JsonProperty("edition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public EditionCreateDto Edition { get; set; } = new EditionCreateDto();

        [JsonProperty("featureValues", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<NameValueDto> FeatureValues { get; set; } = new List<NameValueDto>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateEditionDto
    {
        [JsonProperty("edition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public EditionEditDto Edition { get; set; } = new EditionEditDto();

        [JsonProperty("featureValues", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<NameValueDto> FeatureValues { get; set; } = new List<NameValueDto>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveTenantsToAnotherEditionDto
    {
        [JsonProperty("sourceEditionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int SourceEditionId { get; set; }

        [JsonProperty("targetEditionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int TargetEditionId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EshopLogisticProviderInformationDto
    {
        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EshopSalesChannelInformationDto
    {
        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

        [JsonProperty("isTestSalesChannel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTestSalesChannel { get; set; }

        [JsonProperty("isDeletedSalesChannel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeletedSalesChannel { get; set; }

        [JsonProperty("salesChannelName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelName { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("salesChannelCreationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset SalesChannelCreationTime { get; set; }

        [JsonProperty("salesChannelDeletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SalesChannelDeletionTime { get; set; }

        [JsonProperty("lastSyncTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastSyncTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EshopInformationDto
    {
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("eShopSize", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EShopSize { get; set; }

        [JsonProperty("eShopAddressUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EShopAddressUrl { get; set; }

        [JsonProperty("eShopAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EShopAddress { get; set; }

        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("registrationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset RegistrationTime { get; set; }

        [JsonProperty("totalOrders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TotalOrders { get; set; }

        [JsonProperty("logisticProviderInformationDtos", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<EshopLogisticProviderInformationDto> LogisticProviderInformationDtos { get; set; }

        [JsonProperty("salesChannelInformationDtos", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<EshopSalesChannelInformationDto> SalesChannelInformationDtos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfEshopInformationDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<EshopInformationDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelLineItemDto
    {
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("normalizedWarehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedWarehouseStatus { get; set; }

        [JsonProperty("grams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Grams { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("priceWithoutTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? PriceWithoutTax { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("fulfillableQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FulfillableQuantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("variantTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string VariantTitle { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Name { get; set; }

        [JsonProperty("totalDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalDiscount { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        [JsonProperty("lineItemProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LineItemProductType { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelBundleLineItemDto
    {
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("grams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Grams { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("variantTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string VariantTitle { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Name { get; set; }

        [JsonProperty("totalDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalDiscount { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelFulfillmentDto
    {
        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("receipt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1500)]
        public string Receipt { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(30)]
        public string Status { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string TrackingUrl { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderShippingAddressDto
    {
        [JsonProperty("address1", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string Address1 { get; set; }

        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Address2 { get; set; }

        [JsonProperty("city", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string City { get; set; }

        [JsonProperty("company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Company { get; set; }

        [JsonProperty("country", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Country { get; set; }

        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string CountryCode { get; set; }

        [JsonProperty("firstName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string FirstName { get; set; }

        [JsonProperty("lastName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string LastName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Name { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(30)]
        public string Phone { get; set; }

        [JsonProperty("province", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Province { get; set; }

        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Zip { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderTrackingDto
    {
        [JsonProperty("trackingId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingId { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Status { get; set; }

        [JsonProperty("trackingData", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TrackingData { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("deliveryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeliveryDate { get; set; }

        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelRefundLineItemsDto
    {
        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderRefundDto
    {
        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("processedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ProcessedAt { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("refundLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelRefundLineItemsDto> RefundLineItems { get; set; }

        [JsonProperty("restock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Restock { get; set; }

        [JsonProperty("refundStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RefundStatus RefundStatus { get; set; }

        [JsonProperty("reviewStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewStatus ReviewStatus { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("cancelledReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledReason { get; set; }

        [JsonProperty("cancelledOrderImages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledOrderImages { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehousePlusSalesChannelOrderDto
    {
        /// <summary>
        /// If order status matches warehouse status
        /// </summary>
        [JsonProperty("isValidState", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsValidState { get; set; }

        /// <summary>
        /// Customer Tenant Id
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Store name
        /// </summary>
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        /// <summary>
        /// Assigned Logistic Partner for Order
        /// </summary>
        [JsonProperty("assignedLogisticProvider", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AssignedLogisticProvider { get; set; }

        /// <summary>
        /// Last Sync Time
        /// </summary>
        [JsonProperty("lastSyncTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastSyncTime { get; set; }

        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderId { get; set; }

        [JsonProperty("cancelReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string CancelReason { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("closedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ClosedAt { get; set; }

        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string CustomerName { get; set; }

        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Currency { get; set; }

        [JsonProperty("customerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string CustomerId { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string Tags { get; set; }

        [JsonProperty("financialStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FinancialStatus { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("normalizedFulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedFulfillmentStatus { get; set; }

        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [JsonProperty("processingMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProcessingMethod { get; set; }

        [JsonProperty("totalLineItemsPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalLineItemsPrice { get; set; }

        [JsonProperty("totalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        [JsonProperty("totalWeight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalWeight { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("markedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? MarkedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("shippingType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingType { get; set; }

        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingCompany { get; set; }

        [JsonProperty("shippingPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingPrice { get; set; }

        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelLineItemDto> LineItems { get; set; }

        [JsonProperty("bundleLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleLineItemDto> BundleLineItems { get; set; }

        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelFulfillmentDto> Fulfillments { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderShippingAddressDto ShippingAddress { get; set; }

        [JsonProperty("orderTracking", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderTrackingDto OrderTracking { get; set; }

        [JsonProperty("refunds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderRefundDto> Refunds { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("normalizedWarehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedWarehouseStatus { get; set; }

        [JsonProperty("warehouseFulfilledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WarehouseFulfilledAt { get; set; }

        [JsonProperty("externalUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalUrl { get; set; }

        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DeliveryInstructions { get; set; }

        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InternalNote { get; set; }

        [JsonProperty("deliveryStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PrimePenguinManagedDeliveryStatus DeliveryStatus { get; set; }

        [JsonProperty("handlingTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HandlingTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfWarehousePlusSalesChannelOrderDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehousePlusSalesChannelOrderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlusSalesChannelProductVariantDto
    {
        /// <summary>
        /// External product variant Id
        /// </summary>
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("costPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPrice { get; set; }

        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option1 { get; set; }

        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option2 { get; set; }

        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option3 { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        [JsonProperty("hsCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HsCode { get; set; }

        [JsonProperty("countryOfOrigin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CountryOfOrigin { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelProductType { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("addedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [JsonProperty("breadth", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Breadth { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DimensionUnit { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelBundleProductVariantDto
    {
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        [JsonProperty("bundleQuantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int BundleQuantity { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlusSalesChannelProductDto
    {
        /// <summary>
        /// External product Id
        /// </summary>
        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        /// <summary>
        /// Customer Tenant Id
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Store name
        /// </summary>
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        /// <summary>
        /// Last Sync Time
        /// </summary>
        [JsonProperty("lastSyncTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastSyncTime { get; set; }

        [JsonProperty("variants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PlusSalesChannelProductVariantDto> Variants { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string Description { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Sku { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("publishedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishedAt { get; set; }

        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Vendor { get; set; }

        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string ProductType { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(255)]
        public string Tags { get; set; }

        [JsonProperty("bundleVariants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleProductVariantDto> BundleVariants { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelProductType { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfPlusSalesChannelProductDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PlusSalesChannelProductDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFriendshipRequestInput
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long UserId { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFriendshipRequestByUserNameInput
    {
        [JsonProperty("tenancyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string TenancyName { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockUserInput
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long UserId { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnblockUserInput
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long UserId { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcceptFriendshipRequestInput
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long UserId { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantLocationDto
    {
        /// <summary>
        /// Countries separated by ,
        /// </summary>
        [JsonProperty("countries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Countries { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("tenantType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantType TenantType { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderOverviewDto
    {
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("orderCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrderCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuarterlyOrder
    {
        [JsonProperty("quarter", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Quarter { get; set; }

        [JsonProperty("count", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostDashboardData
    {
        [JsonProperty("eshops", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Eshops { get; set; }

        [JsonProperty("plusEshops", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> PlusEshops { get; set; }

        [JsonProperty("enterpriseEshops", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> EnterpriseEshops { get; set; }

        [JsonProperty("logisticProviders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviders { get; set; }

        [JsonProperty("wms", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Wms { get; set; }

        [JsonProperty("processedOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ProcessedOrders { get; set; }

        [JsonProperty("totalProductVariants", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalProductVariants { get; set; }

        [JsonProperty("locationsInUse", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LocationsInUse { get; set; }

        [JsonProperty("tenantLocations", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<TenantLocationDto> TenantLocations { get; set; }

        [JsonProperty("salesChannelOrdersOverview", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderOverviewDto> SalesChannelOrdersOverview { get; set; }

        [JsonProperty("currentQuarterOrders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<QuarterlyOrder> CurrentQuarterOrders { get; set; }

        [JsonProperty("previousQuarterOrders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<QuarterlyOrder> PreviousQuarterOrders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderCountPerDayByMonthDto
    {
        /// <summary>
        /// Number of orders
        /// </summary>
        [JsonProperty("orderCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrderCount { get; set; }

        /// <summary>
        /// Number of orders delivered
        /// </summary>
        [JsonProperty("ordersDelivered", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersDelivered { get; set; }

        [JsonProperty("date", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeneralSettingsEditDto
    {
        [JsonProperty("timezone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        /// <summary>
        /// This value is only used for comparing user's timezone to default timezone
        /// </summary>
        [JsonProperty("timezoneForComparison", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TimezoneForComparison { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SessionTimeOutSettingsEditDto
    {
        [JsonProperty("isEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        [JsonProperty("timeOutSecond", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(10, 2147483647)]
        public int TimeOutSecond { get; set; }

        [JsonProperty("showTimeOutNotificationSecond", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(10, 2147483647)]
        public int ShowTimeOutNotificationSecond { get; set; }

        [JsonProperty("showLockScreenWhenTimedOut", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ShowLockScreenWhenTimedOut { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostUserManagementSettingsEditDto
    {
        [JsonProperty("isEmailConfirmationRequiredForLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEmailConfirmationRequiredForLogin { get; set; }

        [JsonProperty("smsVerificationEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SmsVerificationEnabled { get; set; }

        [JsonProperty("isCookieConsentEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsCookieConsentEnabled { get; set; }

        [JsonProperty("isQuickThemeSelectEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsQuickThemeSelectEnabled { get; set; }

        [JsonProperty("useCaptchaOnLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UseCaptchaOnLogin { get; set; }

        [JsonProperty("allowUsingGravatarProfilePicture", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowUsingGravatarProfilePicture { get; set; }

        [JsonProperty("sessionTimeOutSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SessionTimeOutSettingsEditDto SessionTimeOutSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSettingsEditDto
    {
        [JsonProperty("defaultFromAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultFromAddress { get; set; }

        [JsonProperty("defaultFromDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultFromDisplayName { get; set; }

        [JsonProperty("smtpHost", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpHost { get; set; }

        [JsonProperty("smtpPort", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SmtpPort { get; set; }

        [JsonProperty("smtpUserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpUserName { get; set; }

        [JsonProperty("smtpPassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpPassword { get; set; }

        [JsonProperty("smtpDomain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpDomain { get; set; }

        [JsonProperty("smtpEnableSsl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SmtpEnableSsl { get; set; }

        [JsonProperty("smtpUseDefaultCredentials", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SmtpUseDefaultCredentials { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantManagementSettingsEditDto
    {
        [JsonProperty("allowSelfRegistration", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowSelfRegistration { get; set; }

        [JsonProperty("isNewRegisteredTenantActiveByDefault", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsNewRegisteredTenantActiveByDefault { get; set; }

        [JsonProperty("useCaptchaOnRegistration", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UseCaptchaOnRegistration { get; set; }

        [JsonProperty("defaultEditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DefaultEditionId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PasswordComplexitySetting
    {
        [JsonProperty("requireDigit", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool RequireDigit { get; set; }

        [JsonProperty("requireLowercase", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool RequireLowercase { get; set; }

        [JsonProperty("requireNonAlphanumeric", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool RequireNonAlphanumeric { get; set; }

        [JsonProperty("requireUppercase", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool RequireUppercase { get; set; }

        [JsonProperty("requiredLength", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int RequiredLength { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserLockOutSettingsEditDto
    {
        [JsonProperty("isEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        [JsonProperty("maxFailedAccessAttemptsBeforeLockout", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int MaxFailedAccessAttemptsBeforeLockout { get; set; }

        [JsonProperty("defaultAccountLockoutSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DefaultAccountLockoutSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorLoginSettingsEditDto
    {
        [JsonProperty("isEnabledForApplication", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEnabledForApplication { get; set; }

        [JsonProperty("isEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        [JsonProperty("isEmailProviderEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEmailProviderEnabled { get; set; }

        [JsonProperty("isSmsProviderEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSmsProviderEnabled { get; set; }

        [JsonProperty("isRememberBrowserEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsRememberBrowserEnabled { get; set; }

        [JsonProperty("isGoogleAuthenticatorEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsGoogleAuthenticatorEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecuritySettingsEditDto
    {
        [JsonProperty("allowOneConcurrentLoginPerUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowOneConcurrentLoginPerUser { get; set; }

        [JsonProperty("useDefaultPasswordComplexitySettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UseDefaultPasswordComplexitySettings { get; set; }

        [JsonProperty("passwordComplexity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PasswordComplexitySetting PasswordComplexity { get; set; }

        [JsonProperty("defaultPasswordComplexity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PasswordComplexitySetting DefaultPasswordComplexity { get; set; }

        [JsonProperty("userLockOut", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserLockOutSettingsEditDto UserLockOut { get; set; }

        [JsonProperty("twoFactorLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TwoFactorLoginSettingsEditDto TwoFactorLogin { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostBillingSettingsEditDto
    {
        [JsonProperty("legalName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LegalName { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherSettingsEditDto
    {
        [JsonProperty("isQuickThemeSelectEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsQuickThemeSelectEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FacebookExternalLoginProviderSettings
    {
        [JsonProperty("appId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AppId { get; set; }

        [JsonProperty("appSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AppSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleExternalLoginProviderSettings
    {
        [JsonProperty("clientId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        [JsonProperty("clientSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientSecret { get; set; }

        [JsonProperty("userInfoEndpoint", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserInfoEndpoint { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwitterExternalLoginProviderSettings
    {
        [JsonProperty("consumerKey", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConsumerKey { get; set; }

        [JsonProperty("consumerSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConsumerSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MicrosoftExternalLoginProviderSettings
    {
        [JsonProperty("clientId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        [JsonProperty("clientSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdConnectExternalLoginProviderSettings
    {
        [JsonProperty("clientId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        [JsonProperty("clientSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientSecret { get; set; }

        [JsonProperty("authority", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Authority { get; set; }

        [JsonProperty("loginUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LoginUrl { get; set; }

        [JsonProperty("validateIssuer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ValidateIssuer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonClaimMapDto
    {
        [JsonProperty("claim", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Claim { get; set; }

        [JsonProperty("key", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WsFederationExternalLoginProviderSettings
    {
        [JsonProperty("clientId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        [JsonProperty("tenant", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tenant { get; set; }

        [JsonProperty("metaDataAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MetaDataAddress { get; set; }

        [JsonProperty("wtrealm", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Wtrealm { get; set; }

        [JsonProperty("authority", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Authority { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalLoginProviderSettingsEditDto
    {
        [JsonProperty("facebook_IsDeactivated", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Facebook_IsDeactivated { get; set; }

        [JsonProperty("facebook", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public FacebookExternalLoginProviderSettings Facebook { get; set; }

        [JsonProperty("google_IsDeactivated", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Google_IsDeactivated { get; set; }

        [JsonProperty("google", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public GoogleExternalLoginProviderSettings Google { get; set; }

        [JsonProperty("twitter_IsDeactivated", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Twitter_IsDeactivated { get; set; }

        [JsonProperty("twitter", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TwitterExternalLoginProviderSettings Twitter { get; set; }

        [JsonProperty("microsoft_IsDeactivated", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Microsoft_IsDeactivated { get; set; }

        [JsonProperty("microsoft", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MicrosoftExternalLoginProviderSettings Microsoft { get; set; }

        [JsonProperty("openIdConnect_IsDeactivated", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool OpenIdConnect_IsDeactivated { get; set; }

        [JsonProperty("openIdConnect", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OpenIdConnectExternalLoginProviderSettings OpenIdConnect { get; set; }

        [JsonProperty("openIdConnectClaimsMapping", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<JsonClaimMapDto> OpenIdConnectClaimsMapping { get; set; }

        [JsonProperty("wsFederation_IsDeactivated", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool WsFederation_IsDeactivated { get; set; }

        [JsonProperty("wsFederation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public WsFederationExternalLoginProviderSettings WsFederation { get; set; }

        [JsonProperty("wsFederationClaimsMapping", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<JsonClaimMapDto> WsFederationClaimsMapping { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostSettingsEditDto
    {
        [JsonProperty("general", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public GeneralSettingsEditDto General { get; set; } = new GeneralSettingsEditDto();

        [JsonProperty("userManagement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public HostUserManagementSettingsEditDto UserManagement { get; set; } = new HostUserManagementSettingsEditDto();

        [JsonProperty("email", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public EmailSettingsEditDto Email { get; set; } = new EmailSettingsEditDto();

        [JsonProperty("tenantManagement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public TenantManagementSettingsEditDto TenantManagement { get; set; } = new TenantManagementSettingsEditDto();

        [JsonProperty("security", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public SecuritySettingsEditDto Security { get; set; } = new SecuritySettingsEditDto();

        [JsonProperty("billing", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public HostBillingSettingsEditDto Billing { get; set; }

        [JsonProperty("otherSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OtherSettingsEditDto OtherSettings { get; set; }

        [JsonProperty("externalLoginProviderSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ExternalLoginProviderSettingsEditDto ExternalLoginProviderSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendTestEmailInput
    {
        [JsonProperty("emailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string EmailAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalLoginSettingsDto
    {
        [JsonProperty("enabledSocialLoginSettings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> EnabledSocialLoginSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallDto
    {
        [JsonProperty("connectionString", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ConnectionString { get; set; }

        [JsonProperty("adminPassword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string AdminPassword { get; set; }

        [JsonProperty("webSiteUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string WebSiteUrl { get; set; }

        [JsonProperty("serverUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ServerUrl { get; set; }

        [JsonProperty("defaultLanguage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string DefaultLanguage { get; set; }

        [JsonProperty("smtpSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EmailSettingsEditDto SmtpSettings { get; set; }

        [JsonProperty("billInfo", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public HostBillingSettingsEditDto BillInfo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValue
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppSettingsJsonDto
    {
        [JsonProperty("webSiteUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WebSiteUrl { get; set; }

        [JsonProperty("serverSiteUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ServerSiteUrl { get; set; }

        [JsonProperty("languages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameValue> Languages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckDatabaseOutput
    {
        [JsonProperty("isDatabaseExist", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDatabaseExist { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorSyncDto
    {
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProviderWarehouseConnectionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderWarehouseConnectionId { get; set; }

        /// <summary>
        /// Time of Last Sync
        /// </summary>
        [JsonProperty("syncTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset SyncTime { get; set; }

        /// <summary>
        /// Time of Last Inventory Sync
        /// </summary>
        [JsonProperty("inventorySync", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? InventorySync { get; set; }

        /// <summary>
        /// Time of Last Order Sync
        /// </summary>
        [JsonProperty("orderSync", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OrderSync { get; set; }

        /// <summary>
        /// Time of Last Order Process Sync
        /// </summary>
        [JsonProperty("orderProcessSync", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OrderProcessSync { get; set; }

        /// <summary>
        /// Time of Last Purchase Order Sync
        /// </summary>
        [JsonProperty("purchaseOrderSync", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PurchaseOrderSync { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfIntegratorSyncDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorSyncDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProvidersDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfLogisticProvidersDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProvidersDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorLogisticProviderCustomerDto
    {
        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("warehouseUserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseUserName { get; set; }

        [JsonProperty("warehousePassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehousePassword { get; set; }

        [JsonProperty("warehouseUri", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseUri { get; set; }

        /// <summary>
        /// Name of the Warehouse used to store customer goods
        /// </summary>
        [JsonProperty("warehouse", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Free Text 1
        /// </summary>
        [JsonProperty("freeText1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FreeText1 { get; set; }

        /// <summary>
        /// Free Text 2
        /// </summary>
        [JsonProperty("freeText2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FreeText2 { get; set; }

        /// <summary>
        /// Goods Owner code
        /// </summary>
        [JsonProperty("goodsOwnerCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GoodsOwnerCode { get; set; }

        /// <summary>
        /// Goods Owner Id
        /// </summary>
        [JsonProperty("goodsOwnerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GoodsOwnerId { get; set; }

        /// <summary>
        /// If connection is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Sync Warehouse Inventory to Prime Penguin
        /// </summary>
        [JsonProperty("syncInventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncInventory { get; set; }

        /// <summary>
        /// Comma separated list of skus excluded from sync
        /// </summary>
        [JsonProperty("excludeInventorySku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExcludeInventorySku { get; set; }

        /// <summary>
        /// Sync Prime Penguin orders to Warehouse
        /// </summary>
        [JsonProperty("syncOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncOrders { get; set; }

        /// <summary>
        /// Process Warehouse order changes at Prime Penguin
        /// </summary>
        [JsonProperty("processOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ProcessOrders { get; set; }

        /// <summary>
        /// Process Warehouse purchase order changes at Prime Penguin
        /// </summary>
        [JsonProperty("syncPurchaseOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncPurchaseOrders { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorLogisticProviderDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("logisticProviderCustomers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorLogisticProviderCustomerDto> LogisticProviderCustomers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfIntegratorLogisticProviderDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorLogisticProviderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessOperationType
    {

        Inventory = 0,

        InventoryLocation = 1,

        Order = 2,

        PurchaseOrder = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProcessedEntityDto
    {
        [JsonProperty("logisticProviderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LogisticProviderId { get; set; }

        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        /// <summary>
        /// request in JSON
        /// </summary>
        [JsonProperty("request", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Request { get; set; }

        [JsonProperty("isProcessed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsProcessed { get; set; }

        [JsonProperty("errorMessage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        [JsonProperty("processOperationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ProcessOperationType ProcessOperationType { get; set; }

        [JsonProperty("processOperationTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProcessOperationTypeName { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfIntegratorProcessedEntityDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorProcessedEntityDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfigurationRuleType
    {

        Tag = 0,

        Country = 1,

        CountryCode = 2,

        State = 3,

        City = 4,

        Zip = 5,

        Cost = 6,

        Default = 10000,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentMappingRuleSearchType
    {

        Equals = 0,

        StartsWith = 1,

        Contains = 2,

        NotEqual = 3,

        LessThan = 4,

        GreaterThan = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentMappingRuleDto
    {
        /// <summary>
        /// Value for the Rule configuration
        /// </summary>
        [JsonProperty("configurationValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ConfigurationValue { get; set; }

        [JsonProperty("configurationRuleType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ConfigurationRuleType ConfigurationRuleType { get; set; }

        [JsonProperty("shipmentMappingRuleSearchType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ShipmentMappingRuleSearchType ShipmentMappingRuleSearchType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentMappingDto
    {
        /// <summary>
        /// Leave unset to create new mapping rule
        /// </summary>
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// (Optional) Name of the property in Warehouse which is used to fetch tracking number
        /// </summary>
        [JsonProperty("warehouseTrackingNumberPropertyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string WarehouseTrackingNumberPropertyName { get; set; }

        /// <summary>
        /// Name of the Delivery Method
        /// </summary>
        [JsonProperty("deliveryMethod", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(250)]
        public string DeliveryMethod { get; set; }

        [JsonProperty("customerTenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CustomerTenantId { get; set; }

        [JsonProperty("logisticProviderShipmentMappingRules", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ShipmentMappingRuleDto> LogisticProviderShipmentMappingRules { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfShipmentMappingDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ShipmentMappingDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorLineItemDto
    {
        [JsonProperty("salesChannelLineItemId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelLineItemId { get; set; }

        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("normalizedWarehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedWarehouseStatus { get; set; }

        [JsonProperty("grams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Grams { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("priceWithoutTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? PriceWithoutTax { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("fulfillableQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FulfillableQuantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("variantTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string VariantTitle { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Name { get; set; }

        [JsonProperty("totalDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalDiscount { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        [JsonProperty("lineItemProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LineItemProductType { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorFulfillmentDto
    {
        [JsonProperty("salesChannelFulfillmentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelFulfillmentId { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("receipt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1500)]
        public string Receipt { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(30)]
        public string Status { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string TrackingUrl { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorOrderShippingAddressDto
    {
        [JsonProperty("salesChannelOrderShippingAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelOrderShippingAddressId { get; set; }

        [JsonProperty("address1", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string Address1 { get; set; }

        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Address2 { get; set; }

        [JsonProperty("city", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string City { get; set; }

        [JsonProperty("company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Company { get; set; }

        [JsonProperty("country", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Country { get; set; }

        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string CountryCode { get; set; }

        [JsonProperty("firstName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string FirstName { get; set; }

        [JsonProperty("lastName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string LastName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Name { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(30)]
        public string Phone { get; set; }

        [JsonProperty("province", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Province { get; set; }

        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Zip { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorOrderRefundDto
    {
        [JsonProperty("salesChannelOrderRefundId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelOrderRefundId { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("processedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ProcessedAt { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("refundLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelRefundLineItemsDto> RefundLineItems { get; set; }

        [JsonProperty("restock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Restock { get; set; }

        [JsonProperty("refundStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RefundStatus RefundStatus { get; set; }

        [JsonProperty("reviewStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewStatus ReviewStatus { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("cancelledReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledReason { get; set; }

        [JsonProperty("cancelledOrderImages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledOrderImages { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorOrderDto
    {
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// An array of PrimePenguin.Technology.Integrators.Orders.Dto.IntegratorLineItemDto objects, each one containing information about an item in the order.
        /// </summary>
        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorLineItemDto> LineItems { get; set; }

        /// <summary>
        /// An array of PrimePenguin.Technology.Integrators.Orders.Dto.IntegratorFulfillmentDto objects for this order.
        /// </summary>
        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorFulfillmentDto> Fulfillments { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public IntegratorOrderShippingAddressDto ShippingAddress { get; set; }

        /// <summary>
        /// An array of PrimePenguin.Technology.Integrators.Orders.Dto.IntegratorOrderRefundDto objects for this order.
        /// </summary>
        [JsonProperty("refunds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorOrderRefundDto> Refunds { get; set; }

        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderId { get; set; }

        [JsonProperty("cancelReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string CancelReason { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("closedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ClosedAt { get; set; }

        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string CustomerName { get; set; }

        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Currency { get; set; }

        [JsonProperty("customerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string CustomerId { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string Tags { get; set; }

        [JsonProperty("financialStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FinancialStatus { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("normalizedFulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedFulfillmentStatus { get; set; }

        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [JsonProperty("processingMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProcessingMethod { get; set; }

        [JsonProperty("totalLineItemsPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalLineItemsPrice { get; set; }

        [JsonProperty("totalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        [JsonProperty("totalWeight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalWeight { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("markedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? MarkedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("shippingType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingType { get; set; }

        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingCompany { get; set; }

        [JsonProperty("shippingPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingPrice { get; set; }

        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("bundleLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleLineItemDto> BundleLineItems { get; set; }

        [JsonProperty("orderTracking", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderTrackingDto OrderTracking { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("normalizedWarehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedWarehouseStatus { get; set; }

        [JsonProperty("warehouseFulfilledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WarehouseFulfilledAt { get; set; }

        [JsonProperty("externalUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalUrl { get; set; }

        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DeliveryInstructions { get; set; }

        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InternalNote { get; set; }

        [JsonProperty("deliveryStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PrimePenguinManagedDeliveryStatus DeliveryStatus { get; set; }

        [JsonProperty("handlingTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HandlingTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfIntegratorOrderDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorOrderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MinimalIntegratorOrderDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfMinimalIntegratorOrderDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<MinimalIntegratorOrderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProcessOrderLineItem
    {
        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("pickedItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? PickedItems { get; set; }

        [JsonProperty("returnedItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ReturnedItems { get; set; }

        [JsonProperty("returnReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ReturnReason { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProcessOrderInput
    {
        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        [JsonProperty("customerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("originalStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalStatus { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TrackingUrl { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("integratorProcessOrderLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorProcessOrderLineItem> IntegratorProcessOrderLineItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProductVariantDto
    {
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("costPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPrice { get; set; }

        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option1 { get; set; }

        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option2 { get; set; }

        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option3 { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        [JsonProperty("hsCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HsCode { get; set; }

        [JsonProperty("countryOfOrigin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CountryOfOrigin { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelProductType { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("addedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [JsonProperty("breadth", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Breadth { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DimensionUnit { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProductDto
    {
        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        /// <summary>
        /// A list of variant objects, each one representing a slightly different version of the product.
        /// <br/>For example, if a product comes in different sizes and colors, each size and color permutation (such as "small black", "medium black", "large blue"), would be a variant.
        /// </summary>
        [JsonProperty("variants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorProductVariantDto> Variants { get; set; }

        /// <summary>
        /// DateTime when the product was imported at Prime Penguin Platform
        /// </summary>
        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        /// <summary>
        /// DateTime when the product was modified at Prime Penguin Platform
        /// </summary>
        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string Description { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Sku { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("publishedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishedAt { get; set; }

        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Vendor { get; set; }

        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string ProductType { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(255)]
        public string Tags { get; set; }

        [JsonProperty("bundleVariants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleProductVariantDto> BundleVariants { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelProductType { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfIntegratorProductDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IntegratorProductDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorAssignedProductVariantDto
    {
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("variantIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<long> VariantIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtendedIntegratorProductVariantDto
    {
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("costPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPrice { get; set; }

        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option1 { get; set; }

        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option2 { get; set; }

        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option3 { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        [JsonProperty("hsCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HsCode { get; set; }

        [JsonProperty("countryOfOrigin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CountryOfOrigin { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelProductType { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("addedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [JsonProperty("breadth", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Breadth { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DimensionUnit { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProcessInventoryInput
    {
        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("inventoryCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int InventoryCount { get; set; }

        [JsonProperty("warehouseInventoryCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int WarehouseInventoryCount { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProcessInventoryLocationInput
    {
        [JsonProperty("warehouseName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string WarehouseName { get; set; }

        [JsonProperty("location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Location { get; set; }

        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        [JsonProperty("inDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? InDate { get; set; }

        [JsonProperty("expiryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ExpiryDate { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [JsonProperty("width", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Width { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string DimensionUnit { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string WeightUnit { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegratorProcessPurchaseOrrderDto
    {
        [JsonProperty("orderNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string OrderNumber { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryLocationItemDto
    {
        /// <summary>
        /// Name of the warehouse
        /// </summary>
        [JsonProperty("warehouseName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseName { get; set; }

        /// <summary>
        /// Name of the location where product is stored
        /// </summary>
        [JsonProperty("location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// The number of items in stock for this product variant
        /// </summary>
        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        /// <summary>
        /// The time when the item was received at warehouse
        /// </summary>
        [JsonProperty("inDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? InDate { get; set; }

        /// <summary>
        /// The expiry date of the item
        /// </summary>
        [JsonProperty("expiryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ExpiryDate { get; set; }

        /// <summary>
        /// Length of the item
        /// </summary>
        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        /// <summary>
        /// Width of the item
        /// </summary>
        [JsonProperty("width", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Width { get; set; }

        /// <summary>
        /// Height of the item
        /// </summary>
        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        /// <summary>
        /// Unit of length, width and height
        /// </summary>
        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DimensionUnit { get; set; }

        /// <summary>
        /// Weight of the item
        /// </summary>
        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        /// <summary>
        /// Unit of Weight
        /// </summary>
        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        [JsonProperty("salesChannelProductVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductVariantId { get; set; }

        /// <summary>
        /// The title of the product variant.
        /// </summary>
        [JsonProperty("variantTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantTitle { get; set; }

        /// <summary>
        /// A unique identifier for the product in the shop.
        /// </summary>
        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        /// <summary>
        /// Variant Id receievd from Sales Channel
        /// </summary>
        [JsonProperty("variantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfInventoryLocationItemDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<InventoryLocationItemDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryItemDto
    {
        /// <summary>
        /// The title of the product variant.
        /// </summary>
        [JsonProperty("variantTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantTitle { get; set; }

        /// <summary>
        /// The title of the product.
        /// </summary>
        [JsonProperty("productTitle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductTitle { get; set; }

        /// <summary>
        /// A unique identifier for the product in the shop.
        /// </summary>
        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        /// <summary>
        /// The barcode, UPC or ISBN number for the product.
        /// </summary>
        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        /// <summary>
        /// The number of items in stock for this product variant.
        /// </summary>
        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        /// <summary>
        /// The weight of the product variant in the unit system specified with weight_unit.
        /// </summary>
        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        /// <summary>
        /// The unit system that the product variant's weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".
        /// </summary>
        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// The price of the product variant.
        /// </summary>
        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// The cost price of the product variant.
        /// </summary>
        [JsonProperty("costPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPrice { get; set; }

        /// <summary>
        /// The name of the vendor of the product.
        /// </summary>
        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Vendor { get; set; }

        /// <summary>
        /// A list of image objects, each one representing an image associated with the product.
        /// </summary>
        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        /// <summary>
        /// Prime Penguin Sales Channel Product Id
        /// </summary>
        [JsonProperty("salesChannelProductId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductId { get; set; }

        /// <summary>
        /// Product Id receievd from Sales Channel
        /// </summary>
        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        /// <summary>
        /// Variant Id receievd from Sales Channel
        /// </summary>
        [JsonProperty("variantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantId { get; set; }

        /// <summary>
        /// Name of the Adder
        /// </summary>
        [JsonProperty("addedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        [JsonProperty("addedByType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public AddedBy AddedByType { get; set; }

        /// <summary>
        /// Inventory set by warehouse
        /// </summary>
        [JsonProperty("warehouseInventoryCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? WarehouseInventoryCount { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfInventoryItemDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<InventoryItemDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryReportDto
    {
        [JsonProperty("excelFileName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExcelFileName { get; set; }

        [JsonProperty("pdfFileName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PdfFileName { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfInventoryReportDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<InventoryReportDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceDto
    {
        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [JsonProperty("vat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Vat { get; set; }

        [JsonProperty("editionDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EditionDisplayName { get; set; }

        [JsonProperty("invoiceNo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InvoiceNo { get; set; }

        [JsonProperty("invoiceDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset InvoiceDate { get; set; }

        [JsonProperty("tenantLegalName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantLegalName { get; set; }

        [JsonProperty("tenantAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> TenantAddress { get; set; }

        [JsonProperty("tenantTaxNo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantTaxNo { get; set; }

        [JsonProperty("hostLegalName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HostLegalName { get; set; }

        [JsonProperty("hostAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> HostAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInvoiceDto
    {
        [JsonProperty("subscriptionPaymentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SubscriptionPaymentId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvoiceStatus
    {

        NotPaid = 0,

        Paid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceFileDto
    {
        /// <summary>
        /// Bytes array for saved file
        /// </summary>
        [JsonProperty("bytes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public byte[] Bytes { get; set; }

        /// <summary>
        /// last date of invoice payment
        /// </summary>
        [JsonProperty("lastDateofInvoicePayment", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset LastDateofInvoicePayment { get; set; }

        [JsonProperty("invoiceStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public InvoiceStatus InvoiceStatus { get; set; }

        /// <summary>
        /// Readable status of Invoice
        /// </summary>
        [JsonProperty("invoiceStatusName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InvoiceStatusName { get; set; }

        /// <summary>
        /// uploaded file name
        /// </summary>
        [JsonProperty("fileName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// DateTime of Invoice payment
        /// </summary>
        [JsonProperty("paidAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PaidAt { get; set; }

        /// <summary>
        /// Invoice Amount
        /// </summary>
        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Amount Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Name of the Eshop
        /// </summary>
        [JsonProperty("eshop", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Eshop { get; set; }

        /// <summary>
        /// Id of the Eshop Tenant
        /// </summary>
        [JsonProperty("eshopTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int EshopTenantId { get; set; }

        /// <summary>
        /// Name of the Logistic Provider
        /// </summary>
        [JsonProperty("logisticProvider", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProvider { get; set; }

        /// <summary>
        /// Id of the Logistic Provider
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Tenant Id of the Logistic Provider
        /// </summary>
        [JsonProperty("logisticProviderTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderTenantId { get; set; }

        /// <summary>
        /// Time of Invoice Upload
        /// </summary>
        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfInvoiceFileDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<InvoiceFileDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInvoiceDto
    {
        /// <summary>
        /// last date of invoice payment
        /// </summary>
        [JsonProperty("lastDateofInvoicePayment", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset LastDateofInvoicePayment { get; set; }

        [JsonProperty("invoiceStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public InvoiceStatus InvoiceStatus { get; set; }

        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [JsonProperty("currency", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationLanguageListDto
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("icon", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("isDisabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDisabled { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deleterUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? DeleterUserId { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLanguagesOutput
    {
        [JsonProperty("defaultLanguageName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultLanguageName { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ApplicationLanguageListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationLanguageEditDto
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string Name { get; set; }

        [JsonProperty("icon", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(128)]
        public string Icon { get; set; }

        /// <summary>
        /// Mapped from Language.IsDisabled with using manual mapping in CustomDtoMapper.cs
        /// </summary>
        [JsonProperty("isEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComboboxItemDto
    {
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("displayText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayText { get; set; }

        [JsonProperty("isSelected", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSelected { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLanguageForEditOutput
    {
        [JsonProperty("language", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ApplicationLanguageEditDto Language { get; set; }

        [JsonProperty("languageNames", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ComboboxItemDto> LanguageNames { get; set; }

        [JsonProperty("flags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ComboboxItemDto> Flags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateLanguageInput
    {
        [JsonProperty("language", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public ApplicationLanguageEditDto Language { get; set; } = new ApplicationLanguageEditDto();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetDefaultLanguageInput
    {
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LanguageTextListDto
    {
        [JsonProperty("key", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; set; }

        [JsonProperty("baseValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string BaseValue { get; set; }

        [JsonProperty("targetValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfLanguageTextListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LanguageTextListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateLanguageTextInput
    {
        [JsonProperty("languageName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string LanguageName { get; set; }

        [JsonProperty("sourceName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string SourceName { get; set; }

        [JsonProperty("key", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string Key { get; set; }

        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(67108864)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WarehouseStorageLocationType
    {

        Shelve = 0,

        Pallet = 1,

        CustomizedUnit = 2,

        AutoStore = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseLocationCostDto
    {
        /// <summary>
        /// Price for location items per month
        /// </summary>
        [JsonProperty("pricePerMonth", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double PricePerMonth { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("storageLocationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public WarehouseStorageLocationType StorageLocationType { get; set; }

        /// <summary>
        /// Readable StorageLocationType
        /// </summary>
        [JsonProperty("storageLocationTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StorageLocationTypeName { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Store Name of Customer Tenant
        /// </summary>
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfWarehouseLocationCostDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehouseLocationCostDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateLocationCostInput
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [JsonProperty("pricePerMonth", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double PricePerMonth { get; set; }

        [JsonProperty("storageLocationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public WarehouseStorageLocationType StorageLocationType { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationCostRuleSearchType
    {

        Equals = 0,

        StartsWith = 1,

        Regex = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseLocationCostRuleDto
    {
        /// <summary>
        /// Search term to find the location
        /// </summary>
        [JsonProperty("searchTerm", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SearchTerm { get; set; }

        /// <summary>
        /// Price for location items
        /// </summary>
        [JsonProperty("pricePerMonth", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double PricePerMonth { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// If rule is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("storageLocationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public WarehouseStorageLocationType StorageLocationType { get; set; }

        [JsonProperty("locationCostRuleSearchType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LocationCostRuleSearchType LocationCostRuleSearchType { get; set; }

        /// <summary>
        /// Readable StorageLocationType
        /// </summary>
        [JsonProperty("storageLocationTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StorageLocationTypeName { get; set; }

        /// <summary>
        /// Readable LocationCostRuleSearchType
        /// </summary>
        [JsonProperty("locationCostRuleSearchTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LocationCostRuleSearchTypeName { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Store Name of Customer Tenant
        /// </summary>
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        /// <summary>
        /// Priority of the Cost rule | Range: 1 - 50
        /// </summary>
        [JsonProperty("priority", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Priority { get; set; }

        [JsonProperty("warehouseLocationCostId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int WarehouseLocationCostId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfWarehouseLocationCostRuleDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehouseLocationCostRuleDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateLocationCostRuleInput
    {
        /// <summary>
        /// Cost rule Id
        /// </summary>
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the location where product is stored
        /// </summary>
        [JsonProperty("searchTerm", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string SearchTerm { get; set; }

        /// <summary>
        /// If rule is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("locationCostRuleSearchType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LocationCostRuleSearchType LocationCostRuleSearchType { get; set; }

        [JsonProperty("warehouseLocationCostId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int WarehouseLocationCostId { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Priority of the Cost rule | Range: 1 - 50
        /// </summary>
        [JsonProperty("priority", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 50)]
        public int Priority { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyValuePairOfStringString
    {
        [JsonProperty("key", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderDetails
    {
        /// <summary>
        /// Logistic Provider Name
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Logistic Provider Description
        /// </summary>
        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Address of Logistic Provider
        /// </summary>
        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("longitude", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfLogisticProviderDetails
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderDetails> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderCustomerDetailDto
    {
        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Name of the Logistic Provider
        /// </summary>
        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long CustomerTenantId { get; set; }

        /// <summary>
        /// PrimePenguin Tenant Customer Name
        /// </summary>
        [JsonProperty("customerTenantName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerTenantName { get; set; }

        /// <summary>
        /// Customer's Store Name
        /// </summary>
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        /// <summary>
        /// Eshop Url Address
        /// </summary>
        [JsonProperty("eShopAddressUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EShopAddressUrl { get; set; }

        /// <summary>
        /// Address of the EShop
        /// </summary>
        [JsonProperty("eShopAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EShopAddress { get; set; }

        /// <summary>
        /// Eshop Size
        /// </summary>
        [JsonProperty("eShopSize", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EShopSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfLogisticProviderCustomerDetailDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderCustomerDetailDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderCustomerDto
    {
        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Logistic Provider Name
        /// </summary>
        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long CustomerTenantId { get; set; }

        /// <summary>
        /// PrimePenguin Tenant Customer Name
        /// </summary>
        [JsonProperty("customerTenantName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerTenantName { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfLogisticProviderCustomerDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderCustomerDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstalledLogisticProviderDto
    {
        /// <summary>
        /// Name of the Logistic Provider
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Type of Logistic Provider. Can be Internal or External
        /// </summary>
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Countries separated by ,
        /// </summary>
        [JsonProperty("countries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Countries { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfInstalledLogisticProviderDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<InstalledLogisticProviderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelInstallationStatusDto
    {
        /// <summary>
        /// Channel Name
        /// </summary>
        [JsonProperty("salesChannelName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelName { get; set; }

        /// <summary>
        /// Store Name
        /// </summary>
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("installationStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelInstallationStatus InstallationStatus { get; set; }

        /// <summary>
        /// Installation Status
        /// </summary>
        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Comments
        /// </summary>
        [JsonProperty("comments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Comments { get; set; }

        /// <summary>
        /// Set to true when access token (consumer secret) is expired or invalid
        /// </summary>
        [JsonProperty("tokenRevoked", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool TokenRevoked { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfSalesChannelInstallationStatusDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelInstallationStatusDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomProductVariantDto
    {
        /// <summary>
        /// The title of the product variant.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(500)]
        public string Title { get; set; }

        /// <summary>
        /// A unique identifier for the product in the shop.
        /// </summary>
        [JsonProperty("sku", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string Sku { get; set; }

        /// <summary>
        /// The price of the product variant.
        /// </summary>
        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Custom properties that a shop owner can use to define product variants.
        /// </summary>
        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option1 { get; set; }

        /// <summary>
        /// Custom properties that a shop owner can use to define product variants.
        /// </summary>
        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option2 { get; set; }

        /// <summary>
        /// Custom properties that a shop owner can use to define product variants.
        /// </summary>
        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option3 { get; set; }

        /// <summary>
        /// The barcode, UPC or ISBN number for the product.
        /// </summary>
        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Barcode { get; set; }

        /// <summary>
        /// The number of items in stock for this product variant.
        /// </summary>
        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        /// <summary>
        /// The weight of the product variant in the unit system specified with weight_unit.
        /// </summary>
        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        /// <summary>
        /// The unit system that the product variant's weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".
        /// </summary>
        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// A list of image objects, each one representing an image associated with the variant.
        /// </summary>
        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomProductDto
    {
        /// <summary>
        /// The name of the product.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the product, complete with HTML formatting.
        /// </summary>
        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// A unique identifier for the product in the shop.
        /// </summary>
        [JsonProperty("sku", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string Sku { get; set; }

        /// <summary>
        /// The name of the vendor of the product.
        /// </summary>
        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Vendor { get; set; }

        /// <summary>
        /// A categorization that a product can be tagged with, commonly used for filtering and searching.
        /// </summary>
        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string ProductType { get; set; }

        /// <summary>
        /// A categorization that a product can be tagged with, commonly used for filtering and searching.
        /// <br/>Each comma-separated tag has a character limit of 255.
        /// </summary>
        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(255)]
        public string Tags { get; set; }

        /// <summary>
        /// A list of variant objects, each one representing a slightly different version of the product.
        /// <br/>For example, if a product comes in different sizes and colors, each size and color permutation (such as "small black", "medium black", "large blue"), would be a variant.
        /// <br/>To reorder variants, update the product with the variants in the desired order.The position attribute on the variant will be ignored.
        /// </summary>
        [JsonProperty("variants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<CustomProductVariantDto> Variants { get; set; }

        /// <summary>
        /// A list of image objects, each one representing an image associated with the product.
        /// </summary>
        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        /// <summary>
        /// Tenant Id of Logistic Provider Customer
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelProductVariantDto
    {
        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("costPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPrice { get; set; }

        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option1 { get; set; }

        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option2 { get; set; }

        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option3 { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        [JsonProperty("hsCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HsCode { get; set; }

        [JsonProperty("countryOfOrigin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CountryOfOrigin { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelProductType { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("addedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        [JsonProperty("breadth", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Breadth { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DimensionUnit { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelProductDto
    {
        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Title { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string Description { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Sku { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("publishedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishedAt { get; set; }

        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Vendor { get; set; }

        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string ProductType { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(255)]
        public string Tags { get; set; }

        [JsonProperty("variants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelProductVariantDto> Variants { get; set; }

        [JsonProperty("bundleVariants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleProductVariantDto> BundleVariants { get; set; }

        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("salesChannelProductType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelProductType { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderInvoicesDto
    {
        [JsonProperty("fromDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? FromDate { get; set; }

        [JsonProperty("toDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ToDate { get; set; }

        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [JsonProperty("grandTotal", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double GrandTotal { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfLogisticProviderInvoicesDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderInvoicesDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderDto
    {
        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderId { get; set; }

        [JsonProperty("cancelReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string CancelReason { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("closedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ClosedAt { get; set; }

        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string CustomerName { get; set; }

        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Currency { get; set; }

        [JsonProperty("customerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string CustomerId { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string Tags { get; set; }

        [JsonProperty("financialStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FinancialStatus { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("normalizedFulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedFulfillmentStatus { get; set; }

        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [JsonProperty("processingMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProcessingMethod { get; set; }

        [JsonProperty("totalLineItemsPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalLineItemsPrice { get; set; }

        [JsonProperty("totalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        [JsonProperty("totalWeight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalWeight { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("markedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? MarkedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("shippingType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingType { get; set; }

        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingCompany { get; set; }

        [JsonProperty("shippingPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingPrice { get; set; }

        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelLineItemDto> LineItems { get; set; }

        [JsonProperty("bundleLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleLineItemDto> BundleLineItems { get; set; }

        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelFulfillmentDto> Fulfillments { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderShippingAddressDto ShippingAddress { get; set; }

        [JsonProperty("orderTracking", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderTrackingDto OrderTracking { get; set; }

        [JsonProperty("refunds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderRefundDto> Refunds { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("normalizedWarehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedWarehouseStatus { get; set; }

        [JsonProperty("warehouseFulfilledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WarehouseFulfilledAt { get; set; }

        [JsonProperty("externalUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalUrl { get; set; }

        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DeliveryInstructions { get; set; }

        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InternalNote { get; set; }

        [JsonProperty("deliveryStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PrimePenguinManagedDeliveryStatus DeliveryStatus { get; set; }

        [JsonProperty("handlingTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HandlingTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfSalesChannelOrderDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentsDto
    {
        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelFulfillmentDto> Fulfillments { get; set; }

        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelLineItemDto> LineItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentLineItemDto
    {
        [JsonProperty("lineItemId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long LineItemId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrderFulfillmentDto
    {
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrderId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LogisticProviderId { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string TrackingUrl { get; set; }

        [JsonProperty("openNowAndFulfillLater", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool OpenNowAndFulfillLater { get; set; }

        [JsonProperty("lineItem", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FulfillmentLineItemDto> LineItem { get; set; }

        [JsonProperty("notifyCustomer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool NotifyCustomer { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string WarehouseStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateOrderFulfillmentDto
    {
        [JsonProperty("fulfillmentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long FulfillmentId { get; set; }

        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrderId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LogisticProviderId { get; set; }

        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string TrackingUrl { get; set; }

        [JsonProperty("openNowAndFulfillLater", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool OpenNowAndFulfillLater { get; set; }

        [JsonProperty("lineItem", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FulfillmentLineItemDto> LineItem { get; set; }

        [JsonProperty("notifyCustomer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool NotifyCustomer { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string WarehouseStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelOrderFulfillmentDto
    {
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrderId { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string WarehouseStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentTrackingDetails
    {
        [JsonProperty("trackingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        [JsonProperty("trackingNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string TrackingUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateFulfillmentStatusDto
    {
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrderId { get; set; }

        [JsonProperty("fulfillmentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long FulfillmentId { get; set; }

        [JsonProperty("status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [JsonProperty("notifyCustomer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool NotifyCustomer { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("tracking", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public FulfillmentTrackingDetails Tracking { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfSalesChannelOrderDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfSalesChannelProductDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelProductDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateProductInventoryDto
    {
        [JsonProperty("productVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long ProductVariantId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LogisticProviderId { get; set; }

        [JsonProperty("newInventoryCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int NewInventoryCount { get; set; }

        [JsonProperty("warehouseInventoryCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int WarehouseInventoryCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfSalesChannelOrderRefundDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderRefundDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDto
    {
        [JsonProperty("fullRefund", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool FullRefund { get; set; }

        [JsonProperty("amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundLineItemDto
    {
        [JsonProperty("lineItemId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long LineItemId { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateRefundInputDto
    {
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrderId { get; set; }

        [JsonProperty("restock", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Restock { get; set; }

        [JsonProperty("notify", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Notify { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("shipping", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ShippingDto Shipping { get; set; }

        [JsonProperty("refundLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<RefundLineItemDto> RefundLineItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewRefundRequest
    {
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrderId { get; set; }

        [JsonProperty("restock", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Restock { get; set; }

        [JsonProperty("notify", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Notify { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("cancelledReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledReason { get; set; }

        [JsonProperty("refundStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RefundStatus RefundStatus { get; set; }

        [JsonProperty("reviewStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewStatus ReviewStatus { get; set; }

        [JsonProperty("refundLineItems", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<RefundLineItemDto> RefundLineItems { get; set; } = new List<RefundLineItemDto>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceCostDto
    {
        /// <summary>
        /// Pallets In Use
        /// </summary>
        [JsonProperty("pallets", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Pallets { get; set; }

        /// <summary>
        /// Shelves In Use
        /// </summary>
        [JsonProperty("shelves", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Shelves { get; set; }

        /// <summary>
        /// Customized Units (In Meters)
        /// </summary>
        [JsonProperty("customizedUnits", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double CustomizedUnits { get; set; }

        /// <summary>
        /// AutoStore locations In Use
        /// </summary>
        [JsonProperty("autoStore", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double AutoStore { get; set; }

        /// <summary>
        /// Cost for Order Management
        /// </summary>
        [JsonProperty("ordersManagement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double OrdersManagement { get; set; }

        /// <summary>
        /// Cost for Return Management
        /// </summary>
        [JsonProperty("returnManagement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double ReturnManagement { get; set; }

        /// <summary>
        /// Cost for Delivery
        /// </summary>
        [JsonProperty("delivery", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Delivery { get; set; }

        /// <summary>
        /// Cost for Other Services
        /// </summary>
        [JsonProperty("others", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Others { get; set; }

        /// <summary>
        /// Date when the cost was stored in PP Platform
        /// </summary>
        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        /// <summary>
        /// Service Cost Valid Upto
        /// </summary>
        [JsonProperty("validUpto", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ValidUpto { get; set; }

        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCustomerServiceCost
    {
        /// <summary>
        /// Cost for Pallets In Use
        /// </summary>
        [JsonProperty("pallets", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Pallets { get; set; }

        /// <summary>
        /// Cost for Shelves In Use
        /// </summary>
        [JsonProperty("shelves", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Shelves { get; set; }

        /// <summary>
        /// Cost for Customized Units (In Meters)
        /// </summary>
        [JsonProperty("customizedUnits", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double CustomizedUnits { get; set; }

        /// <summary>
        /// Cost for AutoStore locations In Use
        /// </summary>
        [JsonProperty("autoStore", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double AutoStore { get; set; }

        /// <summary>
        /// Cost for Order Management
        /// </summary>
        [JsonProperty("ordersManagement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double OrdersManagement { get; set; }

        /// <summary>
        /// Cost for Return Management
        /// </summary>
        [JsonProperty("returnManagement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double ReturnManagement { get; set; }

        /// <summary>
        /// Cost for Delivery
        /// </summary>
        [JsonProperty("delivery", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Delivery { get; set; }

        /// <summary>
        /// Cost for Other Services
        /// </summary>
        [JsonProperty("others", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Others { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StorageDescriptionDto
    {
        /// <summary>
        /// Description for Pallets In Use
        /// </summary>
        [JsonProperty("pallets", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Pallets { get; set; }

        /// <summary>
        /// Description for Shelves In Use
        /// </summary>
        [JsonProperty("shelves", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shelves { get; set; }

        /// <summary>
        /// Description for Customized Units (In Meters)
        /// </summary>
        [JsonProperty("customizedUnits", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomizedUnits { get; set; }

        /// <summary>
        /// Description for AutoStore locations In Use
        /// </summary>
        [JsonProperty("autoStore", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AutoStore { get; set; }

        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCustomerStorageDescriptionInput
    {
        /// <summary>
        /// Description for Pallets In Use
        /// </summary>
        [JsonProperty("pallets", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Pallets { get; set; }

        /// <summary>
        /// Description for Shelves In Use
        /// </summary>
        [JsonProperty("shelves", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Shelves { get; set; }

        /// <summary>
        /// Description for Customized Units (In Meters)
        /// </summary>
        [JsonProperty("customizedUnits", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string CustomizedUnits { get; set; }

        /// <summary>
        /// Description for AutoStore locations In Use
        /// </summary>
        [JsonProperty("autoStore", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string AutoStore { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StorageInformationDto
    {
        /// <summary>
        /// Pallets In Use
        /// </summary>
        [JsonProperty("pallets", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Pallets { get; set; }

        /// <summary>
        /// Shelves In Use
        /// </summary>
        [JsonProperty("shelves", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Shelves { get; set; }

        /// <summary>
        /// Customized Units (In Meters)
        /// </summary>
        [JsonProperty("customizedUnits", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomizedUnits { get; set; }

        /// <summary>
        /// AutoStore locations In Use
        /// </summary>
        [JsonProperty("autoStore", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int AutoStore { get; set; }

        /// <summary>
        /// Date when the storage information was stored in PP Platform
        /// </summary>
        [JsonProperty("creationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreationTime { get; set; }

        /// <summary>
        /// Information Valid Upto
        /// </summary>
        [JsonProperty("validUpto", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ValidUpto { get; set; }

        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfStorageInformationDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<StorageInformationDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCustomerStorageInformationInput
    {
        /// <summary>
        /// Pallets In Use
        /// </summary>
        [JsonProperty("pallets", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Pallets { get; set; }

        /// <summary>
        /// Shelves In Use
        /// </summary>
        [JsonProperty("shelves", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Shelves { get; set; }

        /// <summary>
        /// Customized Units (In Meters)
        /// </summary>
        [JsonProperty("customizedUnits", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomizedUnits { get; set; }

        /// <summary>
        /// AutoStore locations In Use
        /// </summary>
        [JsonProperty("autoStore", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int AutoStore { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderTermDto
    {
        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        /// <summary>
        /// Joining fee
        /// </summary>
        [JsonProperty("joiningFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? JoiningFee { get; set; }

        /// <summary>
        /// Fixed monthly fee
        /// </summary>
        [JsonProperty("fixedMonthlyFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? FixedMonthlyFee { get; set; }

        /// <summary>
        /// Discount percentage
        /// </summary>
        [JsonProperty("discountPercentage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, 100D)]
        public double? DiscountPercentage { get; set; }

        /// <summary>
        /// Cost per order for customers from PP
        /// </summary>
        [JsonProperty("costPerOrderForPpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? CostPerOrderForPpCustomer { get; set; }

        /// <summary>
        /// Cost per order for LP's own customer
        /// </summary>
        [JsonProperty("costPerOrderForLpOwnCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? CostPerOrderForLpOwnCustomer { get; set; }

        /// <summary>
        /// Integration fee for customers from PP
        /// </summary>
        [JsonProperty("integrationFeeForPpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? IntegrationFeeForPpCustomer { get; set; }

        /// <summary>
        /// Integration fee for LP's own customers
        /// </summary>
        [JsonProperty("integrationFeeForLpOwnCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? IntegrationFeeForLpOwnCustomer { get; set; }

        /// <summary>
        /// Hourly fee
        /// </summary>
        [JsonProperty("hourlyFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? HourlyFee { get; set; }

        /// <summary>
        /// Termination months of logistic provider customer
        /// </summary>
        [JsonProperty("terminationMonthsOfLpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 32767)]
        public int? TerminationMonthsOfLpCustomer { get; set; }

        /// <summary>
        /// Termination months of prime penguin customer
        /// </summary>
        [JsonProperty("terminationMonthsOfPpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 32767)]
        public int? TerminationMonthsOfPpCustomer { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string Currency { get; set; }

        /// <summary>
        /// Logistic provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Comment for the contract
        /// </summary>
        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        /// <summary>
        /// Start date of the contract
        /// </summary>
        [JsonProperty("contractStartedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ContractStartedAt { get; set; }

        /// <summary>
        /// Discount period
        /// </summary>
        [JsonProperty("discountPeriod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DiscountPeriod { get; set; }

        /// <summary>
        /// Consulting  fee
        /// </summary>
        [JsonProperty("consultingFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? ConsultingFee { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfLogisticProviderTermDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderTermDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLogisticProviderTermInput
    {
        /// <summary>
        /// Joining fee
        /// </summary>
        [JsonProperty("joiningFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? JoiningFee { get; set; }

        /// <summary>
        /// Fixed monthly fee
        /// </summary>
        [JsonProperty("fixedMonthlyFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? FixedMonthlyFee { get; set; }

        /// <summary>
        /// Discount percentage
        /// </summary>
        [JsonProperty("discountPercentage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, 100D)]
        public double? DiscountPercentage { get; set; }

        /// <summary>
        /// Cost per order for customers from PP
        /// </summary>
        [JsonProperty("costPerOrderForPpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? CostPerOrderForPpCustomer { get; set; }

        /// <summary>
        /// Cost per order for LP's own customer
        /// </summary>
        [JsonProperty("costPerOrderForLpOwnCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? CostPerOrderForLpOwnCustomer { get; set; }

        /// <summary>
        /// Integration fee for customers from PP
        /// </summary>
        [JsonProperty("integrationFeeForPpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? IntegrationFeeForPpCustomer { get; set; }

        /// <summary>
        /// Integration fee for LP's own customers
        /// </summary>
        [JsonProperty("integrationFeeForLpOwnCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? IntegrationFeeForLpOwnCustomer { get; set; }

        /// <summary>
        /// Hourly fee
        /// </summary>
        [JsonProperty("hourlyFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? HourlyFee { get; set; }

        /// <summary>
        /// Termination months of logistic provider customer
        /// </summary>
        [JsonProperty("terminationMonthsOfLpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 32767)]
        public int? TerminationMonthsOfLpCustomer { get; set; }

        /// <summary>
        /// Termination months of prime penguin customer
        /// </summary>
        [JsonProperty("terminationMonthsOfPpCustomer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 32767)]
        public int? TerminationMonthsOfPpCustomer { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string Currency { get; set; }

        /// <summary>
        /// Logistic provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Comment for the contract
        /// </summary>
        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        /// <summary>
        /// Start date of the contract
        /// </summary>
        [JsonProperty("contractStartedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ContractStartedAt { get; set; }

        /// <summary>
        /// Discount period
        /// </summary>
        [JsonProperty("discountPeriod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DiscountPeriod { get; set; }

        /// <summary>
        /// Consulting  fee
        /// </summary>
        [JsonProperty("consultingFee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? ConsultingFee { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallMagento1Input
    {
        /// <summary>
        /// WSDL Uri of Magento 1.x
        /// </summary>
        [JsonProperty("wsdlUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string WsdlUrl { get; set; }

        /// <summary>
        /// Soap client User name
        /// </summary>
        [JsonProperty("userName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Soap client Password
        /// </summary>
        [JsonProperty("apiKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Enable light mode for integration
        /// </summary>
        [JsonProperty("lightMode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool LightMode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Magento1HookInput
    {
        [JsonProperty("entityIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> EntityIds { get; set; }

        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MagentoHookInput
    {
        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallMyCashFlowInput
    {
        /// <summary>
        /// URI of the MyCashFlow store
        /// </summary>
        [JsonProperty("shopUri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ShopUri { get; set; }

        /// <summary>
        /// Api user name
        /// </summary>
        [JsonProperty("userName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Api key password
        /// </summary>
        [JsonProperty("apiKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MyCashFlowHookInput
    {
        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Name5
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Slug3
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description2
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetaTitle3
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetaKeywords1
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetaDescription3
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViewedCount1
    {
        [JsonProperty("no", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int No { get; set; }

        [JsonProperty("se", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes26
    {
        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Price { get; set; }

        [JsonProperty("cost", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Cost { get; set; }

        [JsonProperty("image", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }

        [JsonProperty("image2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image2 { get; set; }

        [JsonProperty("image3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image3 { get; set; }

        [JsonProperty("image4", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image4 { get; set; }

        [JsonProperty("image5", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image5 { get; set; }

        [JsonProperty("image6", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image6 { get; set; }

        [JsonProperty("image7", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image7 { get; set; }

        [JsonProperty("image8", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image8 { get; set; }

        [JsonProperty("quantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Quantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Status { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Weight { get; set; }

        [JsonProperty("location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Location { get; set; }

        [JsonProperty("country_of_origin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_of_origin { get; set; }

        [JsonProperty("button_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Button_type { get; set; }

        [JsonProperty("ean", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Ean { get; set; }

        [JsonProperty("ordered_count", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Ordered_count { get; set; }

        [JsonProperty("manufacturer_sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Manufacturer_sku { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        [JsonProperty("sort", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Sort { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Name5 Name { get; set; }

        [JsonProperty("slug", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Slug3 Slug { get; set; }

        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Description2 Description { get; set; }

        [JsonProperty("meta_title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MetaTitle3 Meta_title { get; set; }

        [JsonProperty("meta_keywords", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MetaKeywords1 Meta_keywords { get; set; }

        [JsonProperty("meta_description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MetaDescription3 Meta_description { get; set; }

        [JsonProperty("viewed_count", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ViewedCount1 Viewed_count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data64
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxClass3
    {
        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data64 Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Manufacturer1
    {
        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data64 Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links1
    {
        [JsonProperty("self", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Self { get; set; }

        [JsonProperty("related", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Related { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Categories1
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links1 Links { get; set; }

        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Data64> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links2
    {
        [JsonProperty("related", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Related { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductAttributes1
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductVariants
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Data64> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSpecials
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductReviews
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Relationships16
    {
        [JsonProperty("tax-class", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TaxClass3 TaxClass { get; set; }

        [JsonProperty("manufacturer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Manufacturer1 Manufacturer { get; set; }

        [JsonProperty("categories", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Categories1 Categories { get; set; }

        [JsonProperty("product-attributes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ProductAttributes1 ProductAttributes { get; set; }

        [JsonProperty("product-variants", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ProductVariants ProductVariants { get; set; }

        [JsonProperty("product-specials", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ProductSpecials ProductSpecials { get; set; }

        [JsonProperty("product-reviews", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ProductReviews ProductReviews { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links6
    {
        [JsonProperty("self", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data62
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("attributes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Attributes26 Attributes { get; set; }

        [JsonProperty("relationships", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Relationships16 Relationships { get; set; }

        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links6 Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description3
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Url1
    {
        [JsonProperty("no", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("se", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Se { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes114
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("image", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        [JsonProperty("sort", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Sort { get; set; }

        [JsonProperty("slug", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Slug3 Slug { get; set; }

        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Description3 Description { get; set; }

        [JsonProperty("url", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Url1 Url { get; set; }

        [JsonProperty("meta_title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MetaTitle3 Meta_title { get; set; }

        [JsonProperty("meta_description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MetaDescription3 Meta_description { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("cost", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Cost { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Quantity { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Status { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Location { get; set; }

        [JsonProperty("country_of_origin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_of_origin { get; set; }

        [JsonProperty("ean", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Ean { get; set; }

        [JsonProperty("ordered_count", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Ordered_count { get; set; }

        [JsonProperty("manufacturer_sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Manufacturer_sku { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncludeChildProduct
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("attributes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Attributes114 Attributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViewaProductDetailresponse
    {
        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data62 Data { get; set; }

        [JsonProperty("included", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IncludeChildProduct> Included { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes93
    {
        [JsonProperty("customer_address_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_name { get; set; }

        [JsonProperty("customer_address_company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_company { get; set; }

        [JsonProperty("customer_address_address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_address { get; set; }

        [JsonProperty("customer_address_region", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_region { get; set; }

        [JsonProperty("customer_address_city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_city { get; set; }

        [JsonProperty("customer_address_zipcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_zipcode { get; set; }

        [JsonProperty("customer_address_state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_state { get; set; }

        [JsonProperty("customer_address_country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_country { get; set; }

        [JsonProperty("customer_address_phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_phone { get; set; }

        [JsonProperty("customer_address_email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_address_email { get; set; }

        [JsonProperty("shipping_address_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_name { get; set; }

        [JsonProperty("shipping_address_company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_company { get; set; }

        [JsonProperty("shipping_address_address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_address { get; set; }

        [JsonProperty("shipping_address_region", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_region { get; set; }

        [JsonProperty("shipping_address_city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_city { get; set; }

        [JsonProperty("shipping_address_zipcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_zipcode { get; set; }

        [JsonProperty("shipping_address_state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_state { get; set; }

        [JsonProperty("shipping_address_country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_address_country { get; set; }

        [JsonProperty("billing_address_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_name { get; set; }

        [JsonProperty("billing_address_company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_company { get; set; }

        [JsonProperty("billing_address_address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_address { get; set; }

        [JsonProperty("billing_address_region", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_region { get; set; }

        [JsonProperty("billing_address_city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_city { get; set; }

        [JsonProperty("billing_address_zipcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_zipcode { get; set; }

        [JsonProperty("billing_address_state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_state { get; set; }

        [JsonProperty("billing_address_country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Billing_address_country { get; set; }

        [JsonProperty("payment_method", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Payment_method { get; set; }

        [JsonProperty("payment_module", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Payment_module { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [JsonProperty("finished_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Finished_at { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("currency_value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency_value { get; set; }

        [JsonProperty("invoice_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Invoice_id { get; set; }

        [JsonProperty("invoice_due_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Invoice_due_at { get; set; }

        [JsonProperty("shipping_method", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipping_method { get; set; }

        [JsonProperty("tracking_number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_number { get; set; }

        [JsonProperty("overdue_notice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Overdue_notice { get; set; }

        [JsonProperty("overdue_notice_due_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Overdue_notice_due_at { get; set; }

        [JsonProperty("credit_note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Credit_note { get; set; }

        [JsonProperty("credit_note_created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Credit_note_created_at { get; set; }

        [JsonProperty("reference", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Reference { get; set; }

        [JsonProperty("estimated_delivery_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Estimated_delivery_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data72
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer7
    {
        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data72 Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderStatus2
    {
        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data64 Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderTotals
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderProducts
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Data64> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderTags
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderStatusHistory
    {
        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Data64> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Relationships74
    {
        [JsonProperty("customer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Customer7 Customer { get; set; }

        [JsonProperty("order-status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OrderStatus2 OrderStatus { get; set; }

        [JsonProperty("order-totals", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OrderTotals OrderTotals { get; set; }

        [JsonProperty("order-products", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OrderProducts OrderProducts { get; set; }

        [JsonProperty("order-tags", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OrderTags OrderTags { get; set; }

        [JsonProperty("order-status-history", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OrderStatusHistory OrderStatusHistory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data234
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("attributes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Attributes93 Attributes { get; set; }

        [JsonProperty("relationships", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Relationships74 Relationships { get; set; }

        [JsonProperty("links", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Links6 Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes17
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("original_price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Original_price { get; set; }

        [JsonProperty("discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Price { get; set; }

        [JsonProperty("final_price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Final_price { get; set; }

        [JsonProperty("quantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Quantity { get; set; }

        [JsonProperty("tax_rate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Tax_rate { get; set; }

        [JsonProperty("details", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Details { get; set; }

        [JsonProperty("transaction_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

        [JsonProperty("pos_type_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Pos_type_id { get; set; }

        [JsonProperty("order_total_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Order_total_type { get; set; }

        [JsonProperty("class", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Class { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("comments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Comments { get; set; }

        [JsonProperty("tracking_number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_number { get; set; }

        [JsonProperty("customer_notified", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Customer_notified { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Created_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncludeChildOrder
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("attributes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Attributes17 Attributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViewaOrderDetailresponse
    {
        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data234 Data { get; set; }

        [JsonProperty("included", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<IncludeChildOrder> Included { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallNetbutikkInput
    {
        [JsonProperty("shopUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ShopUrl { get; set; }

        [JsonProperty("apiAccessToken", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiAccessToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserNotificationState
    {

        Unread = 0,

        Read = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationData
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, object> Properties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationSeverity
    {

        Info = 0,

        Success = 1,

        Warn = 2,

        Error = 3,

        Fatal = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantNotification
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("notificationName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NotificationName { get; set; }

        [JsonProperty("data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public NotificationData Data { get; set; }

        [JsonProperty("entityType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [System.Obsolete]
        public string EntityType { get; set; }

        [JsonProperty("entityTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityTypeName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object EntityId { get; set; }

        [JsonProperty("severity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public NotificationSeverity Severity { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserNotification
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("state", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserNotificationState State { get; set; }

        [JsonProperty("notification", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantNotification Notification { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNotificationsOutput
    {
        [JsonProperty("unreadCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UnreadCount { get; set; }

        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserNotification> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfUserNotification
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserNotification> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityDtoOfGuid
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationSubscriptionWithDisplayNameDto
    {
        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(96)]
        public string Name { get; set; }

        [JsonProperty("isSubscribed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSubscribed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNotificationSettingsOutput
    {
        [JsonProperty("receiveNotifications", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ReceiveNotifications { get; set; }

        [JsonProperty("notifications", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NotificationSubscriptionWithDisplayNameDto> Notifications { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationSubscriptionDto
    {
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(96)]
        public string Name { get; set; }

        [JsonProperty("isSubscribed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSubscribed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateNotificationSettingsInput
    {
        [JsonProperty("receiveNotifications", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ReceiveNotifications { get; set; }

        [JsonProperty("notifications", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NotificationSubscriptionDto> Notifications { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderCostRuleDto
    {
        /// <summary>
        /// Cost per order
        /// </summary>
        [JsonProperty("costPerOrder", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPerOrder { get; set; }

        /// <summary>
        /// Price per order row (line item)
        /// </summary>
        [JsonProperty("costPerRow", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPerRow { get; set; }

        /// <summary>
        /// Price per piece(item) in order row(line item)
        /// </summary>
        [JsonProperty("costPerPiece", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CostPerPiece { get; set; }

        /// <summary>
        /// Amount Currency
        /// </summary>
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// If rule is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Store Name of Customer Tenant
        /// </summary>
        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfOrderCostRuleDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrderCostRuleDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateOrderCostRuleInput
    {
        /// <summary>
        /// Cost rule Id
        /// </summary>
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Cost per order
        /// </summary>
        [JsonProperty("costPerOrder", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? CostPerOrder { get; set; }

        /// <summary>
        /// Price per order row (line item)
        /// </summary>
        [JsonProperty("costPerRow", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? CostPerRow { get; set; }

        /// <summary>
        /// Price per piece(item) in order row(line item)
        /// </summary>
        [JsonProperty("costPerPiece", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0D, double.MaxValue)]
        public double? CostPerPiece { get; set; }

        /// <summary>
        /// If rule is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderMappingDto
    {
        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        /// <summary>
        /// True if Order Mapping is set by Customer
        /// </summary>
        [JsonProperty("isCustom", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsCustom { get; set; }

        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [JsonProperty("customerEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerEmail { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// If order is paid
        /// </summary>
        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        /// <summary>
        /// If this field is set to true, Order will be marked as Paid even when it actually isn't
        /// </summary>
        [JsonProperty("customMarkPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool CustomMarkPaid { get; set; }

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the order.
        /// </summary>
        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>
        /// Name of the Shipping Company
        /// </summary>
        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingCompany { get; set; }

        /// <summary>
        /// Special instructions for order delivery
        /// </summary>
        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DeliveryInstructions { get; set; }

        /// <summary>
        /// Internal Note for Order
        /// </summary>
        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InternalNote { get; set; }

        /// <summary>
        /// The fulfillment status for this order. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>
        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FulfillmentStatus { get; set; }

        /// <summary>
        /// Normalized fulfillment status for order.
        /// </summary>
        [JsonProperty("normalizedFulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedFulfillmentStatus { get; set; }

        /// <summary>
        /// Status of the Order at WMS
        /// </summary>
        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseStatus { get; set; }

        /// <summary>
        /// Warehouse status normalized
        /// </summary>
        [JsonProperty("normalizedWarehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedWarehouseStatus { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderShippingAddressDto ShippingAddress { get; set; }

        /// <summary>
        /// An array of PrimePenguin.Technology.SalesChannel.Orders.Dto.SalesChannelLineItemDto objects, each one containing information about an item in the order.
        /// </summary>
        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelLineItemDto> LineItems { get; set; }

        /// <summary>
        /// An array of PrimePenguin.Technology.SalesChannel.Orders.Dto.SalesChannelBundleLineItemDto objects, each one containing information about a bundle item in the order.
        /// </summary>
        [JsonProperty("bundleLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleLineItemDto> BundleLineItems { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfOrderMappingDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrderMappingDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationUnitDto
    {
        [JsonProperty("parentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? ParentId { get; set; }

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("memberCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int MemberCount { get; set; }

        [JsonProperty("roleCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int RoleCount { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfOrganizationUnitDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrganizationUnitDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationUnitUserListDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("surname", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("emailAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        [JsonProperty("profilePictureId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? ProfilePictureId { get; set; }

        [JsonProperty("addedTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset AddedTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfOrganizationUnitUserListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrganizationUnitUserListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationUnitRoleListDto
    {
        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("addedTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset AddedTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfOrganizationUnitRoleListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrganizationUnitRoleListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrganizationUnitInput
    {
        [JsonProperty("parentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? ParentId { get; set; }

        [JsonProperty("displayName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string DisplayName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateOrganizationUnitInput
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long Id { get; set; }

        [JsonProperty("displayName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string DisplayName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveOrganizationUnitInput
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long Id { get; set; }

        [JsonProperty("newParentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? NewParentId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsersToOrganizationUnitInput
    {
        [JsonProperty("userIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<long> UserIds { get; set; }

        [JsonProperty("organizationUnitId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrganizationUnitId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RolesToOrganizationUnitInput
    {
        [JsonProperty("roleIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<int> RoleIds { get; set; }

        [JsonProperty("organizationUnitId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long OrganizationUnitId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FindOrganizationUnitUsersInput
    {
        [JsonProperty("organizationUnitId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long OrganizationUnitId { get; set; }

        [JsonProperty("maxResultCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 1000)]
        public int MaxResultCount { get; set; }

        [JsonProperty("skipCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 2147483647)]
        public int SkipCount { get; set; }

        [JsonProperty("filter", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Filter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FindOrganizationUnitRolesInput
    {
        [JsonProperty("organizationUnitId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long OrganizationUnitId { get; set; }

        [JsonProperty("maxResultCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 1000)]
        public int MaxResultCount { get; set; }

        [JsonProperty("skipCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 2147483647)]
        public int SkipCount { get; set; }

        [JsonProperty("filter", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Filter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditionSelectDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("expiringEditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ExpiringEditionId { get; set; }

        [JsonProperty("dailyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? DailyPrice { get; set; }

        [JsonProperty("weeklyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? WeeklyPrice { get; set; }

        [JsonProperty("monthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? MonthlyPrice { get; set; }

        [JsonProperty("annualPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? AnnualPrice { get; set; }

        [JsonProperty("trialDayCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TrialDayCount { get; set; }

        [JsonProperty("waitingDayAfterExpire", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? WaitingDayAfterExpire { get; set; }

        [JsonProperty("isFree", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsFree { get; set; }

        [JsonProperty("isTest", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTest { get; set; }

        /// <summary>
        /// VAT to include with Edition price
        /// </summary>
        [JsonProperty("vat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Vat { get; set; }

        [JsonProperty("additionalData", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalData AdditionalData { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentInfoDto
    {
        [JsonProperty("edition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EditionSelectDto Edition { get; set; }

        [JsonProperty("additionalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double AdditionalPrice { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EditionPaymentType
    {

        NewRegistration = 0,

        BuyNow = 1,

        Upgrade = 2,

        Extend = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentPeriodType
    {

        Daily = 1,

        Weekly = 7,

        Monthly = 30,

        Annual = 365,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionPaymentGatewayType
    {

        Paypal = 1,

        Stripe = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePaymentDto
    {
        [JsonProperty("editionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int EditionId { get; set; }

        [JsonProperty("editionPaymentType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EditionPaymentType EditionPaymentType { get; set; }

        [JsonProperty("paymentPeriodType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentPeriodType PaymentPeriodType { get; set; }

        [JsonProperty("subscriptionPaymentGatewayType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionPaymentGatewayType SubscriptionPaymentGatewayType { get; set; }

        [JsonProperty("recurringPaymentEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool RecurringPaymentEnabled { get; set; }

        [JsonProperty("successUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SuccessUrl { get; set; }

        [JsonProperty("errorUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelPaymentDto
    {
        [JsonProperty("paymentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentId { get; set; }

        [JsonProperty("gateway", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionPaymentGatewayType Gateway { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionPaymentListDto
    {
        [JsonProperty("gateway", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [JsonProperty("editionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int EditionId { get; set; }

        [JsonProperty("dayCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DayCount { get; set; }

        [JsonProperty("paymentPeriodType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentPeriodType { get; set; }

        [JsonProperty("externalPaymentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalPaymentId { get; set; }

        [JsonProperty("payerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PayerId { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("editionDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EditionDisplayName { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("invoiceNo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InvoiceNo { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("lastModifierUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LastModifierUserId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfSubscriptionPaymentListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SubscriptionPaymentListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentGatewayModel
    {
        [JsonProperty("gatewayType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionPaymentGatewayType GatewayType { get; set; }

        [JsonProperty("supportsRecurringPayments", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SupportsRecurringPayments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionPaymentStatus
    {

        NotPaid = 1,

        Paid = 2,

        Failed = 3,

        Cancelled = 4,

        Completed = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionPaymentDto
    {
        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("gateway", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionPaymentGatewayType Gateway { get; set; }

        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [JsonProperty("editionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int EditionId { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("dayCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int DayCount { get; set; }

        [JsonProperty("paymentPeriodType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentPeriodType PaymentPeriodType { get; set; }

        [JsonProperty("paymentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentId { get; set; }

        [JsonProperty("payerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PayerId { get; set; }

        [JsonProperty("editionDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EditionDisplayName { get; set; }

        [JsonProperty("invoiceNo", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long InvoiceNo { get; set; }

        [JsonProperty("status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionPaymentStatus Status { get; set; }

        [JsonProperty("isRecurring", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsRecurring { get; set; }

        [JsonProperty("externalPaymentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalPaymentId { get; set; }

        [JsonProperty("successUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SuccessUrl { get; set; }

        [JsonProperty("errorUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorUrl { get; set; }

        [JsonProperty("editionPaymentType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EditionPaymentType EditionPaymentType { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayPalConfigurationDto
    {
        [JsonProperty("clientId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        [JsonProperty("demoUsername", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DemoUsername { get; set; }

        [JsonProperty("demoPassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DemoPassword { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatPermissionWithLevelDto
    {
        [JsonProperty("level", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Level { get; set; }

        [JsonProperty("parentName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ParentName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("isGrantedByDefault", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsGrantedByDefault { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfFlatPermissionWithLevelDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FlatPermissionWithLevelDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallPrestaShopInput
    {
        [JsonProperty("storeName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string StoreName { get; set; }

        [JsonProperty("key", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [JsonProperty("pluginToken", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string PluginToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrestaShopHookInput
    {
        [JsonProperty("entityIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> EntityIds { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("isPrimePenguinCustomWebhook", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPrimePenguinCustomWebhook { get; set; }

        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderCustomerTenantIdNameDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameIdDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfNameIdDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameIdDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendGeneralNotificationInput
    {
        [JsonProperty("message", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(500)]
        public string Message { get; set; }

        [JsonProperty("tenantType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantType TenantType { get; set; }

        [JsonProperty("notificationSeverity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public NotificationSeverity NotificationSeverity { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportFormInput
    {
        /// <summary>
        /// Full name
        /// </summary>
        [JsonProperty("fullName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string FullName { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        [JsonProperty("email", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string Email { get; set; }

        /// <summary>
        /// Description/Query
        /// </summary>
        [JsonProperty("query", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string Query { get; set; }

        /// <summary>
        /// Communicate using email
        /// </summary>
        [JsonProperty("communicateEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool CommunicateEmail { get; set; }

        /// <summary>
        /// Communicate using phone
        /// </summary>
        [JsonProperty("communicatePhone", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool CommunicatePhone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValueOfString
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderMasterDto
    {
        /// <summary>
        /// Name of the Logistic Provider
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the Logistic Provider
        /// </summary>
        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Homepage of the Logistic Provider
        /// </summary>
        [JsonProperty("url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Shelf size of the Logistic Provider
        /// </summary>
        [JsonProperty("shelfSize", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShelfSize { get; set; }

        /// <summary>
        /// Warehouse Size
        /// </summary>
        [JsonProperty("warehouseSize", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseSize { get; set; }

        /// <summary>
        /// Delivery locations covered by Logistic Provider
        /// </summary>
        [JsonProperty("deliveries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Deliveries { get; set; }

        /// <summary>
        /// Logistic Provider partners
        /// </summary>
        [JsonProperty("partners", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Partners { get; set; }

        /// <summary>
        /// Logo Url
        /// </summary>
        [JsonProperty("logoUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Warehouse Image Url
        /// </summary>
        [JsonProperty("warehouseImageUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseImageUrl { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("longitude", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfLogisticProviderMasterDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderMasterDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableLogisticProviders
    {
        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the Logistic Provider
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappingConfigurationDto
    {
        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Name of the Logistic Provider
        /// </summary>
        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        [JsonProperty("mappingConfigurationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MappingConfigurationType MappingConfigurationType { get; set; }

        /// <summary>
        /// Name of the MappingConfigurationType
        /// </summary>
        [JsonProperty("mappingConfigurationTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MappingConfigurationTypeName { get; set; }

        /// <summary>
        /// Value for the Mapping Type
        /// </summary>
        [JsonProperty("mappingConfigurationValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MappingConfigurationValue { get; set; }

        /// <summary>
        /// Lower value of Priority will be selected over higher priority
        /// </summary>
        [JsonProperty("mappingPriority", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int MappingPriority { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductMappingDto
    {
        /// <summary>
        /// Tenant Name of the Logistic Provider Customer
        /// </summary>
        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Logistic Provider Customer Tenant Id
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long CustomerTenantId { get; set; }

        /// <summary>
        /// List of all the available logistic providers available for the customer
        /// </summary>
        [JsonProperty("availableLogisticProviders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<AvailableLogisticProviders> AvailableLogisticProviders { get; set; }

        /// <summary>
        /// Mapping configurations
        /// </summary>
        [JsonProperty("mappingConfigurationDtos", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<MappingConfigurationDto> MappingConfigurationDtos { get; set; }

        /// <summary>
        /// Product Variant Id
        /// </summary>
        [JsonProperty("productVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long ProductVariantId { get; set; }

        /// <summary>
        /// Product Variant Name
        /// </summary>
        [JsonProperty("productVariantName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantName { get; set; }

        /// <summary>
        /// Product Name
        /// </summary>
        [JsonProperty("productName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product SKU
        /// </summary>
        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfProductMappingDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProductMappingDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddUpdateProductMappingsInput
    {
        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Customer/E-Shop Tenant Id
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("mappingConfigurationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MappingConfigurationType MappingConfigurationType { get; set; }

        /// <summary>
        /// Value for the Mapping Type
        /// </summary>
        [JsonProperty("mappingConfigurationValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string MappingConfigurationValue { get; set; }

        /// <summary>
        /// Lower value of Priority will be selected over higher priority
        /// </summary>
        [JsonProperty("mappingPriority", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 32767)]
        public int MappingPriority { get; set; }

        [JsonProperty("productVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long ProductVariantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionalProductMappingInput
    {
        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Logistic Provider Id
        /// </summary>
        [JsonProperty("salesChannelId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? SalesChannelId { get; set; }

        [JsonProperty("mappingConfigurationType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MappingConfigurationType MappingConfigurationType { get; set; }

        /// <summary>
        /// Value for the Mapping Type
        /// </summary>
        [JsonProperty("mappingConfigurationValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string MappingConfigurationValue { get; set; }

        /// <summary>
        /// Lower value of Priority will be selected over higher priority
        /// </summary>
        [JsonProperty("mappingPriority", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 32767)]
        public int MappingPriority { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentUserProfileEditDto
    {
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string Name { get; set; }

        [JsonProperty("surname", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string Surname { get; set; }

        [JsonProperty("userName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string UserName { get; set; }

        [JsonProperty("emailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string EmailAddress { get; set; }

        [JsonProperty("phoneNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(24)]
        public string PhoneNumber { get; set; }

        [JsonProperty("isPhoneNumberConfirmed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPhoneNumberConfirmed { get; set; }

        [JsonProperty("timezone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        [JsonProperty("qrCodeSetupImageUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string QrCodeSetupImageUrl { get; set; }

        [JsonProperty("isGoogleAuthenticatorEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsGoogleAuthenticatorEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateGoogleAuthenticatorKeyOutput
    {
        [JsonProperty("qrCodeSetupImageUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string QrCodeSetupImageUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendVerificationSmsInputDto
    {
        [JsonProperty("phoneNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VerifySmsCodeInputDto
    {
        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("phoneNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangePasswordInput
    {
        [JsonProperty("currentPassword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string CurrentPassword { get; set; }

        [JsonProperty("newPassword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string NewPassword { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateProfilePictureInput
    {
        [JsonProperty("fileToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(400)]
        public string FileToken { get; set; }

        [JsonProperty("x", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int X { get; set; }

        [JsonProperty("y", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Y { get; set; }

        [JsonProperty("width", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Width { get; set; }

        [JsonProperty("height", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Height { get; set; }

        [JsonProperty("useGravatarProfilePicture", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UseGravatarProfilePicture { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPasswordComplexitySettingOutput
    {
        [JsonProperty("setting", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PasswordComplexitySetting Setting { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetProfilePictureOutput
    {
        [JsonProperty("profilePicture", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProfilePicture { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeUserLanguageDto
    {
        [JsonProperty("languageName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string LanguageName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderSupplierAddressDto
    {
        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Address { get; set; }

        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Address2 { get; set; }

        [JsonProperty("postCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string PostCode { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string City { get; set; }

        [JsonProperty("mobilePhone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string MobilePhone { get; set; }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string Email { get; set; }

        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2)]
        public string CountryCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderSupplierDto
    {
        [JsonProperty("supplierName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string SupplierName { get; set; }

        [JsonProperty("supplierNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string SupplierNumber { get; set; }

        [JsonProperty("address", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PurchaseOrderSupplierAddressDto Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderLineDto
    {
        [JsonProperty("articleNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string ArticleNumber { get; set; }

        [JsonProperty("articleName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string ArticleName { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string Comment { get; set; }

        [JsonProperty("numberOfItems", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public double NumberOfItems { get; set; }

        [JsonProperty("receivedNumberOfItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ReceivedNumberOfItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderDto
    {
        [JsonProperty("orderNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string OrderNumber { get; set; }

        [JsonProperty("supplierOrderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SupplierOrderNumber { get; set; }

        [JsonProperty("batchNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string BatchNumber { get; set; }

        [JsonProperty("referenceNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ReferenceNumber { get; set; }

        [JsonProperty("deliveryMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string DeliveryMethod { get; set; }

        [JsonProperty("orderType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderType { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        [JsonProperty("invoiceNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string InvoiceNumber { get; set; }

        [JsonProperty("inDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? InDate { get; set; }

        [JsonProperty("orderDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset OrderDate { get; set; }

        [JsonProperty("receivedDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ReceivedDate { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Status { get; set; }

        [JsonProperty("isReturnOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsReturnOrder { get; set; }

        [JsonProperty("purchaseOrderSupplier", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PurchaseOrderSupplierDto PurchaseOrderSupplier { get; set; }

        [JsonProperty("purchaseOrderLines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PurchaseOrderLineDto> PurchaseOrderLines { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfPurchaseOrderDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PurchaseOrderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfPurchaseOrderDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PurchaseOrderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUpdatePurchaseOrderDto
    {
        [JsonProperty("orderNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string OrderNumber { get; set; }

        [JsonProperty("supplierOrderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SupplierOrderNumber { get; set; }

        [JsonProperty("batchNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string BatchNumber { get; set; }

        [JsonProperty("referenceNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ReferenceNumber { get; set; }

        [JsonProperty("deliveryMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string DeliveryMethod { get; set; }

        [JsonProperty("orderType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderType { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

        [JsonProperty("invoiceNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string InvoiceNumber { get; set; }

        [JsonProperty("inDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? InDate { get; set; }

        [JsonProperty("isReturnOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsReturnOrder { get; set; }

        [JsonProperty("purchaseOrderSupplier", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PurchaseOrderSupplierDto PurchaseOrderSupplier { get; set; }

        [JsonProperty("purchaseOrderLines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PurchaseOrderLineDto> PurchaseOrderLines { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallQuickbutikInput
    {
        /// <summary>
        /// URI of the Quickbutik store
        /// </summary>
        [JsonProperty("storeUri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string StoreUri { get; set; }

        /// <summary>
        /// API Key
        /// </summary>
        [JsonProperty("apiKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuickbutikHookInput
    {
        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleListDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("isStatic", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsStatic { get; set; }

        [JsonProperty("isDefault", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfRoleListDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<RoleListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleEditDto
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [JsonProperty("displayName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [JsonProperty("isDefault", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatPermissionDto
    {
        [JsonProperty("parentName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ParentName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("isGrantedByDefault", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsGrantedByDefault { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRoleForEditOutput
    {
        [JsonProperty("role", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RoleEditDto Role { get; set; }

        [JsonProperty("permissions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FlatPermissionDto> Permissions { get; set; }

        [JsonProperty("grantedPermissionNames", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> GrantedPermissionNames { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateRoleInput
    {
        [JsonProperty("role", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public RoleEditDto Role { get; set; } = new RoleEditDto();

        [JsonProperty("grantedPermissionNames", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<string> GrantedPermissionNames { get; set; } = new List<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstalledSalesChannel
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("domain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Domain { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfInstalledSalesChannel
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<InstalledSalesChannel> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelDashboardDto
    {
        /// <summary>
        /// Count of Products available in Shopify Sales Channel
        /// </summary>
        [JsonProperty("productCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ProductCount { get; set; }

        /// <summary>
        /// Count of Orders made in Shopify Sales Channel
        /// </summary>
        [JsonProperty("orderCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrderCount { get; set; }

        [JsonProperty("salesChannelInstallationStatusDto", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelInstallationStatusDto SalesChannelInstallationStatusDto { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSalesChannelCredentialsDto
    {
        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int SalesChannelId { get; set; }

        [JsonProperty("accessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [JsonProperty("consumerKey", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConsumerKey { get; set; }

        [JsonProperty("consumerSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConsumerSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelSettingsDto
    {
        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DimensionUnit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelLocationDto
    {
        [JsonProperty("salesChannelLocationId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? SalesChannelLocationId { get; set; }

        /// <summary>
        /// The name of the location.
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The city the location is in.
        /// </summary>
        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// The country the location is in.
        /// </summary>
        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Id of the Sales Channel
        /// </summary>
        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// Logistic provider assigned for the location
        /// </summary>
        [JsonProperty("logisticProviderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LogisticProviderId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderCoordinates
    {
        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfSalesChannelFulfillmentDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelFulfillmentDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSalesChannelOrderShippingAddressInput
    {
        /// <summary>
        /// The street address of the shipping address.
        /// </summary>
        [JsonProperty("address1", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string Address1 { get; set; }

        /// <summary>
        /// An optional additional field for the street address of the shipping address.
        /// </summary>
        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Address2 { get; set; }

        /// <summary>
        /// The city of the shipping address.
        /// </summary>
        [JsonProperty("city", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string City { get; set; }

        /// <summary>
        /// The company of the person associated with the shipping address.
        /// </summary>
        [JsonProperty("company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Company { get; set; }

        /// <summary>
        /// The name of the country of the shipping address.
        /// </summary>
        [JsonProperty("country", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Country { get; set; }

        /// <summary>
        /// The two-letter code for the country of the shipping address.
        /// </summary>
        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The first name of the person associated with the payment method.
        /// </summary>
        [JsonProperty("firstName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the person associated with the payment method.
        /// </summary>
        [JsonProperty("lastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string LastName { get; set; }

        /// <summary>
        /// The phone number at the shipping address.
        /// </summary>
        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(30)]
        public string Phone { get; set; }

        /// <summary>
        /// The name of the state or province of the shipping address.
        /// </summary>
        [JsonProperty("province", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Province { get; set; }

        /// <summary>
        /// The zip or postal code of the shipping address.
        /// </summary>
        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Zip { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddDeliveryInstructionToOrderInput
    {
        /// <summary>
        /// Special instructions for order delivery
        /// </summary>
        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string DeliveryInstructions { get; set; }

        /// <summary>
        /// Internal Note for Order
        /// </summary>
        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string InternalNote { get; set; }

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the order.
        /// </summary>
        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomFields
    {
        [JsonProperty("product_price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Product_price { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Checkpoint
    {
        [JsonProperty("slug", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Slug { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("created_at", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Created_at { get; set; }

        [JsonProperty("location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Location { get; set; }

        [JsonProperty("country_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_name { get; set; }

        [JsonProperty("message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("country_iso3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_iso3 { get; set; }

        [JsonProperty("tag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [JsonProperty("subtag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subtag { get; set; }

        [JsonProperty("subtag_message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subtag_message { get; set; }

        [JsonProperty("checkpoint_time", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Checkpoint_time { get; set; }

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Zip { get; set; }

        [JsonProperty("raw_tag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Raw_tag { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tracking
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("created_at", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Updated_at { get; set; }

        [JsonProperty("last_updated_at", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Last_updated_at { get; set; }

        [JsonProperty("tracking_number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_number { get; set; }

        [JsonProperty("slug", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Slug { get; set; }

        [JsonProperty("active", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Active { get; set; }

        [JsonProperty("custom_fields", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomFields Custom_fields { get; set; }

        [JsonProperty("customer_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_name { get; set; }

        [JsonProperty("delivery_time", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Delivery_time { get; set; }

        [JsonProperty("destination_country_iso3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Destination_country_iso3 { get; set; }

        [JsonProperty("courier_destination_country_iso3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Courier_destination_country_iso3 { get; set; }

        [JsonProperty("emails", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Emails { get; set; }

        [JsonProperty("expected_delivery", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Expected_delivery { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("order_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Order_id { get; set; }

        [JsonProperty("order_id_path", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Order_id_path { get; set; }

        [JsonProperty("origin_country_iso3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Origin_country_iso3 { get; set; }

        [JsonProperty("shipment_package_count", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Shipment_package_count { get; set; }

        [JsonProperty("shipment_pickup_date", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Shipment_pickup_date { get; set; }

        [JsonProperty("shipment_delivery_date", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Shipment_delivery_date { get; set; }

        [JsonProperty("shipment_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipment_type { get; set; }

        [JsonProperty("shipment_weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipment_weight { get; set; }

        [JsonProperty("shipment_weight_unit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipment_weight_unit { get; set; }

        [JsonProperty("signed_by", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Signed_by { get; set; }

        [JsonProperty("smses", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Smses { get; set; }

        [JsonProperty("source", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }

        [JsonProperty("tag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [JsonProperty("subtag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subtag { get; set; }

        [JsonProperty("subtag_message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subtag_message { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("tracked_count", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Tracked_count { get; set; }

        [JsonProperty("last_mile_tracking_supported", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Last_mile_tracking_supported { get; set; }

        [JsonProperty("language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("checkpoints", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Checkpoint> Checkpoints { get; set; }

        [JsonProperty("subscribed_smses", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Subscribed_smses { get; set; }

        [JsonProperty("subscribed_emails", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Subscribed_emails { get; set; }

        [JsonProperty("return_to_sender", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Return_to_sender { get; set; }

        [JsonProperty("tracking_origin_country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_origin_country { get; set; }

        [JsonProperty("tracking_destination_country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_destination_country { get; set; }

        [JsonProperty("tracking_key", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_key { get; set; }

        [JsonProperty("tracking_postal_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_postal_code { get; set; }

        [JsonProperty("tracking_ship_date", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_ship_date { get; set; }

        [JsonProperty("tracking_state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_state { get; set; }

        [JsonProperty("order_promised_delivery_date", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Order_promised_delivery_date { get; set; }

        [JsonProperty("delivery_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Delivery_type { get; set; }

        [JsonProperty("pickup_location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Pickup_location { get; set; }

        [JsonProperty("pickup_note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Pickup_note { get; set; }

        [JsonProperty("courier_tracking_link", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Uri Courier_tracking_link { get; set; }

        [JsonProperty("courier_redirect_link", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Courier_redirect_link { get; set; }

        [JsonProperty("first_attempted_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? First_attempted_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AftershipWebhookResponse
    {
        [JsonProperty("event_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Event_id { get; set; }

        [JsonProperty("event", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Event { get; set; }

        [JsonProperty("is_tracking_first_tag", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Is_tracking_first_tag { get; set; }

        [JsonProperty("ts", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Ts { get; set; }

        [JsonProperty("msg", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tracking Msg { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelProductVariantInput
    {
        /// <summary>
        /// Id of Sales Channel Product Variant
        /// </summary>
        [JsonProperty("productVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string ProductVariantId { get; set; }

        /// <summary>
        /// The unique numeric identifier for the product.
        /// </summary>
        [JsonProperty("productId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string ProductId { get; set; }

        /// <summary>
        /// The title of the product variant.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(500)]
        public string Title { get; set; }

        /// <summary>
        /// A unique identifier for the product in the shop.
        /// </summary>
        [JsonProperty("sku", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string Sku { get; set; }

        /// <summary>
        /// Service that is doing the fulfillment. Can be 'manual' or any custom string.
        /// </summary>
        [JsonProperty("fulfillmentService", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FulfillmentService { get; set; }

        /// <summary>
        /// The price of the product variant.
        /// </summary>
        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Custom properties that a shop owner can use to define product variants.
        /// </summary>
        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Option1 { get; set; }

        /// <summary>
        /// Custom properties that a shop owner can use to define product variants.
        /// </summary>
        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Option2 { get; set; }

        /// <summary>
        /// Custom properties that a shop owner can use to define product variants.
        /// </summary>
        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Option3 { get; set; }

        /// <summary>
        /// Specifies whether or not a tax is charged when the product variant is sold.
        /// </summary>
        [JsonProperty("taxable", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant.
        /// </summary>
        [JsonProperty("requiresShipping", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequiresShipping { get; set; }

        /// <summary>
        /// The barcode, UPC or ISBN number for the product.
        /// </summary>
        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Barcode { get; set; }

        /// <summary>
        /// The number of items in stock for this product variant.
        /// </summary>
        [JsonProperty("inventoryQuantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 2147483647)]
        public int InventoryQuantity { get; set; }

        /// <summary>
        /// The weight of the product variant in the unit system specified with weight_unit.
        /// </summary>
        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        /// <summary>
        /// A list of image objects, each one representing an image associated with the variant.
        /// </summary>
        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string ImageSources { get; set; }

        /// <summary>
        /// The unit system that the product variant's weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".
        /// </summary>
        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string WeightUnit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelProductInput
    {
        /// <summary>
        /// Id of Sales Channel Product
        /// </summary>
        [JsonProperty("salesChannelProductId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string SalesChannelProductId { get; set; }

        /// <summary>
        /// The name of the product.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the product, complete with HTML formatting.
        /// </summary>
        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// A unique identifier for the product in the shop.
        /// </summary>
        [JsonProperty("sku", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string Sku { get; set; }

        /// <summary>
        /// The date and time when the product was published.
        /// </summary>
        [JsonProperty("publishedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishedAt { get; set; }

        /// <summary>
        /// The name of the vendor of the product.
        /// </summary>
        [JsonProperty("vendor", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(500)]
        public string Vendor { get; set; }

        /// <summary>
        /// A categorization that a product can be tagged with, commonly used for filtering and searching.
        /// </summary>
        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string ProductType { get; set; }

        /// <summary>
        /// A categorization that a product can be tagged with, commonly used for filtering and searching.
        /// <br/>Each comma-separated tag has a character limit of 255.
        /// </summary>
        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(255)]
        public string Tags { get; set; }

        /// <summary>
        /// A list of variant objects, each one representing a slightly different version of the product.
        /// <br/>For example, if a product comes in different sizes and colors, each size and color permutation (such as "small black", "medium black", "large blue"), would be a variant.
        /// <br/>To reorder variants, update the product with the variants in the desired order.The position attribute on the variant will be ignored.
        /// </summary>
        [JsonProperty("variants", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<SalesChannelProductVariantInput> Variants { get; set; } = new List<SalesChannelProductVariantInput>();

        /// <summary>
        /// A list of image objects, each one representing an image associated with the product.
        /// </summary>
        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string ImageSources { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelLineItemInput
    {
        /// <summary>
        /// Id of Sales Channel Product Variant
        /// </summary>
        [JsonProperty("productVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string ProductVariantId { get; set; }

        /// <summary>
        /// Id of Sales Channel Address
        /// </summary>
        [JsonProperty("salesChannelLineItemId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string SalesChannelLineItemId { get; set; }

        /// <summary>
        /// Service provider who is doing the fulfillment. Valid values are either "manual" or the name of the provider. eg: "amazon", "shipwire", etc.
        /// </summary>
        [JsonProperty("fulfillmentService", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string FulfillmentService { get; set; }

        /// <summary>
        /// The fulfillment status of this line item. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>
        [JsonProperty("fulfillmentStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string FulfillmentStatus { get; set; }

        /// <summary>
        /// The weight of the item in grams.
        /// </summary>
        [JsonProperty("grams", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 2147483647)]
        public int Grams { get; set; }

        /// <summary>
        /// The price of the item before discounts have been applied.
        /// </summary>
        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// The unique numeric identifier for the product in the fulfillment. Can be null if the original product associated with the order is deleted at a later date
        /// </summary>
        [JsonProperty("productId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string ProductId { get; set; }

        /// <summary>
        /// The number of products that were purchased.
        /// </summary>
        [JsonProperty("quantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int Quantity { get; set; }

        /// <summary>
        /// States whether or not the fulfillment requires shipping.
        /// </summary>
        [JsonProperty("requiresShipping", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequiresShipping { get; set; }

        /// <summary>
        /// A unique identifier of the item in the fulfillment.
        /// </summary>
        [JsonProperty("sku", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Sku { get; set; }

        /// <summary>
        /// The title of the product.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string Title { get; set; }

        /// <summary>
        /// The title of the product variant. Can be null if the product purchased is not a variant.
        /// </summary>
        [JsonProperty("variantTitle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(200)]
        public string VariantTitle { get; set; }

        /// <summary>
        /// The name of the product variant.
        /// </summary>
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(500)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the supplier of the item.
        /// </summary>
        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Vendor { get; set; }

        /// <summary>
        /// States whether or not the product was taxable.
        /// </summary>
        [JsonProperty("taxable", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// The total discount amount applied to this line item. This value is not subtracted in the line item price.
        /// </summary>
        [JsonProperty("totalDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalDiscount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelFulfillmentInput
    {
        /// <summary>
        /// Id of Sales Channel Order Fulfillment
        /// </summary>
        [JsonProperty("salesChannelFulfillmentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string SalesChannelFulfillmentId { get; set; }

        /// <summary>
        /// The unique numeric identifier for the order. This Id is not Prime Penguin Id.
        /// </summary>
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string OrderId { get; set; }

        /// <summary>
        /// Information about the receipt.
        /// </summary>
        [JsonProperty("receipt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1500)]
        public string Receipt { get; set; }

        /// <summary>
        /// The status of the fulfillment. Example values are 'pending', 'open', 'success', 'cancelled', 'error' and 'failure'.
        /// </summary>
        [JsonProperty("status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(30)]
        public string Status { get; set; }

        /// <summary>
        /// The name of the shipping company.
        /// </summary>
        [JsonProperty("trackingCompany", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string TrackingCompany { get; set; }

        /// <summary>
        /// The shipping number, provided by the shipping company.
        /// </summary>
        [JsonProperty("trackingNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The tracking url, provided by the shipping company. May be null.
        /// </summary>
        [JsonProperty("trackingUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string TrackingUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderShippingAddressInput
    {
        [JsonProperty("salesChannelOrderShippingAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SalesChannelOrderShippingAddressId { get; set; }

        /// <summary>
        /// The street address of the shipping address.
        /// </summary>
        [JsonProperty("address1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Address1 { get; set; }

        /// <summary>
        /// An optional additional field for the street address of the shipping address.
        /// </summary>
        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Address2 { get; set; }

        /// <summary>
        /// The city of the shipping address.
        /// </summary>
        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string City { get; set; }

        /// <summary>
        /// The company of the person associated with the shipping address.
        /// </summary>
        [JsonProperty("company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Company { get; set; }

        /// <summary>
        /// The name of the country of the shipping address.
        /// </summary>
        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Country { get; set; }

        /// <summary>
        /// The two-letter code for the country of the shipping address.
        /// </summary>
        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The first name of the person associated with the payment method.
        /// </summary>
        [JsonProperty("firstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the person associated with the payment method.
        /// </summary>
        [JsonProperty("lastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string LastName { get; set; }

        /// <summary>
        /// The latitude of the shipping address.
        /// </summary>
        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Latitude { get; set; }

        /// <summary>
        /// The longitude of the shipping address.
        /// </summary>
        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Longitude { get; set; }

        /// <summary>
        /// The full name of the person associated with the payment method.
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Name { get; set; }

        /// <summary>
        /// The phone number at the shipping address.
        /// </summary>
        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(30)]
        public string Phone { get; set; }

        /// <summary>
        /// The name of the state or province of the shipping address.
        /// </summary>
        [JsonProperty("province", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Province { get; set; }

        /// <summary>
        /// The zip or postal code of the shipping address.
        /// </summary>
        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Zip { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelRefundLineItemInput
    {
        /// <summary>
        /// The unique identifier of the refund line item.
        /// </summary>
        [JsonProperty("lineItemId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? LineItemId { get; set; }

        /// <summary>
        /// The quantity of the associated line item that was returned.
        /// </summary>
        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Tax amount refunded
        /// </summary>
        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        /// <summary>
        /// Item subtotal
        /// </summary>
        [JsonProperty("subTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? SubTotal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderRefundInput
    {
        /// <summary>
        /// The date and time when the refund was imported.
        /// </summary>
        [JsonProperty("processedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ProcessedAt { get; set; }

        /// <summary>
        /// The optional note attached to a refund.
        /// </summary>
        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        /// <summary>
        /// The list of PrimePenguin.Technology.SalesChannelPlatform.Dto.SalesChannelRefundLineItemInput objects
        /// </summary>
        [JsonProperty("refundLineItems", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<SalesChannelRefundLineItemInput> RefundLineItems { get; set; } = new List<SalesChannelRefundLineItemInput>();

        /// <summary>
        /// Whether or not the line items were added back to the store inventory.
        /// </summary>
        [JsonProperty("restock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Restock { get; set; }

        [JsonProperty("refundStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RefundStatus RefundStatus { get; set; }

        [JsonProperty("reviewStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewStatus ReviewStatus { get; set; }

        /// <summary>
        /// The date and time when the refund was cancelled.
        /// </summary>
        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        /// <summary>
        /// The reason why the refund was cancelled.
        /// </summary>
        [JsonProperty("cancelledReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledReason { get; set; }

        /// <summary>
        /// The image paths for cancelled order, seperated by ;
        /// </summary>
        [JsonProperty("cancelledOrderImages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledOrderImages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesChannelOrderInput
    {
        /// <summary>
        /// Id of Sales Channel Order
        /// </summary>
        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string SalesChannelOrderId { get; set; }

        /// <summary>
        /// The reason why the order was cancelled. If the order was not cancelled, this value is null. Known values are "customer", "fraud", "inventory" and "other".
        /// </summary>
        [JsonProperty("cancelReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string CancelReason { get; set; }

        /// <summary>
        /// The date and time when the order was cancelled. If the order was not cancelled, this value is null.
        /// </summary>
        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        /// <summary>
        /// The date and time when the order was closed. If the order was not closed, this value is null.
        /// </summary>
        [JsonProperty("closedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ClosedAt { get; set; }

        /// <summary>
        /// The customer's full name.
        /// </summary>
        [JsonProperty("customerName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(300)]
        public string CustomerName { get; set; }

        /// <summary>
        /// The customer's contact email address.
        /// </summary>
        [JsonProperty("contactEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>
        [JsonProperty("currency", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string Currency { get; set; }

        /// <summary>
        /// Customer Id.
        /// </summary>
        [JsonProperty("customerId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The financial status of an order. Known values are "authorized", "paid", "pending", "partially_paid", "partially_refunded", "refunded" and "voided".
        /// </summary>
        [JsonProperty("financialStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string FinancialStatus { get; set; }

        /// <summary>
        /// The fulfillment status for this order. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>
        [JsonProperty("fulfillmentStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string FulfillmentStatus { get; set; }

        /// <summary>
        /// A unique numeric identifier for the order. This one is used by the shop owner and customer.
        /// <br/>This is different from the id property, which is also a unique numeric identifier for the order, but used for API purposes.
        /// </summary>
        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The type of payment processing method. Known values are 'checkout', 'direct', 'manual', 'offsite', 'express', 'free' and 'none'.
        /// </summary>
        [JsonProperty("processingMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProcessingMethod { get; set; }

        /// <summary>
        /// The sum of all the prices of all the items in the order.
        /// </summary>
        [JsonProperty("totalLineItemsPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalLineItemsPrice { get; set; }

        /// <summary>
        /// The sum of all the prices of all the items in the order, with taxes and discounts included (must be positive).
        /// </summary>
        [JsonProperty("totalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>
        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        /// <summary>
        /// The sum of all the weights of the line items in the order, in grams.
        /// </summary>
        [JsonProperty("totalWeight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalWeight { get; set; }

        /// <summary>
        /// An array of PrimePenguin.Technology.SalesChannelPlatform.Dto.SalesChannelLineItemInput objects, each one containing information about an item in the order.
        /// </summary>
        [JsonProperty("lineItems", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<SalesChannelLineItemInput> LineItems { get; set; } = new List<SalesChannelLineItemInput>();

        /// <summary>
        /// An array of PrimePenguin.Technology.SalesChannelPlatform.Dto.SalesChannelFulfillmentInput objects for this order.
        /// </summary>
        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelFulfillmentInput> Fulfillments { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public SalesChannelOrderShippingAddressInput ShippingAddress { get; set; } = new SalesChannelOrderShippingAddressInput();

        /// <summary>
        /// An array of PrimePenguin.Technology.SalesChannelPlatform.Dto.SalesChannelOrderRefundInput objects for this order.
        /// </summary>
        [JsonProperty("refunds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderRefundInput> Refunds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductVariantMiniInformationDto
    {
        [JsonProperty("productVariantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductVariantId { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfProductVariantMiniInformationDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProductVariantMiniInformationDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductVariantInventoryHistoryDto
    {
        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("updatedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Name of the Adder
        /// </summary>
        [JsonProperty("addedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfProductVariantInventoryHistoryDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProductVariantInventoryHistoryDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class B2BOrderLineItemInput
    {
        [JsonProperty("sku", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Sku { get; set; }

        [JsonProperty("quantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Quantity { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUpdateB2BOrderInput
    {
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string OrderId { get; set; }

        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        [JsonProperty("currency", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string Currency { get; set; }

        [JsonProperty("financialStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FinancialStatus { get; set; }

        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<B2BOrderLineItemInput> LineItems { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderShippingAddressDto ShippingAddress { get; set; }

        [JsonProperty("totalLineItemsPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalLineItemsPrice { get; set; }

        [JsonProperty("totalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("shippingType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string ShippingType { get; set; }

        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string ShippingCompany { get; set; }

        [JsonProperty("shippingPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingPrice { get; set; }

        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        [JsonProperty("externalUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string ExternalUrl { get; set; }

        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string DeliveryInstructions { get; set; }

        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string InternalNote { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockTransferOrderLineItemInput
    {
        [JsonProperty("sku", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Sku { get; set; }

        [JsonProperty("articleName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ArticleName { get; set; }

        [JsonProperty("quantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int Quantity { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Comment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUpdateStockTransferOrderInput
    {
        [JsonProperty("orderNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string OrderNumber { get; set; }

        [JsonProperty("inDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset InDate { get; set; }

        [JsonProperty("supplierOrderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string SupplierOrderNumber { get; set; }

        [JsonProperty("invoiceNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string InvoiceNumber { get; set; }

        [JsonProperty("batchNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string BatchNumber { get; set; }

        [JsonProperty("referenceNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ReferenceNumber { get; set; }

        [JsonProperty("deliveryMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string DeliveryMethod { get; set; }

        [JsonProperty("orderType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderType { get; set; }

        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<StockTransferOrderLineItemInput> LineItems { get; set; }

        [JsonProperty("fromWarehouseId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int FromWarehouseId { get; set; }

        [JsonProperty("toWarehouseId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int ToWarehouseId { get; set; }

        [JsonProperty("fillNewAddressDetails", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool FillNewAddressDetails { get; set; }

        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string ShippingCompany { get; set; }

        [JsonProperty("shippingType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string ShippingType { get; set; }

        [JsonProperty("shippingPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingPrice { get; set; }

        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string InternalNote { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderShippingAddressDto ShippingAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserLoginInfoDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("surname", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("emailAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        [JsonProperty("profilePictureId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProfilePictureId { get; set; }

        /// <summary>
        /// DateTime when user accepted terms and conditions
        /// </summary>
        [JsonProperty("acceptedTermsAndConditionDateTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? AcceptedTermsAndConditionDateTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditionInfoDto
    {
        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("trialDayCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TrialDayCount { get; set; }

        [JsonProperty("monthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? MonthlyPrice { get; set; }

        [JsonProperty("annualPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? AnnualPrice { get; set; }

        [JsonProperty("isHighestEdition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsHighestEdition { get; set; }

        [JsonProperty("isFree", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsFree { get; set; }

        /// <summary>
        /// Describe if this is a free test edition
        /// </summary>
        [JsonProperty("isTest", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTest { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantLoginInfoDto
    {
        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("logoId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? LogoId { get; set; }

        [JsonProperty("logoFileType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogoFileType { get; set; }

        [JsonProperty("customCssId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? CustomCssId { get; set; }

        [JsonProperty("subscriptionEndDateUtc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SubscriptionEndDateUtc { get; set; }

        [JsonProperty("isInTrialPeriod", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsInTrialPeriod { get; set; }

        [JsonProperty("subscriptionPaymentType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionPaymentType SubscriptionPaymentType { get; set; }

        [JsonProperty("edition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EditionInfoDto Edition { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("paymentPeriodType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentPeriodType PaymentPeriodType { get; set; }

        [JsonProperty("subscriptionDateString", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SubscriptionDateString { get; set; }

        [JsonProperty("creationTimeString", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CreationTimeString { get; set; }

        [JsonProperty("tenantType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantType TenantType { get; set; }

        [JsonProperty("stripeUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StripeUserId { get; set; }

        [JsonProperty("logisticProviderPageAccess", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool LogisticProviderPageAccess { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationInfoDto
    {
        [JsonProperty("version", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }

        [JsonProperty("clientVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientVersion { get; set; }

        [JsonProperty("releaseDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset ReleaseDate { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("currencySign", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CurrencySign { get; set; }

        [JsonProperty("allowTenantsToChangeEmailSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowTenantsToChangeEmailSettings { get; set; }

        [JsonProperty("userDelegationIsEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UserDelegationIsEnabled { get; set; }

        [JsonProperty("features", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, bool> Features { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThemeLayoutSettingsDto
    {
        [JsonProperty("layoutType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LayoutType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThemeHeaderSettingsDto
    {
        [JsonProperty("desktopFixedHeader", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool DesktopFixedHeader { get; set; }

        [JsonProperty("mobileFixedHeader", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool MobileFixedHeader { get; set; }

        [JsonProperty("headerSkin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HeaderSkin { get; set; }

        [JsonProperty("minimizeDesktopHeaderType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MinimizeDesktopHeaderType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThemeSubHeaderSettingsDto
    {
        [JsonProperty("fixedSubHeader", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool FixedSubHeader { get; set; }

        [JsonProperty("subheaderStyle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SubheaderStyle { get; set; }

        /// <summary>
        /// A value between 1-6
        /// </summary>
        [JsonProperty("subheaderSize", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SubheaderSize { get; set; }

        [JsonProperty("titleStlye", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TitleStlye { get; set; }

        [JsonProperty("containerStyle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ContainerStyle { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThemeMenuSettingsDto
    {
        [JsonProperty("position", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Position { get; set; }

        [JsonProperty("asideSkin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AsideSkin { get; set; }

        [JsonProperty("fixedAside", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool FixedAside { get; set; }

        [JsonProperty("allowAsideMinimizing", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowAsideMinimizing { get; set; }

        [JsonProperty("defaultMinimizedAside", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool DefaultMinimizedAside { get; set; }

        [JsonProperty("submenuToggle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SubmenuToggle { get; set; }

        [JsonProperty("searchActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SearchActive { get; set; }

        [JsonProperty("enableSecondary", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool EnableSecondary { get; set; }

        [JsonProperty("hoverableAside", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool HoverableAside { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThemeFooterSettingsDto
    {
        [JsonProperty("fixedFooter", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool FixedFooter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThemeSettingsDto
    {
        [JsonProperty("theme", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Theme { get; set; }

        [JsonProperty("layout", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ThemeLayoutSettingsDto Layout { get; set; }

        [JsonProperty("header", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ThemeHeaderSettingsDto Header { get; set; }

        [JsonProperty("subHeader", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ThemeSubHeaderSettingsDto SubHeader { get; set; }

        [JsonProperty("menu", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ThemeMenuSettingsDto Menu { get; set; }

        [JsonProperty("footer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ThemeFooterSettingsDto Footer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UiCustomizationSettingsDto
    {
        [JsonProperty("baseSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ThemeSettingsDto BaseSettings { get; set; }

        [JsonProperty("isLeftMenuUsed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsLeftMenuUsed { get; set; }

        [JsonProperty("isTopMenuUsed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTopMenuUsed { get; set; }

        [JsonProperty("isTabMenuUsed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTabMenuUsed { get; set; }

        [JsonProperty("allowMenuScroll", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowMenuScroll { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserWizardDto
    {
        [JsonProperty("hasDemoSalesChannel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool HasDemoSalesChannel { get; set; }

        [JsonProperty("hasSalesChannel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool HasSalesChannel { get; set; }

        [JsonProperty("salesChannelCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelCount { get; set; }

        [JsonProperty("hasLogisticProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool HasLogisticProvider { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LookupDto
    {
        /// <summary>
        /// Type of the Lookup
        /// </summary>
        [JsonProperty("lookupType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LookupType { get; set; }

        /// <summary>
        /// Name/Key of lookup
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Lookup Value
        /// </summary>
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCurrentLoginInformationsOutput
    {
        [JsonProperty("user", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserLoginInfoDto User { get; set; }

        [JsonProperty("impersonatorUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserLoginInfoDto ImpersonatorUser { get; set; }

        [JsonProperty("tenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantLoginInfoDto Tenant { get; set; }

        [JsonProperty("impersonatorTenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantLoginInfoDto ImpersonatorTenant { get; set; }

        [JsonProperty("application", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ApplicationInfoDto Application { get; set; }

        [JsonProperty("theme", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UiCustomizationSettingsDto Theme { get; set; }

        [JsonProperty("userWizard", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserWizardDto UserWizard { get; set; }

        [JsonProperty("lookups", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LookupDto> Lookups { get; set; }

        [JsonProperty("connectedWarehouse", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> ConnectedWarehouse { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateUserSignInTokenOutput
    {
        [JsonProperty("signInToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SignInToken { get; set; }

        [JsonProperty("encodedUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EncodedUserId { get; set; }

        [JsonProperty("encodedTenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EncodedTenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentMappingRuleResponse
    {
        /// <summary>
        /// Value for the Rule configuration
        /// </summary>
        [JsonProperty("configurationValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConfigurationValue { get; set; }

        [JsonProperty("configurationRuleType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ConfigurationRuleType ConfigurationRuleType { get; set; }

        [JsonProperty("configurationRuleTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConfigurationRuleTypeName { get; set; }

        [JsonProperty("shipmentMappingRuleSearchType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ShipmentMappingRuleSearchType ShipmentMappingRuleSearchType { get; set; }

        [JsonProperty("shipmentMappingRuleSearchTypeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShipmentMappingRuleSearchTypeName { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentMappingResponse
    {
        /// <summary>
        /// (Optional) Name of the property in Warehouse which is used to fetch tracking number
        /// </summary>
        [JsonProperty("warehouseTrackingNumberPropertyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseTrackingNumberPropertyName { get; set; }

        /// <summary>
        /// Name of the Delivery Method
        /// </summary>
        [JsonProperty("deliveryMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DeliveryMethod { get; set; }

        [JsonProperty("customerTenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CustomerTenantId { get; set; }

        [JsonProperty("customerStoreName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerStoreName { get; set; }

        [JsonProperty("logisticProviderShipmentMappingRules", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ShipmentMappingRuleResponse> LogisticProviderShipmentMappingRules { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfShipmentMappingResponse
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ShipmentMappingResponse> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeographicalOrder
    {
        [JsonProperty("orderCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrderCount { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("co2Emitted", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Co2Emitted { get; set; }

        [JsonProperty("distanceFromWarehouseInKm", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? DistanceFromWarehouseInKm { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticProviderAddress
    {
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderGeographicalAnalytics
    {
        [JsonProperty("geographicalOrders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<GeographicalOrder> GeographicalOrders { get; set; }

        [JsonProperty("installedLogisticProviders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LogisticProviderAddress> InstalledLogisticProviders { get; set; }

        /// <summary>
        /// Recommendation for new warehouse location
        /// </summary>
        [JsonProperty("recommendedWarehouseLocation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RecommendedWarehouseLocation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessedOrdersPerDay
    {
        [JsonProperty("date", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("processedOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ProcessedOrders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessedOrdersPerDayResult
    {
        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        [JsonProperty("ordersPerDays", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProcessedOrdersPerDay> OrdersPerDays { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetaField
    {
        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("key", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Value { get; set; }

        [JsonProperty("value_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value_type { get; set; }

        [JsonProperty("namespace", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("owner_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Owner_id { get; set; }

        [JsonProperty("owner_resource", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Owner_resource { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Price
    {
        [JsonProperty("currency_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency_code { get; set; }

        [JsonProperty("amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PresentmentPrice
    {
        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Price Price { get; set; }

        [JsonProperty("compare_at_price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Price Compare_at_price { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductVariant
    {
        [JsonProperty("product_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Product_id { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("position", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Position { get; set; }

        [JsonProperty("grams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Grams { get; set; }

        [JsonProperty("inventory_policy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Inventory_policy { get; set; }

        [JsonProperty("fulfillment_service", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Fulfillment_service { get; set; }

        [JsonProperty("inventory_item_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Inventory_item_id { get; set; }

        [JsonProperty("inventory_management", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Inventory_management { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("compare_at_price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Compare_at_price { get; set; }

        [JsonProperty("option1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option1 { get; set; }

        [JsonProperty("option2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option2 { get; set; }

        [JsonProperty("option3", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Option3 { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("taxable", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Taxable { get; set; }

        [JsonProperty("tax_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tax_code { get; set; }

        [JsonProperty("requires_shipping", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Requires_shipping { get; set; }

        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [JsonProperty("inventory_quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Inventory_quantity { get; set; }

        [JsonProperty("image_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Image_id { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("weight_unit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Weight_unit { get; set; }

        [JsonProperty("metafields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<MetaField> Metafields { get; set; }

        [JsonProperty("presentment_prices", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PresentmentPrice> Presentment_prices { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOption
    {
        [JsonProperty("product_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Product_id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("position", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Position { get; set; }

        [JsonProperty("values", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Values { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductImage
    {
        [JsonProperty("product_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Product_id { get; set; }

        [JsonProperty("position", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Position { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("src", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Src { get; set; }

        [JsonProperty("filename", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Filename { get; set; }

        [JsonProperty("attachment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Attachment { get; set; }

        [JsonProperty("variant_ids", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<long> Variant_ids { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Height { get; set; }

        [JsonProperty("width", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Width { get; set; }

        [JsonProperty("alt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Alt { get; set; }

        [JsonProperty("metafields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<MetaField> Metafields { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("body_html", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Body_html { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("published_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Published_at { get; set; }

        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Vendor { get; set; }

        [JsonProperty("product_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Product_type { get; set; }

        [JsonProperty("handle", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Handle { get; set; }

        [JsonProperty("template_suffix", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Template_suffix { get; set; }

        [JsonProperty("published_scope", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Published_scope { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tags { get; set; }

        [JsonProperty("variants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProductVariant> Variants { get; set; }

        [JsonProperty("options", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProductOption> Options { get; set; }

        [JsonProperty("images", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ProductImage> Images { get; set; }

        [JsonProperty("metafields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<MetaField> Metafields { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        [JsonProperty("address1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address1 { get; set; }

        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Company { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("country_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_code { get; set; }

        [JsonProperty("country_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_name { get; set; }

        [JsonProperty("default", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Default { get; set; }

        [JsonProperty("first_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [JsonProperty("last_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [JsonProperty("province", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Province { get; set; }

        [JsonProperty("province_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Province_code { get; set; }

        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Zip { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientDetails
    {
        [JsonProperty("accept_language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Accept_language { get; set; }

        [JsonProperty("browser_height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Browser_height { get; set; }

        [JsonProperty("browser_ip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Browser_ip { get; set; }

        [JsonProperty("browser_width", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Browser_width { get; set; }

        [JsonProperty("session_hash", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Session_hash { get; set; }

        [JsonProperty("user_agent", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string User_agent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {
        [JsonProperty("accepts_marketing", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Accepts_marketing { get; set; }

        [JsonProperty("addresses", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Address> Addresses { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("default_address", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address Default_address { get; set; }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("first_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [JsonProperty("multipass_identifier", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Multipass_identifier { get; set; }

        [JsonProperty("last_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [JsonProperty("last_order_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Last_order_id { get; set; }

        [JsonProperty("last_order_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Last_order_name { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("orders_count", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Orders_count { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tags { get; set; }

        [JsonProperty("tax_exempt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Tax_exempt { get; set; }

        [JsonProperty("total_spent", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_spent { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("verified_email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Verified_email { get; set; }

        [JsonProperty("metafields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<MetaField> Metafields { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscountCode
    {
        [JsonProperty("amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Amount { get; set; }

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscountApplication
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("value_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value_type { get; set; }

        [JsonProperty("allocation_method", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Allocation_method { get; set; }

        [JsonProperty("target_selection", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Target_selection { get; set; }

        [JsonProperty("target_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Target_type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceSet
    {
        [JsonProperty("shop_money", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Price Shop_money { get; set; }

        [JsonProperty("presentment_money", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Price Presentment_money { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxLine
    {
        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("rate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Rate { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("price_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Price_set { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscountAllocation
    {
        [JsonProperty("amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Amount { get; set; }

        [JsonProperty("discount_application_index", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Discount_application_index { get; set; }

        [JsonProperty("amount_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Amount_set { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItemProperty
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Name { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItemDuty
    {
        [JsonProperty("harmonized_system_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Harmonized_system_code { get; set; }

        [JsonProperty("country_code_of_origin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_code_of_origin { get; set; }

        [JsonProperty("shop_money", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Price Shop_money { get; set; }

        [JsonProperty("presentment_money", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Price Presentment_money { get; set; }

        [JsonProperty("tax_lines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<TaxLine> Tax_lines { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItem
    {
        [JsonProperty("fulfillable_quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Fulfillable_quantity { get; set; }

        [JsonProperty("fulfillment_service", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Fulfillment_service { get; set; }

        [JsonProperty("fulfillment_status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Fulfillment_status { get; set; }

        [JsonProperty("grams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Grams { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("product_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Product_id { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("requires_shipping", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Requires_shipping { get; set; }

        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("variant_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Variant_id { get; set; }

        [JsonProperty("variant_title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Variant_title { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("vendor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Vendor { get; set; }

        [JsonProperty("gift_card", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Gift_card { get; set; }

        [JsonProperty("taxable", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Taxable { get; set; }

        [JsonProperty("tax_lines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<TaxLine> Tax_lines { get; set; }

        [JsonProperty("tip_payment_gateway", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tip_payment_gateway { get; set; }

        [JsonProperty("tip_payment_method", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tip_payment_method { get; set; }

        [JsonProperty("total_discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_discount { get; set; }

        [JsonProperty("total_discount_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Total_discount_set { get; set; }

        [JsonProperty("discount_allocations", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DiscountAllocation> Discount_allocations { get; set; }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LineItemProperty> Properties { get; set; }

        [JsonProperty("variant_inventory_management", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Variant_inventory_management { get; set; }

        [JsonProperty("product_exists", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Product_exists { get; set; }

        [JsonProperty("price_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Price_set { get; set; }

        [JsonProperty("duties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LineItemDuty> Duties { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fulfillment
    {
        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("line_items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LineItem> Line_items { get; set; }

        [JsonProperty("order_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Order_id { get; set; }

        [JsonProperty("receipt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Receipt { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("location_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Location_id { get; set; }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("notify_customer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Notify_customer { get; set; }

        [JsonProperty("destination", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address Destination { get; set; }

        [JsonProperty("tracking_company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_company { get; set; }

        [JsonProperty("tracking_number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_number { get; set; }

        [JsonProperty("tracking_numbers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Tracking_numbers { get; set; }

        [JsonProperty("tracking_url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tracking_url { get; set; }

        [JsonProperty("tracking_urls", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Tracking_urls { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("variant_inventory_management", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Variant_inventory_management { get; set; }

        [JsonProperty("service", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Service { get; set; }

        [JsonProperty("shipment_status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shipment_status { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NoteAttribute
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Shipping
    {
        [JsonProperty("full_refund", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Full_refund { get; set; }

        [JsonProperty("amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundOrderAdjustment
    {
        [JsonProperty("order_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Order_id { get; set; }

        [JsonProperty("refund_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Refund_id { get; set; }

        [JsonProperty("amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [JsonProperty("tax_amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Tax_amount { get; set; }

        [JsonProperty("kind", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Kind { get; set; }

        [JsonProperty("reason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Reason { get; set; }

        [JsonProperty("amount_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Amount_set { get; set; }

        [JsonProperty("tax_amount_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Tax_amount_set { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundLineItem
    {
        [JsonProperty("line_item", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LineItem Line_item { get; set; }

        [JsonProperty("line_item_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Line_item_id { get; set; }

        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [JsonProperty("total_tax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_tax { get; set; }

        [JsonProperty("subtotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Subtotal { get; set; }

        [JsonProperty("subtotal_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Subtotal_set { get; set; }

        [JsonProperty("total_tax_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Total_tax_set { get; set; }

        [JsonProperty("restock_type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Restock_type { get; set; }

        [JsonProperty("location_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Location_id { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentDetails
    {
        [JsonProperty("avs_result_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Avs_result_code { get; set; }

        [JsonProperty("credit_card_bin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Credit_card_bin { get; set; }

        [JsonProperty("cvv_result_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Cvv_result_code { get; set; }

        [JsonProperty("credit_card_number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Credit_card_number { get; set; }

        [JsonProperty("credit_card_company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Credit_card_company { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transaction
    {
        [JsonProperty("amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [JsonProperty("authorization", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Authorization { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("device_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Device_id { get; set; }

        [JsonProperty("gateway", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [JsonProperty("source_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Source_name { get; set; }

        [JsonProperty("payment_details", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentDetails Payment_details { get; set; }

        [JsonProperty("kind", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Kind { get; set; }

        [JsonProperty("order_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Order_id { get; set; }

        [JsonProperty("receipt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Receipt { get; set; }

        [JsonProperty("error_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("test", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Test { get; set; }

        [JsonProperty("user_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? User_id { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("location_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Location_id { get; set; }

        [JsonProperty("parent_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Parent_id { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundDuty
    {
        [JsonProperty("duty_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Duty_id { get; set; }

        [JsonProperty("amount_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Amount_set { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Refund
    {
        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("notify", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Notify { get; set; }

        [JsonProperty("shipping", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Shipping Shipping { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("order_adjustments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<RefundOrderAdjustment> Order_adjustments { get; set; }

        [JsonProperty("processed_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Processed_at { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("refund_line_items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<RefundLineItem> Refund_line_items { get; set; }

        [JsonProperty("transactions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Transaction> Transactions { get; set; }

        [JsonProperty("user_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? User_id { get; set; }

        [JsonProperty("duties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<RefundDuty> Duties { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingLine
    {
        [JsonProperty("carrier_identifier", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Carrier_identifier { get; set; }

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("discounted_price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discounted_price { get; set; }

        [JsonProperty("discount_allocations", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DiscountAllocation> Discount_allocations { get; set; }

        [JsonProperty("source", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }

        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("tax_lines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<TaxLine> Tax_lines { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Order
    {
        [JsonProperty("app_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? App_id { get; set; }

        [JsonProperty("billing_address", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address Billing_address { get; set; }

        [JsonProperty("browser_ip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Browser_ip { get; set; }

        [JsonProperty("buyer_accepts_marketing", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Buyer_accepts_marketing { get; set; }

        [JsonProperty("cancel_reason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Cancel_reason { get; set; }

        [JsonProperty("cancelled_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Cancelled_at { get; set; }

        [JsonProperty("cart_token", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Cart_token { get; set; }

        [JsonProperty("client_details", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ClientDetails Client_details { get; set; }

        [JsonProperty("closed_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Closed_at { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("customer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Customer Customer { get; set; }

        [JsonProperty("customer_locale", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Customer_locale { get; set; }

        [JsonProperty("device_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Device_id { get; set; }

        [JsonProperty("discount_codes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DiscountCode> Discount_codes { get; set; }

        [JsonProperty("discount_applications", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<DiscountApplication> Discount_applications { get; set; }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("financial_status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Financial_status { get; set; }

        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Fulfillment> Fulfillments { get; set; }

        [JsonProperty("fulfillment_status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Fulfillment_status { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tags { get; set; }

        [JsonProperty("landing_site", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Landing_site { get; set; }

        [JsonProperty("line_items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LineItem> Line_items { get; set; }

        [JsonProperty("location_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Location_id { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("note_attributes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NoteAttribute> Note_attributes { get; set; }

        [JsonProperty("number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Number { get; set; }

        [JsonProperty("order_number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Order_number { get; set; }

        [JsonProperty("order_status_url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Order_status_url { get; set; }

        [JsonProperty("payment_gateway_names", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Payment_gateway_names { get; set; }

        [JsonProperty("processed_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Processed_at { get; set; }

        [JsonProperty("processing_method", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Processing_method { get; set; }

        [JsonProperty("referring_site", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Referring_site { get; set; }

        [JsonProperty("refunds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Refund> Refunds { get; set; }

        [JsonProperty("shipping_address", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address Shipping_address { get; set; }

        [JsonProperty("shipping_lines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ShippingLine> Shipping_lines { get; set; }

        [JsonProperty("source_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Source_name { get; set; }

        [JsonProperty("subtotal_price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Subtotal_price { get; set; }

        [JsonProperty("tax_lines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<TaxLine> Tax_lines { get; set; }

        [JsonProperty("taxes_included", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Taxes_included { get; set; }

        [JsonProperty("test", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Test { get; set; }

        [JsonProperty("token", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }

        [JsonProperty("total_discounts", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_discounts { get; set; }

        [JsonProperty("total_line_items_price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_line_items_price { get; set; }

        [JsonProperty("total_tip_received", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_tip_received { get; set; }

        [JsonProperty("total_price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_price { get; set; }

        [JsonProperty("total_tax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Total_tax { get; set; }

        [JsonProperty("total_weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Total_weight { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("user_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? User_id { get; set; }

        [JsonProperty("transactions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Transaction> Transactions { get; set; }

        [JsonProperty("metafields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<MetaField> Metafields { get; set; }

        [JsonProperty("current_total_duties_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Current_total_duties_set { get; set; }

        [JsonProperty("original_total_duties_set", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PriceSet Original_total_duties_set { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {
        [JsonProperty("active", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("address1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address1 { get; set; }

        [JsonProperty("address2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Zip { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("province", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Province { get; set; }

        [JsonProperty("province_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Province_code { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("country_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_name { get; set; }

        [JsonProperty("country_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country_code { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [JsonProperty("created_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created_at { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("legacy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Legacy { get; set; }

        [JsonProperty("localized_country_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Localized_country_name { get; set; }

        [JsonProperty("localized_province_name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Localized_province_name { get; set; }

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("admin_graphql_api_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Admin_graphql_api_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryLevel
    {
        [JsonProperty("inventory_item_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Inventory_item_id { get; set; }

        [JsonProperty("location_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Location_id { get; set; }

        [JsonProperty("available", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Available { get; set; }

        [JsonProperty("updated_at", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Updated_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RedactedCustomer
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerRedactedWebhook
    {
        [JsonProperty("customer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RedactedCustomer Customer { get; set; }

        [JsonProperty("orders_to_redact", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<long> Orders_to_redact { get; set; }

        [JsonProperty("shop_id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Shop_id { get; set; }

        [JsonProperty("shop_domain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shop_domain { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShopRedactedWebhook
    {
        [JsonProperty("shop_id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Shop_id { get; set; }

        [JsonProperty("shop_domain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Shop_domain { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallSquarespaceInput
    {
        /// <summary>
        /// URI of the Squarespace store
        /// </summary>
        [JsonProperty("storeUri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string StoreUri { get; set; }

        /// <summary>
        /// API Key
        /// </summary>
        [JsonProperty("apiKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SquarespaceHookInput
    {
        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallStarwebInput
    {
        [JsonProperty("storeName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string StoreName { get; set; }

        [JsonProperty("clientId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ClientId { get; set; }

        [JsonProperty("clientSecret", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ClientSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductWebhookResult
    {
        [JsonProperty("productId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ProductId { get; set; }

        [JsonProperty("eventId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventId { get; set; }

        [JsonProperty("shopIdCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShopIdCode { get; set; }

        [JsonProperty("eventTimeStamp", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset EventTimeStamp { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderWebhookResult
    {
        [JsonProperty("orderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrderId { get; set; }

        [JsonProperty("shippingMethodId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ShippingMethodId { get; set; }

        [JsonProperty("paymentMethodId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int PaymentMethodId { get; set; }

        [JsonProperty("orderStatusId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrderStatusId { get; set; }

        [JsonProperty("orderStatusIdCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object OrderStatusIdCode { get; set; }

        [JsonProperty("totalAmount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TotalAmount { get; set; }

        [JsonProperty("currencyCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        [JsonProperty("eventId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventId { get; set; }

        [JsonProperty("shopIdCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShopIdCode { get; set; }

        [JsonProperty("eventTimeStamp", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset EventTimeStamp { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StripeConfigurationDto
    {
        [JsonProperty("publishableKey", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PublishableKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StripeCreatePaymentSessionInput
    {
        [JsonProperty("paymentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long PaymentId { get; set; }

        [JsonProperty("successUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SuccessUrl { get; set; }

        [JsonProperty("cancelUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StripePaymentResultOutput
    {
        [JsonProperty("paymentDone", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool PaymentDone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupplierDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("mobilePhone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MobilePhone { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The ZIP or postal code.
        /// </summary>
        [JsonProperty("postalCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfSupplierDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SupplierDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateSupplierInput
    {
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(150)]
        public string Name { get; set; }

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(150)]
        public string Code { get; set; }

        [JsonProperty("email", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string Email { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Address { get; set; }

        [JsonProperty("mobilePhone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string MobilePhone { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string City { get; set; }

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string State { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Country { get; set; }

        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The ZIP or postal code.
        /// </summary>
        [JsonProperty("postalCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string PostalCode { get; set; }

        [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValueDtoOfInt64
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfNameValueDtoOfInt64
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameValueDtoOfInt64> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SupportQuestionStatus
    {

        Open = 0,

        Answered = 1,

        AwaitingReply = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportAnswerDto
    {
        [JsonProperty("answer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Answer { get; set; }

        [JsonProperty("isAnswer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsAnswer { get; set; }

        [JsonProperty("createdByUserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedByUserName { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportQuestionDto
    {
        [JsonProperty("tenantName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantName { get; set; }

        [JsonProperty("createdByUserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedByUserName { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("totalReplies", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalReplies { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("question", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Question { get; set; }

        [JsonProperty("body", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Body { get; set; }

        [JsonProperty("supportQuestionStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SupportQuestionStatus SupportQuestionStatus { get; set; }

        [JsonProperty("supportQuestionStatusName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SupportQuestionStatusName { get; set; }

        [JsonProperty("isAnswered", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsAnswered { get; set; }

        [JsonProperty("isSharpTenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSharpTenant { get; set; }

        /// <summary>
        /// Is Question asked by Priority Support Customer
        /// </summary>
        [JsonProperty("isPriorityQuestion", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPriorityQuestion { get; set; }

        [JsonProperty("supportAnswers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SupportAnswerDto> SupportAnswers { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfSupportQuestionDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SupportQuestionDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSupportQuestionInput
    {
        /// <summary>
        /// Eshop question
        /// </summary>
        [JsonProperty("question", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string Question { get; set; }

        /// <summary>
        /// body of the question
        /// </summary>
        [JsonProperty("body", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Created date of question
        /// </summary>
        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        /// <summary>
        /// Tenant Id of PrimePenguin e-Shop
        /// </summary>
        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportAnswer
    {
        [JsonProperty("answer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(2000)]
        public string Answer { get; set; }

        [JsonProperty("isAnswer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsAnswer { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("supportQuestionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SupportQuestionId { get; set; }

        [JsonProperty("supportQuestion", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SupportQuestion SupportQuestion { get; set; }

        [JsonProperty("creatorUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User CreatorUser { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportQuestion
    {
        [JsonProperty("question", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(250)]
        public string Question { get; set; }

        [JsonProperty("body", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(4000)]
        public string Body { get; set; }

        [JsonProperty("supportQuestionStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SupportQuestionStatus SupportQuestionStatus { get; set; }

        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("tenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Tenant Tenant { get; set; }

        [JsonProperty("isPriorityQuestion", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPriorityQuestion { get; set; }

        [JsonProperty("creatorUser", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User CreatorUser { get; set; }

        [JsonProperty("supportAnswers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SupportAnswer> SupportAnswers { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("creatorUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatorUserId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAnswerDto
    {
        /// <summary>
        /// Support Question Id
        /// </summary>
        [JsonProperty("questionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int QuestionId { get; set; }

        [JsonProperty("answer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(2000)]
        public string Answer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantListDto
    {
        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("editionDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EditionDisplayName { get; set; }

        [JsonProperty("connectionString", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConnectionString { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("subscriptionEndDateUtc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SubscriptionEndDateUtc { get; set; }

        [JsonProperty("editionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? EditionId { get; set; }

        [JsonProperty("isInTrialPeriod", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsInTrialPeriod { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        [JsonProperty("isSharpTenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSharpTenant { get; set; }

        /// <summary>
        /// Countries separated by ,
        /// </summary>
        [JsonProperty("countries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Countries { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("partnershipFee", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double PartnershipFee { get; set; }

        [JsonProperty("lastLoginTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastLoginTime { get; set; }

        [JsonProperty("tenantType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantType TenantType { get; set; }

        [JsonProperty("leadType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LeadType { get; set; }

        [JsonProperty("isActivePayment", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActivePayment { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfTenantListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<TenantListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimePenguinTenantInput
    {
        [JsonProperty("tenantType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantType TenantType { get; set; }

        [JsonProperty("leadType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LeadType LeadType { get; set; }

        [JsonProperty("countries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Countries { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string Address { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string StoreName { get; set; }

        [JsonProperty("eShopAddressUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string EShopAddressUrl { get; set; }

        [JsonProperty("eShopSize", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string EShopSize { get; set; }

        [JsonProperty("logisticProviderPageAccess", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool LogisticProviderPageAccess { get; set; }

        [JsonProperty("orderMappingEditingAccess", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool OrderMappingEditingAccess { get; set; }

        [JsonProperty("demoOrderGenerationCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 500)]
        public int? DemoOrderGenerationCount { get; set; }

        [JsonProperty("isSharpTenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSharpTenant { get; set; }

        [JsonProperty("specialEditionMonthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? SpecialEditionMonthlyPrice { get; set; }

        [JsonProperty("vat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 100)]
        public int? Vat { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string Name { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Description { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(10)]
        public string Currency { get; set; }

        [JsonProperty("partnershipFee", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double PartnershipFee { get; set; }

        [JsonProperty("logisticProviderIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<int> LogisticProviderIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTenantInput
    {
        [JsonProperty("tenancyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        [RegularExpression(@"^[a-zA-Z][a-zA-Z0-9_-]{1,}$")]
        public string TenancyName { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string Name { get; set; }

        [JsonProperty("adminEmailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string AdminEmailAddress { get; set; }

        [JsonProperty("adminPassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(128)]
        public string AdminPassword { get; set; }

        [JsonProperty("connectionString", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1024)]
        public string ConnectionString { get; set; }

        [JsonProperty("shouldChangePasswordOnNextLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ShouldChangePasswordOnNextLogin { get; set; }

        [JsonProperty("sendActivationEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SendActivationEmail { get; set; }

        [JsonProperty("editionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? EditionId { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("subscriptionEndDateUtc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SubscriptionEndDateUtc { get; set; }

        [JsonProperty("isInTrialPeriod", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsInTrialPeriod { get; set; }

        [JsonProperty("tenantInput", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public PrimePenguinTenantInput TenantInput { get; set; } = new PrimePenguinTenantInput();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantEditDto
    {
        [JsonProperty("tenancyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string TenancyName { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string Name { get; set; }

        [JsonProperty("connectionString", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConnectionString { get; set; }

        [JsonProperty("editionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? EditionId { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("subscriptionEndDateUtc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SubscriptionEndDateUtc { get; set; }

        [JsonProperty("isInTrialPeriod", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsInTrialPeriod { get; set; }

        [JsonProperty("tenantType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantType TenantType { get; set; }

        [JsonProperty("leadType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LeadType LeadType { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string StoreName { get; set; }

        [JsonProperty("eShopAddressUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string EShopAddressUrl { get; set; }

        [JsonProperty("eShopAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string EShopAddress { get; set; }

        [JsonProperty("eShopSize", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string EShopSize { get; set; }

        [JsonProperty("isSharpTenant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSharpTenant { get; set; }

        /// <summary>
        /// Countries separated by ,
        /// </summary>
        [JsonProperty("countries", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(1000)]
        public string Countries { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(10)]
        public string Currency { get; set; }

        [JsonProperty("partnershipFee", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double PartnershipFee { get; set; }

        [JsonProperty("logisticProviderIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<int> LogisticProviderIds { get; set; }

        /// <summary>
        /// Access to Logistic Provider integration page on UI
        /// </summary>
        [JsonProperty("logisticProviderPageAccess", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool LogisticProviderPageAccess { get; set; }

        /// <summary>
        /// Access to Edit Order Mappings
        /// </summary>
        [JsonProperty("orderMappingEditingAccess", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool OrderMappingEditingAccess { get; set; }

        /// <summary>
        /// Special Edition price. This will be charged instead of Monthly Price in Edition
        /// </summary>
        [JsonProperty("specialEditionMonthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? SpecialEditionMonthlyPrice { get; set; }

        /// <summary>
        /// VAT to include with Edition price
        /// </summary>
        [JsonProperty("vat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 100)]
        public int? Vat { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTenantFeaturesEditOutput
    {
        [JsonProperty("featureValues", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameValueDto> FeatureValues { get; set; }

        [JsonProperty("features", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FlatFeatureDto> Features { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateTenantFeaturesInput
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int Id { get; set; }

        [JsonProperty("featureValues", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<NameValueDto> FeatureValues { get; set; } = new List<NameValueDto>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionStartType
    {

        Free = 1,

        Trial = 2,

        Paid = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterTenantInput
    {
        [JsonProperty("tenancyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string TenancyName { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string Name { get; set; }

        [JsonProperty("adminEmailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string AdminEmailAddress { get; set; }

        [JsonProperty("adminPassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(32)]
        public string AdminPassword { get; set; }

        [JsonProperty("captchaResponse", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CaptchaResponse { get; set; }

        [JsonProperty("subscriptionStartType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SubscriptionStartType SubscriptionStartType { get; set; }

        [JsonProperty("editionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? EditionId { get; set; }

        [JsonProperty("storeName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string StoreName { get; set; }

        [JsonProperty("eShopAddressUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string EShopAddressUrl { get; set; }

        [JsonProperty("eShopAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(500)]
        public string EShopAddress { get; set; }

        [JsonProperty("eShopSize", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string EShopSize { get; set; }

        /// <summary>
        /// Special Edition price. This will be charged instead of Monthly Price in Edition
        /// </summary>
        [JsonProperty("specialEditionMonthlyPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? SpecialEditionMonthlyPrice { get; set; }

        /// <summary>
        /// VAT to include with Edition price
        /// </summary>
        [JsonProperty("vat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 100)]
        public int? Vat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterTenantOutput
    {
        [JsonProperty("tenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TenantId { get; set; }

        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("emailAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        [JsonProperty("isTenantActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTenantActive { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("isEmailConfirmationRequired", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEmailConfirmationRequired { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatFeatureSelectDto
    {
        [JsonProperty("parentName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ParentName { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("defaultValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [JsonProperty("inputType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public IInputType InputType { get; set; }

        [JsonProperty("textHtmlColor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TextHtmlColor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditionWithFeaturesDto
    {
        [JsonProperty("edition", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public EditionSelectDto Edition { get; set; }

        [JsonProperty("featureValues", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameValueDto> FeatureValues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditionsSelectOutput
    {
        [JsonProperty("allFeatures", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FlatFeatureSelectDto> AllFeatures { get; set; }

        [JsonProperty("editionsWithFeatures", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<EditionWithFeaturesDto> EditionsWithFeatures { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantUserManagementSettingsEditDto
    {
        [JsonProperty("allowSelfRegistration", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowSelfRegistration { get; set; }

        [JsonProperty("isNewRegisteredUserActiveByDefault", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsNewRegisteredUserActiveByDefault { get; set; }

        [JsonProperty("isEmailConfirmationRequiredForLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEmailConfirmationRequiredForLogin { get; set; }

        [JsonProperty("useCaptchaOnRegistration", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UseCaptchaOnRegistration { get; set; }

        [JsonProperty("useCaptchaOnLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UseCaptchaOnLogin { get; set; }

        [JsonProperty("isCookieConsentEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsCookieConsentEnabled { get; set; }

        [JsonProperty("isQuickThemeSelectEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsQuickThemeSelectEnabled { get; set; }

        [JsonProperty("allowUsingGravatarProfilePicture", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool AllowUsingGravatarProfilePicture { get; set; }

        [JsonProperty("sessionTimeOutSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SessionTimeOutSettingsEditDto SessionTimeOutSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantEmailSettingsEditDto
    {
        [JsonProperty("useHostDefaultEmailSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UseHostDefaultEmailSettings { get; set; }

        [JsonProperty("defaultFromAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultFromAddress { get; set; }

        [JsonProperty("defaultFromDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultFromDisplayName { get; set; }

        [JsonProperty("smtpHost", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpHost { get; set; }

        [JsonProperty("smtpPort", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SmtpPort { get; set; }

        [JsonProperty("smtpUserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpUserName { get; set; }

        [JsonProperty("smtpPassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpPassword { get; set; }

        [JsonProperty("smtpDomain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SmtpDomain { get; set; }

        [JsonProperty("smtpEnableSsl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SmtpEnableSsl { get; set; }

        [JsonProperty("smtpUseDefaultCredentials", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SmtpUseDefaultCredentials { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LdapSettingsEditDto
    {
        [JsonProperty("isModuleEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsModuleEnabled { get; set; }

        [JsonProperty("isEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        [JsonProperty("domain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Domain { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("password", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantBillingSettingsEditDto
    {
        [JsonProperty("legalName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LegalName { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("taxVatNo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TaxVatNo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantOtherSettingsEditDto
    {
        [JsonProperty("isQuickThemeSelectEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsQuickThemeSelectEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimePenguinShopSettingsEditDto
    {
        /// <summary>
        /// Notify admin when connection between eshop and prime penguin breaks
        /// </summary>
        [JsonProperty("enableConnectionBreakEmailToAdmin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool EnableConnectionBreakEmailToAdmin { get; set; }

        /// <summary>
        /// Notify eshop admin when monthly inventory report is generated
        /// </summary>
        [JsonProperty("monthlyInventoryReportEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool MonthlyInventoryReportEmail { get; set; }

        /// <summary>
        /// Notify eshop admin when monthly inventory report is generated
        /// </summary>
        [JsonProperty("weeklyInventoryReportEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool WeeklyInventoryReportEmail { get; set; }

        /// <summary>
        /// Notify eshop admin when there is a deviation in Purchase Order
        /// </summary>
        [JsonProperty("purchaseOrderDeviationEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool PurchaseOrderDeviationEmail { get; set; }

        /// <summary>
        /// Use Warehouse Inventory instead of shop inventory when generating inventory reports
        /// </summary>
        [JsonProperty("warehouseInventoryInReports", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool WarehouseInventoryInReports { get; set; }

        /// <summary>
        /// Notify eshop admin when unpaid orders are not sent to warehouse
        /// </summary>
        [JsonProperty("unpaidInvalidOrderReportEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool UnpaidInvalidOrderReportEmail { get; set; }

        /// <summary>
        /// Notify eshop admin when orders are not delivered to customer in X days
        /// </summary>
        [JsonProperty("premiumTrackingUndeliveredOrderAlert", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 32767)]
        public int PremiumTrackingUndeliveredOrderAlert { get; set; }

        /// <summary>
        /// Hours after order is considered as delayed and order is still in progress at warehouse
        /// </summary>
        [JsonProperty("hoursAfterOrderDelay", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(0, 32767)]
        public int HoursAfterOrderDelay { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimePenguinLpSettingsEditDto
    {
        /// <summary>
        /// Send new order email to LP users everyday
        /// </summary>
        [JsonProperty("dailyOrderReportByEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool DailyOrderReportByEmail { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantSettingsEditDto
    {
        [JsonProperty("general", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public GeneralSettingsEditDto General { get; set; }

        [JsonProperty("userManagement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public TenantUserManagementSettingsEditDto UserManagement { get; set; } = new TenantUserManagementSettingsEditDto();

        [JsonProperty("email", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantEmailSettingsEditDto Email { get; set; }

        [JsonProperty("ldap", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public LdapSettingsEditDto Ldap { get; set; }

        [JsonProperty("security", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public SecuritySettingsEditDto Security { get; set; } = new SecuritySettingsEditDto();

        [JsonProperty("billing", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantBillingSettingsEditDto Billing { get; set; }

        [JsonProperty("otherSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TenantOtherSettingsEditDto OtherSettings { get; set; }

        [JsonProperty("externalLoginProviderSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ExternalLoginProviderSettingsEditDto ExternalLoginProviderSettings { get; set; }

        [JsonProperty("primePenguinShopSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PrimePenguinShopSettingsEditDto PrimePenguinShopSettings { get; set; }

        [JsonProperty("primePenguinLpSettings", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PrimePenguinLpSettingsEditDto PrimePenguinLpSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallTextTalkInput
    {
        /// <summary>
        /// URI of the TextTalk store
        /// </summary>
        [JsonProperty("shopUri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ShopUri { get; set; }

        /// <summary>
        /// Shop Id
        /// </summary>
        [JsonProperty("shopId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long ShopId { get; set; }

        /// <summary>
        /// User name
        /// </summary>
        [JsonProperty("userName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string UserName { get; set; }

        /// <summary>
        /// password
        /// </summary>
        [JsonProperty("password", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>
        /// indicate texttalk or abicart
        /// </summary>
        [JsonProperty("isTextTalk", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTextTalk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SettingScopes
    {

        Application = 1,

        Tenant = 2,

        User = 4,

        All = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfNameValueDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<NameValueDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticateModel
    {
        [JsonProperty("userNameOrEmailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string UserNameOrEmailAddress { get; set; }

        [JsonProperty("password", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(32)]
        public string Password { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("twoFactorVerificationCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TwoFactorVerificationCode { get; set; }

        [JsonProperty("rememberClient", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool RememberClient { get; set; }

        [JsonProperty("twoFactorRememberClientToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TwoFactorRememberClientToken { get; set; }

        [JsonProperty("singleSignIn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? SingleSignIn { get; set; }

        [JsonProperty("returnUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ReturnUrl { get; set; }

        [JsonProperty("captchaResponse", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CaptchaResponse { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticateResultModel
    {
        [JsonProperty("accessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [JsonProperty("encryptedAccessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EncryptedAccessToken { get; set; }

        [JsonProperty("expireInSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ExpireInSeconds { get; set; }

        [JsonProperty("shouldResetPassword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ShouldResetPassword { get; set; }

        [JsonProperty("passwordResetCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PasswordResetCode { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("requiresTwoFactorVerification", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool RequiresTwoFactorVerification { get; set; }

        [JsonProperty("twoFactorAuthProviders", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> TwoFactorAuthProviders { get; set; }

        [JsonProperty("twoFactorRememberClientToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TwoFactorRememberClientToken { get; set; }

        [JsonProperty("returnUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ReturnUrl { get; set; }

        [JsonProperty("refreshToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        [JsonProperty("refreshTokenExpireInSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int RefreshTokenExpireInSeconds { get; set; }

        [JsonProperty("acceptedTermsAndConditionDateTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? AcceptedTermsAndConditionDateTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokenResult
    {
        [JsonProperty("accessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [JsonProperty("encryptedAccessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EncryptedAccessToken { get; set; }

        [JsonProperty("expireInSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ExpireInSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendTwoFactorAuthCodeModel
    {
        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long UserId { get; set; }

        [JsonProperty("provider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string Provider { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpersonatedAuthenticateResultModel
    {
        [JsonProperty("accessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [JsonProperty("encryptedAccessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EncryptedAccessToken { get; set; }

        [JsonProperty("expireInSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ExpireInSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwitchedAccountAuthenticateResultModel
    {
        [JsonProperty("accessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [JsonProperty("encryptedAccessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EncryptedAccessToken { get; set; }

        [JsonProperty("expireInSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ExpireInSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalLoginProviderInfoModel
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("clientId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        [JsonProperty("additionalParams", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, string> AdditionalParams { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalAuthenticateModel
    {
        [JsonProperty("authProvider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(128)]
        public string AuthProvider { get; set; }

        [JsonProperty("providerKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string ProviderKey { get; set; }

        [JsonProperty("providerAccessCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ProviderAccessCode { get; set; }

        [JsonProperty("returnUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ReturnUrl { get; set; }

        [JsonProperty("singleSignIn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? SingleSignIn { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalAuthenticateResultModel
    {
        [JsonProperty("accessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [JsonProperty("encryptedAccessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EncryptedAccessToken { get; set; }

        [JsonProperty("expireInSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ExpireInSeconds { get; set; }

        [JsonProperty("waitingForActivation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool WaitingForActivation { get; set; }

        [JsonProperty("returnUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ReturnUrl { get; set; }

        [JsonProperty("refreshToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        [JsonProperty("refreshTokenExpireInSeconds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int RefreshTokenExpireInSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingTemplateDto
    {
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Name { get; set; }

        [JsonProperty("uriTemplate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string UriTemplate { get; set; }

        [JsonProperty("placeholder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string Placeholder { get; set; }

        [JsonProperty("countryCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2)]
        public string CountryCode { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfTrackingTemplateDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<TrackingTemplateDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwitterGetRequestTokenResponse
    {
        [JsonProperty("token", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }

        [JsonProperty("secret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Secret { get; set; }

        [JsonProperty("confirmed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool Confirmed { get; set; }

        [JsonProperty("redirectUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RedirectUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwitterGetAccessTokenResponse
    {
        [JsonProperty("accessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [JsonProperty("accessTokenSecret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessTokenSecret { get; set; }

        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserId { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserListRoleDto
    {
        [JsonProperty("roleId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int RoleId { get; set; }

        [JsonProperty("roleName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RoleName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserListDto
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("surname", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [JsonProperty("userName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("emailAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        [JsonProperty("phoneNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [JsonProperty("profilePictureId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? ProfilePictureId { get; set; }

        [JsonProperty("isEmailConfirmed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsEmailConfirmed { get; set; }

        [JsonProperty("roles", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserListRoleDto> Roles { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfUserListDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserListDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserEditDto
    {
        /// <summary>
        /// Set null to create a new user. Set user's Id to update a user
        /// </summary>
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string Name { get; set; }

        [JsonProperty("surname", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(64)]
        public string Surname { get; set; }

        [JsonProperty("userName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string UserName { get; set; }

        [JsonProperty("emailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(256)]
        public string EmailAddress { get; set; }

        [JsonProperty("phoneNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(24)]
        public string PhoneNumber { get; set; }

        [JsonProperty("password", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(32)]
        public string Password { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("shouldChangePasswordOnNextLogin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ShouldChangePasswordOnNextLogin { get; set; }

        [JsonProperty("isTwoFactorEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsTwoFactorEnabled { get; set; }

        [JsonProperty("isLockoutEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsLockoutEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleDto
    {
        [JsonProperty("roleId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int RoleId { get; set; }

        [JsonProperty("roleName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RoleName { get; set; }

        [JsonProperty("roleDisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RoleDisplayName { get; set; }

        [JsonProperty("isAssigned", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsAssigned { get; set; }

        [JsonProperty("inheritedFromOrganizationUnit", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool InheritedFromOrganizationUnit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserForEditOutput
    {
        [JsonProperty("profilePictureId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid? ProfilePictureId { get; set; }

        [JsonProperty("user", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public UserEditDto User { get; set; }

        [JsonProperty("roles", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserRoleDto> Roles { get; set; }

        [JsonProperty("allOrganizationUnits", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrganizationUnitDto> AllOrganizationUnits { get; set; }

        [JsonProperty("memberedOrganizationUnits", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> MemberedOrganizationUnits { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserPermissionsForEditOutput
    {
        [JsonProperty("permissions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<FlatPermissionDto> Permissions { get; set; }

        [JsonProperty("grantedPermissionNames", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> GrantedPermissionNames { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityDtoOfInt64
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateUserPermissionsInput
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, 2147483647D)]
        public long Id { get; set; }

        [JsonProperty("grantedPermissionNames", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<string> GrantedPermissionNames { get; set; } = new List<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateUserInput
    {
        [JsonProperty("user", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public UserEditDto User { get; set; } = new UserEditDto();

        [JsonProperty("assignedRoleNames", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required]
        public IEnumerable<string> AssignedRoleNames { get; set; } = new List<string>();

        [JsonProperty("sendActivationEmail", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SendActivationEmail { get; set; }

        [JsonProperty("setRandomPassword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SetRandomPassword { get; set; }

        [JsonProperty("organizationUnits", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<long> OrganizationUnits { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDelegationDto
    {
        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        [JsonProperty("startTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("endTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset EndTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfUserDelegationDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserDelegationDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUserDelegationDto
    {
        [JsonProperty("targetUserId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1D, double.MaxValue)]
        public long TargetUserId { get; set; }

        [JsonProperty("startTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("endTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public DateTimeOffset EndTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkToUserInput
    {
        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

        [JsonProperty("usernameOrEmailAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string UsernameOrEmailAddress { get; set; }

        [JsonProperty("password", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkedUserDto
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfLinkedUserDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LinkedUserDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfLinkedUserDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<LinkedUserDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnlinkUserInput
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("userId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserLoginAttemptDto
    {
        [JsonProperty("tenancyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenancyName { get; set; }

        [JsonProperty("userNameOrEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserNameOrEmail { get; set; }

        [JsonProperty("clientIpAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientIpAddress { get; set; }

        [JsonProperty("clientName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ClientName { get; set; }

        [JsonProperty("browserInfo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string BrowserInfo { get; set; }

        [JsonProperty("result", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Result { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfUserLoginAttemptDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<UserLoginAttemptDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfStorageDescriptionDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<StorageDescriptionDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyNumbersDto
    {
        /// <summary>
        /// Progressed Orders
        /// </summary>
        [JsonProperty("totalOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalOrders { get; set; }

        /// <summary>
        /// Returned Orders
        /// </summary>
        [JsonProperty("returnedOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ReturnedOrders { get; set; }

        /// <summary>
        /// Fulfilled Orders
        /// </summary>
        [JsonProperty("fulfilledOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int FulfilledOrders { get; set; }

        /// <summary>
        /// Average time for handling orders by Warehouse
        /// </summary>
        [JsonProperty("averageOrderHandlingHours", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int AverageOrderHandlingHours { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coordinates
    {
        [JsonProperty("longitude", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public double Latitude { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseMapEntityDto
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("coordinates", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Coordinates Coordinates { get; set; }

        [JsonProperty("joinToId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? JoinToId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfWarehouseMapEntityDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehouseMapEntityDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeLeftMostCriticalOrderDto
    {
        [JsonProperty("timeLeft", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TimeLeft { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderInformationDto
    {
        /// <summary>
        /// Orders Not Started
        /// </summary>
        [JsonProperty("ordersNotStarted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersNotStarted { get; set; }

        /// <summary>
        /// Orders In Progress
        /// </summary>
        [JsonProperty("ordersInProgress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersInProgress { get; set; }

        /// <summary>
        /// Orders Cancelled
        /// </summary>
        [JsonProperty("ordersCancelled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersCancelled { get; set; }

        /// <summary>
        /// Orders Delivered
        /// </summary>
        [JsonProperty("ordersDelivered", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersDelivered { get; set; }

        /// <summary>
        /// Orders Delivered in last 7 days
        /// </summary>
        [JsonProperty("ordersDeliveredInLast7Days", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersDeliveredInLast7Days { get; set; }

        /// <summary>
        /// Orders Returned/Refunded
        /// </summary>
        [JsonProperty("ordersRefunded", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersRefunded { get; set; }

        /// <summary>
        /// Orders on hold
        /// </summary>
        [JsonProperty("ordersOnHold", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int OrdersOnHold { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockValueDto
    {
        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("totalValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalValue { get; set; }

        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseOverviewDashboardInformationDto
    {
        [JsonProperty("storageInformation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StorageInformationDto StorageInformation { get; set; }

        [JsonProperty("storageDescriptions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ListResultDtoOfStorageDescriptionDto StorageDescriptions { get; set; }

        [JsonProperty("keyNumbers", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public KeyNumbersDto KeyNumbers { get; set; }

        [JsonProperty("warehouseMapEntities", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ListResultDtoOfWarehouseMapEntityDto WarehouseMapEntities { get; set; }

        [JsonProperty("timeLeftMostCriticalOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TimeLeftMostCriticalOrderDto TimeLeftMostCriticalOrder { get; set; }

        [JsonProperty("orderInformation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public OrderInformationDto OrderInformation { get; set; }

        [JsonProperty("productsValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<StockValueDto> ProductsValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfServiceCostDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<ServiceCostDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductCriticality
    {

        VeryCritical = 0,

        Critical = 1,

        Normal = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseProductVariantDto
    {
        /// <summary>
        /// The title of the product variant.
        /// </summary>
        [JsonProperty("title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// A unique identifier for the product in the shop.
        /// </summary>
        [JsonProperty("sku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        /// <summary>
        /// The barcode, UPC or ISBN number for the product.
        /// </summary>
        [JsonProperty("barcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        /// <summary>
        /// The number of items in stock for this product variant.
        /// </summary>
        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        /// <summary>
        /// The weight of the product variant in the unit system specified with weight_unit.
        /// </summary>
        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        /// <summary>
        /// The unit system that the product variant's weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".
        /// </summary>
        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// A list of image objects, each one representing an image associated with the product.
        /// </summary>
        [JsonProperty("imageSources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ImageSources { get; set; }

        /// <summary>
        /// Sales Channel Product Id
        /// </summary>
        [JsonProperty("salesChannelProductId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductId { get; set; }

        /// <summary>
        /// Status of the product based on the number of products left in the stock
        /// </summary>
        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Name of the Adder
        /// </summary>
        [JsonProperty("addedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Inventory set by warehouse
        /// </summary>
        [JsonProperty("warehouseInventoryCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? WarehouseInventoryCount { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfWarehouseProductVariantDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehouseProductVariantDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseProductVariantLocationDto
    {
        /// <summary>
        /// Name of the warehouse
        /// </summary>
        [JsonProperty("warehouseName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string WarehouseName { get; set; }

        /// <summary>
        /// Name of the location where product is stored
        /// </summary>
        [JsonProperty("location", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(200)]
        public string Location { get; set; }

        /// <summary>
        /// The number of items in stock for this product variant
        /// </summary>
        [JsonProperty("inventoryQuantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InventoryQuantity { get; set; }

        /// <summary>
        /// The time when the item was received at warehouse
        /// </summary>
        [JsonProperty("inDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? InDate { get; set; }

        /// <summary>
        /// The expiry date of the item
        /// </summary>
        [JsonProperty("expiryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ExpiryDate { get; set; }

        /// <summary>
        /// Length of the item
        /// </summary>
        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

        /// <summary>
        /// Width of the item
        /// </summary>
        [JsonProperty("width", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Width { get; set; }

        /// <summary>
        /// Height of the item
        /// </summary>
        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        /// <summary>
        /// Unit of length, width and height
        /// </summary>
        [JsonProperty("dimensionUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string DimensionUnit { get; set; }

        /// <summary>
        /// Weight of the item
        /// </summary>
        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        /// <summary>
        /// Unit of Weight
        /// </summary>
        [JsonProperty("weightUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(20)]
        public string WeightUnit { get; set; }

        [JsonProperty("salesChannelProductVariantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelProductVariantId { get; set; }

        [JsonProperty("salesChannelProductVariant", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelProductVariant SalesChannelProductVariant { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfWarehouseProductVariantLocationDto
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehouseProductVariantLocationDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryRule
    {
        [JsonProperty("criticalInventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CriticalInventory { get; set; }

        [JsonProperty("veryCriticalInventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int VeryCriticalInventory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseConnectionDto
    {
        /// <summary>
        /// Name of the Warehouse used by Logistic Provider
        /// </summary>
        [JsonProperty("warehouse", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Warehouse { get; set; }

        [JsonProperty("warehouseUserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseUserName { get; set; }

        [JsonProperty("warehousePassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehousePassword { get; set; }

        [JsonProperty("warehouseUri", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseUri { get; set; }

        [JsonProperty("goodsOwnerCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GoodsOwnerCode { get; set; }

        [JsonProperty("goodsOwnerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GoodsOwnerId { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        [JsonProperty("logisticProviderName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LogisticProviderName { get; set; }

        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        [JsonProperty("storeName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        /// <summary>
        /// Free Text 1
        /// </summary>
        [JsonProperty("freeText1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FreeText1 { get; set; }

        /// <summary>
        /// Free Text 2
        /// </summary>
        [JsonProperty("freeText2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FreeText2 { get; set; }

        /// <summary>
        /// If connection is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Sync Warehouse Inventory to Prime Penguin
        /// </summary>
        [JsonProperty("syncInventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncInventory { get; set; }

        /// <summary>
        /// Comma separated list of skus excluded from sync
        /// </summary>
        [JsonProperty("excludeInventorySku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExcludeInventorySku { get; set; }

        /// <summary>
        /// Sync Prime Penguin orders to Warehouse
        /// </summary>
        [JsonProperty("syncOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncOrders { get; set; }

        /// <summary>
        /// Process Warehouse order changes at Prime Penguin
        /// </summary>
        [JsonProperty("processOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ProcessOrders { get; set; }

        /// <summary>
        /// Process Warehouse purchase order changes at Prime Penguin
        /// </summary>
        [JsonProperty("syncPurchaseOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncPurchaseOrders { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfWarehouseConnectionDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WarehouseConnectionDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateWarehouseConnectionInput
    {
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the Warehouse used by Logistic Provider
        /// </summary>
        [JsonProperty("warehouse", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string Warehouse { get; set; }

        [JsonProperty("warehouseUserName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string WarehouseUserName { get; set; }

        [JsonProperty("warehousePassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string WarehousePassword { get; set; }

        [JsonProperty("warehouseUri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1000)]
        public string WarehouseUri { get; set; }

        [JsonProperty("goodsOwnerCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string GoodsOwnerCode { get; set; }

        [JsonProperty("goodsOwnerId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string GoodsOwnerId { get; set; }

        /// <summary>
        /// Free Text 1
        /// </summary>
        [JsonProperty("freeText1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string FreeText1 { get; set; }

        /// <summary>
        /// Free Text 2
        /// </summary>
        [JsonProperty("freeText2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string FreeText2 { get; set; }

        [JsonProperty("logisticProviderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int LogisticProviderId { get; set; }

        /// <summary>
        /// Tenant Id of Customer of Logistic Provider (Tenant Id of PrimePenguin e-Shop)
        /// </summary>
        [JsonProperty("customerTenantId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int CustomerTenantId { get; set; }

        /// <summary>
        /// If connection is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Sync Warehouse Inventory to Prime Penguin
        /// </summary>
        [JsonProperty("syncInventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncInventory { get; set; }

        /// <summary>
        /// Comma separated list of skus excluded from sync
        /// </summary>
        [JsonProperty("excludeInventorySku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(10000)]
        public string ExcludeInventorySku { get; set; }

        /// <summary>
        /// Sync Prime Penguin orders to Warehouse
        /// </summary>
        [JsonProperty("syncOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncOrders { get; set; }

        /// <summary>
        /// Process Warehouse order changes at Prime Penguin
        /// </summary>
        [JsonProperty("processOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ProcessOrders { get; set; }

        /// <summary>
        /// Process Warehouse purchase order changes at Prime Penguin
        /// </summary>
        [JsonProperty("syncPurchaseOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncPurchaseOrders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBasicWarehouseConnectionInput
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Range(1, 2147483647)]
        public int Id { get; set; }

        /// <summary>
        /// If connection is active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Sync Warehouse Inventory to Prime Penguin
        /// </summary>
        [JsonProperty("syncInventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncInventory { get; set; }

        /// <summary>
        /// Comma separated list of skus excluded from sync
        /// </summary>
        [JsonProperty("excludeInventorySku", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(10000)]
        public string ExcludeInventorySku { get; set; }

        /// <summary>
        /// Sync Prime Penguin orders to Warehouse
        /// </summary>
        [JsonProperty("syncOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncOrders { get; set; }

        /// <summary>
        /// Process Warehouse order changes at Prime Penguin
        /// </summary>
        [JsonProperty("processOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool ProcessOrders { get; set; }

        /// <summary>
        /// Process Warehouse purchase order changes at Prime Penguin
        /// </summary>
        [JsonProperty("syncPurchaseOrders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool SyncPurchaseOrders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CriticalOrdersDto
    {
        [JsonProperty("timeToDelay", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TimeToDelay { get; set; }

        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string OrderId { get; set; }

        [JsonProperty("cancelReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(500)]
        public string CancelReason { get; set; }

        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        [JsonProperty("closedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ClosedAt { get; set; }

        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(300)]
        public string CustomerName { get; set; }

        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string ContactEmail { get; set; }

        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string Currency { get; set; }

        [JsonProperty("customerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string CustomerId { get; set; }

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(250)]
        public string Tags { get; set; }

        [JsonProperty("financialStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FinancialStatus { get; set; }

        [JsonProperty("fulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(100)]
        public string FulfillmentStatus { get; set; }

        [JsonProperty("normalizedFulfillmentStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedFulfillmentStatus { get; set; }

        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [JsonProperty("processingMethod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(50)]
        public string ProcessingMethod { get; set; }

        [JsonProperty("totalLineItemsPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalLineItemsPrice { get; set; }

        [JsonProperty("totalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [JsonProperty("totalTax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalTax { get; set; }

        [JsonProperty("totalWeight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalWeight { get; set; }

        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [StringLength(2000)]
        public string Note { get; set; }

        [JsonProperty("markedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? MarkedAt { get; set; }

        [JsonProperty("updatedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("shippingType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingType { get; set; }

        [JsonProperty("shippingCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingCompany { get; set; }

        [JsonProperty("shippingPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingPrice { get; set; }

        [JsonProperty("isPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsPaid { get; set; }

        [JsonProperty("userSalesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UserSalesChannelId { get; set; }

        [JsonProperty("lineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelLineItemDto> LineItems { get; set; }

        [JsonProperty("bundleLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelBundleLineItemDto> BundleLineItems { get; set; }

        [JsonProperty("fulfillments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelFulfillmentDto> Fulfillments { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderShippingAddressDto ShippingAddress { get; set; }

        [JsonProperty("orderTracking", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SalesChannelOrderTrackingDto OrderTracking { get; set; }

        [JsonProperty("refunds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelOrderRefundDto> Refunds { get; set; }

        [JsonProperty("primePenguinImportedAt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset PrimePenguinImportedAt { get; set; }

        [JsonProperty("primePenguinModifiedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrimePenguinModifiedAt { get; set; }

        [JsonProperty("warehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WarehouseStatus { get; set; }

        [JsonProperty("normalizedWarehouseStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NormalizedWarehouseStatus { get; set; }

        [JsonProperty("warehouseFulfilledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WarehouseFulfilledAt { get; set; }

        [JsonProperty("externalUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalUrl { get; set; }

        [JsonProperty("deliveryInstructions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DeliveryInstructions { get; set; }

        [JsonProperty("internalNote", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InternalNote { get; set; }

        [JsonProperty("deliveryStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PrimePenguinManagedDeliveryStatus DeliveryStatus { get; set; }

        [JsonProperty("handlingTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HandlingTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfCriticalOrdersDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<CriticalOrdersDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnsOverviewDto
    {
        /// <summary>
        /// Returns Uncontrolled
        /// </summary>
        [JsonProperty("unControlledReviews", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UnControlledReviews { get; set; }

        /// <summary>
        /// Returns Controlled
        /// </summary>
        [JsonProperty("controlledReviews", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int ControlledReviews { get; set; }

        /// <summary>
        /// Accepted Returns
        /// </summary>
        [JsonProperty("accepted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int Accepted { get; set; }

        /// <summary>
        /// Unaccepted Returns
        /// </summary>
        [JsonProperty("unAccepted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int UnAccepted { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderReturnDto
    {
        [JsonProperty("refundStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public RefundStatus RefundStatus { get; set; }

        [JsonProperty("reviewStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewStatus ReviewStatus { get; set; }

        /// <summary>
        /// Status of the Refund
        /// </summary>
        [JsonProperty("refundStatusName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RefundStatusName { get; set; }

        /// <summary>
        /// Review status of the Refund
        /// </summary>
        [JsonProperty("reviewStatusName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ReviewStatusName { get; set; }

        /// <summary>
        /// The date and time when the refund was cancelled.
        /// </summary>
        [JsonProperty("cancelledAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CancelledAt { get; set; }

        /// <summary>
        /// The date and time when the refund was created.
        /// </summary>
        [JsonProperty("createdAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The reason why the refund was cancelled.
        /// </summary>
        [JsonProperty("cancelledReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledReason { get; set; }

        /// <summary>
        /// The image paths for cancelled order, seperated by ;
        /// </summary>
        [JsonProperty("cancelledOrderImages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CancelledOrderImages { get; set; }

        /// <summary>
        /// The date and time when the refund was imported.
        /// </summary>
        [JsonProperty("processedAt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ProcessedAt { get; set; }

        /// <summary>
        /// The optional note attached to a refund.
        /// </summary>
        [JsonProperty("note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>
        /// Whether or not the line items were added back to the store inventory.
        /// </summary>
        [JsonProperty("restock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Restock { get; set; }

        /// <summary>
        /// A unique numeric identifier for the order. This one is used by the shop owner and customer.
        /// <br/>This is different from the id property, which is also a unique numeric identifier for the order, but used for API purposes.
        /// </summary>
        [JsonProperty("orderNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The customer's full name.
        /// </summary>
        [JsonProperty("customerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>
        /// The customer's contact email address.
        /// </summary>
        [JsonProperty("contactEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        /// <summary>
        /// Sales Channel Order Id
        /// </summary>
        [JsonProperty("salesChannelOrderId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long SalesChannelOrderId { get; set; }

        /// <summary>
        /// The list of PrimePenguin.Technology.SalesChannel.Orders.Dto.SalesChannelRefundLineItemsDto objects
        /// </summary>
        [JsonProperty("refundLineItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<SalesChannelRefundLineItemsDto> RefundLineItems { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfOrderReturnDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<OrderReturnDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallWebflowInput
    {
        /// <summary>
        /// API Key
        /// </summary>
        [JsonProperty("apiKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerPaid
    {
        [JsonProperty("unit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Value { get; set; }

        [JsonProperty("string", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string String { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerInfo
    {
        [JsonProperty("fullName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FullName { get; set; }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutAddress
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("addressee", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Addressee { get; set; }

        [JsonProperty("line1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        [JsonProperty("line2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Line2 { get; set; }

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("postalCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariantImage
    {
        [JsonProperty("fileId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FileId { get; set; }

        [JsonProperty("url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public System.Uri Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchasedItem
    {
        [JsonProperty("count", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Count { get; set; }

        [JsonProperty("rowTotal", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerPaid RowTotal { get; set; }

        [JsonProperty("productName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [JsonProperty("productId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        [JsonProperty("productSlug", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductSlug { get; set; }

        [JsonProperty("variantName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantName { get; set; }

        [JsonProperty("variantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantId { get; set; }

        [JsonProperty("variantSlug", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantSlug { get; set; }

        [JsonProperty("variantSKU", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VariantSKU { get; set; }

        [JsonProperty("variantImage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public VariantImage VariantImage { get; set; }

        [JsonProperty("variantPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerPaid VariantPrice { get; set; }

        [JsonProperty("weight", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [JsonProperty("height", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [JsonProperty("width", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Width { get; set; }

        [JsonProperty("length", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Length { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StripeDetails
    {
        [JsonProperty("refundReason", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RefundReason { get; set; }

        [JsonProperty("refundId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RefundId { get; set; }

        [JsonProperty("disputeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisputeId { get; set; }

        [JsonProperty("chargeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ChargeId { get; set; }

        [JsonProperty("customerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Expires
    {
        [JsonProperty("year", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Year { get; set; }

        [JsonProperty("month", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Month { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StripeCard
    {
        [JsonProperty("last4", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Last4 { get; set; }

        [JsonProperty("brand", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Brand { get; set; }

        [JsonProperty("ownerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OwnerName { get; set; }

        [JsonProperty("expires", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Expires Expires { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Extra
    {
        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerPaid Price { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Totals
    {
        [JsonProperty("subtotal", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerPaid Subtotal { get; set; }

        [JsonProperty("extras", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<Extra> Extras { get; set; }

        [JsonProperty("total", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerPaid Total { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomDatum
    {
        [JsonProperty("textInput", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TextInput { get; set; }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("textArea", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TextArea { get; set; }

        [JsonProperty("checkbox", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Checkbox { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderModel
    {
        [JsonProperty("orderId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("comment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [JsonProperty("orderComment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderComment { get; set; }

        [JsonProperty("acceptedOn", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset AcceptedOn { get; set; }

        [JsonProperty("disputedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisputedOn { get; set; }

        [JsonProperty("disputeUpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisputeUpdatedOn { get; set; }

        [JsonProperty("disputeLastStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisputeLastStatus { get; set; }

        [JsonProperty("fulfilledOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FulfilledOn { get; set; }

        [JsonProperty("refundedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RefundedOn { get; set; }

        [JsonProperty("customerPaid", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerPaid CustomerPaid { get; set; }

        [JsonProperty("netAmount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerPaid NetAmount { get; set; }

        [JsonProperty("shippingProvider", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingProvider { get; set; }

        [JsonProperty("shippingTracking", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingTracking { get; set; }

        [JsonProperty("shippingTrackingURL", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingTrackingURL { get; set; }

        [JsonProperty("customerInfo", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerInfo CustomerInfo { get; set; }

        [JsonProperty("allAddresses", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<CheckoutAddress> AllAddresses { get; set; }

        [JsonProperty("shippingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CheckoutAddress ShippingAddress { get; set; }

        [JsonProperty("billingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CheckoutAddress BillingAddress { get; set; }

        [JsonProperty("purchasedItems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<PurchasedItem> PurchasedItems { get; set; }

        [JsonProperty("purchasedItemsCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long PurchasedItemsCount { get; set; }

        [JsonProperty("stripeDetails", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StripeDetails StripeDetails { get; set; }

        [JsonProperty("stripeCard", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StripeCard StripeCard { get; set; }

        [JsonProperty("paymentProcessor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentProcessor { get; set; }

        [JsonProperty("totals", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Totals Totals { get; set; }

        [JsonProperty("customData", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<CustomDatum> CustomData { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryHook
    {
        [JsonProperty("_id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string _id { get; set; }

        [JsonProperty("quantity", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Quantity { get; set; }

        [JsonProperty("inventoryType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string InventoryType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebhookEvent
    {
        [JsonProperty("webhookName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string WebhookName { get; set; }

        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("isDeleted", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsDeleted { get; set; }

        [JsonProperty("deletionTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletionTime { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebhookRecorderDto
    {
        /// <summary>
        /// Primary Id of key entity being recorded
        /// </summary>
        [JsonProperty("primaryEntityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PrimaryEntityId { get; set; }

        /// <summary>
        /// Function name that process the webhook
        /// </summary>
        [JsonProperty("functionName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FunctionName { get; set; }

        [JsonProperty("salesChannelName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SalesChannelName { get; set; }

        [JsonProperty("salesChannelId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? SalesChannelId { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("isSuccessfull", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsSuccessfull { get; set; }

        [JsonProperty("errorMessage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfWebhookRecorderDto
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<WebhookRecorderDto> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HttpStatusCode
    {

        Continue = 100,

        SwitchingProtocols = 101,

        Processing = 102,

        EarlyHints = 103,

        OK = 200,

        Created = 201,

        Accepted = 202,

        NonAuthoritativeInformation = 203,

        NoContent = 204,

        ResetContent = 205,

        PartialContent = 206,

        MultiStatus = 207,

        AlreadyReported = 208,

        IMUsed = 226,

        MultipleChoices = 300,

        Ambiguous = 301,

        MovedPermanently = 302,

        Moved = 303,

        Found = 304,

        Redirect = 305,

        SeeOther = 306,

        RedirectMethod = 307,

        NotModified = 308,

        UseProxy = 400,

        Unused = 401,

        TemporaryRedirect = 402,

        RedirectKeepVerb = 403,

        PermanentRedirect = 404,

        BadRequest = 405,

        Unauthorized = 406,

        PaymentRequired = 407,

        Forbidden = 408,

        NotFound = 409,

        MethodNotAllowed = 410,

        NotAcceptable = 411,

        ProxyAuthenticationRequired = 412,

        RequestTimeout = 413,

        Conflict = 414,

        Gone = 415,

        LengthRequired = 416,

        PreconditionFailed = 417,

        RequestEntityTooLarge = 421,

        RequestUriTooLong = 422,

        UnsupportedMediaType = 423,

        RequestedRangeNotSatisfiable = 424,

        ExpectationFailed = 426,

        MisdirectedRequest = 428,

        UnprocessableEntity = 429,

        Locked = 431,

        FailedDependency = 451,

        UpgradeRequired = 500,

        PreconditionRequired = 501,

        TooManyRequests = 502,

        RequestHeaderFieldsTooLarge = 503,

        UnavailableForLegalReasons = 504,

        InternalServerError = 505,

        NotImplemented = 506,

        BadGateway = 507,

        ServiceUnavailable = 508,

        GatewayTimeout = 510,

        HttpVersionNotSupported = 511,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllSendAttemptsOutput
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Abp.Webhooks.WebhookEvent foreign id
        /// </summary>
        [JsonProperty("webhookEventId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid WebhookEventId { get; set; }

        /// <summary>
        /// Webhook unique name Abp.Webhooks.WebhookDefinition.Name
        /// </summary>
        [JsonProperty("webhookName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WebhookName { get; set; }

        /// <summary>
        /// Webhook data as JSON string.
        /// </summary>
        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// Webhook response content that webhook endpoint send back
        /// </summary>
        [JsonProperty("response", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Response { get; set; }

        [JsonProperty("responseStatusCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public HttpStatusCode ResponseStatusCode { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResultDtoOfGetAllSendAttemptsOutput
    {
        [JsonProperty("totalCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<GetAllSendAttemptsOutput> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllSendAttemptsOfWebhookEventOutput
    {
        /// <summary>
        /// Abp.Webhooks.WebhookSendAttempt unique id
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Abp.Webhooks.WebhookSubscriptionInfo.WebhookUri
        /// </summary>
        [JsonProperty("webhookUri", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WebhookUri { get; set; }

        /// <summary>
        /// Abp.Webhooks.WebhookSubscription foreign id
        /// </summary>
        [JsonProperty("webhookSubscriptionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid WebhookSubscriptionId { get; set; }

        /// <summary>
        /// Webhook response content that webhook endpoint send back
        /// </summary>
        [JsonProperty("response", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Response { get; set; }

        [JsonProperty("responseStatusCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public HttpStatusCode ResponseStatusCode { get; set; }

        [JsonProperty("creationTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        [JsonProperty("lastModificationTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModificationTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfGetAllSendAttemptsOfWebhookEventOutput
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<GetAllSendAttemptsOfWebhookEventOutput> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllSubscriptionsOutput
    {
        /// <summary>
        /// Subscription webhook endpoint
        /// </summary>
        [JsonProperty("webhookUri", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WebhookUri { get; set; }

        /// <summary>
        /// Is subscription active
        /// </summary>
        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Subscribed webhook definitions unique names. Abp.Webhooks.WebhookDefinition.Name
        /// </summary>
        [JsonProperty("webhooks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Webhooks { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfGetAllSubscriptionsOutput
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<GetAllSubscriptionsOutput> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebhookSubscription
    {
        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TenantId { get; set; }

        [JsonProperty("webhookUri", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WebhookUri { get; set; }

        [JsonProperty("secret", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Secret { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

        [JsonProperty("webhooks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Webhooks { get; set; }

        [JsonProperty("headers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, string> Headers { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivateWebhookSubscriptionInput
    {
        [JsonProperty("subscriptionId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public System.Guid SubscriptionId { get; set; }

        [JsonProperty("isActive", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool IsActive { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllAvailableWebhooksOutput
    {
        /// <summary>
        /// Unique name of the webhook.
        /// </summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Display name of the webhook.
        /// <br/>Optional.
        /// </summary>
        [JsonProperty("displayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Description for the webhook.
        /// <br/>Optional.
        /// </summary>
        [JsonProperty("description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListResultDtoOfGetAllAvailableWebhooksOutput
    {
        [JsonProperty("items", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<GetAllAvailableWebhooksOutput> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLatestWebLogsOutput
    {
        [JsonProperty("latestWebLogLines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> LatestWebLogLines { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WixHookInput
    {
        [JsonProperty("eventName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("entityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [JsonProperty("salesChannelId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int SalesChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallWooCommerceInput
    {
        /// <summary>
        /// URI of the Squarespace store
        /// </summary>
        [JsonProperty("shopUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ShopUrl { get; set; }

        /// <summary>
        /// Consumer Key
        /// </summary>
        [JsonProperty("consumerKey", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ConsumerKey { get; set; }

        /// <summary>
        /// Consumer Secret
        /// </summary>
        [JsonProperty("consumerSecret", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [Required(AllowEmptyStrings = true)]
        public string ConsumerSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalData
    {
        [JsonProperty("Paypal", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, string> Paypal { get; set; }

        [JsonProperty("Stripe", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, string> Stripe { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimePenguinServiceException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public PrimePenguinServiceException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimePenguinServiceException<TResult> : PrimePenguinServiceException
    {
        public TResult Result { get; private set; }

        public PrimePenguinServiceException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603